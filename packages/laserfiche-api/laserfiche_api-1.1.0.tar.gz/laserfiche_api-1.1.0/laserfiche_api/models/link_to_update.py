# coding: utf-8

"""
    Laserfiche Repository API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p>Visit the changelog for the list of changes: <a href=\"/repository/v2/changelog\">/repository/v2/changelog</a></p><p><strong>Build# : </strong>41a7347c0662989661d7ab8105a70d36cb42518e_.20240124.4</p>  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LinkToUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'link_definition_id': 'int',
        'other_entry_id': 'int',
        'is_source': 'bool',
        'custom_properties': 'dict(str, str)'
    }

    attribute_map = {
        'link_definition_id': 'linkDefinitionId',
        'other_entry_id': 'otherEntryId',
        'is_source': 'isSource',
        'custom_properties': 'customProperties'
    }

    def __init__(self, link_definition_id=None, other_entry_id=None, is_source=True, custom_properties=None):  # noqa: E501
        """LinkToUpdate - a model defined in Swagger"""  # noqa: E501
        self._link_definition_id = None
        self._other_entry_id = None
        self._is_source = None
        self._custom_properties = None
        self.discriminator = None
        self.link_definition_id = link_definition_id
        self.other_entry_id = other_entry_id
        if is_source is not None:
            self.is_source = is_source
        if custom_properties is not None:
            self.custom_properties = custom_properties

    @property
    def link_definition_id(self):
        """Gets the link_definition_id of this LinkToUpdate.  # noqa: E501

        The id of the link definition to be assigned to the entry.  # noqa: E501

        :return: The link_definition_id of this LinkToUpdate.  # noqa: E501
        :rtype: int
        """
        return self._link_definition_id

    @link_definition_id.setter
    def link_definition_id(self, link_definition_id):
        """Sets the link_definition_id of this LinkToUpdate.

        The id of the link definition to be assigned to the entry.  # noqa: E501

        :param link_definition_id: The link_definition_id of this LinkToUpdate.  # noqa: E501
        :type: int
        """
        if link_definition_id is None:
            raise ValueError("Invalid value for `link_definition_id`, must not be `None`")  # noqa: E501

        self._link_definition_id = link_definition_id

    @property
    def other_entry_id(self):
        """Gets the other_entry_id of this LinkToUpdate.  # noqa: E501

        The id of the other entry to be linked to the entry.  # noqa: E501

        :return: The other_entry_id of this LinkToUpdate.  # noqa: E501
        :rtype: int
        """
        return self._other_entry_id

    @other_entry_id.setter
    def other_entry_id(self, other_entry_id):
        """Sets the other_entry_id of this LinkToUpdate.

        The id of the other entry to be linked to the entry.  # noqa: E501

        :param other_entry_id: The other_entry_id of this LinkToUpdate.  # noqa: E501
        :type: int
        """
        if other_entry_id is None:
            raise ValueError("Invalid value for `other_entry_id`, must not be `None`")  # noqa: E501

        self._other_entry_id = other_entry_id

    @property
    def is_source(self):
        """Gets the is_source of this LinkToUpdate.  # noqa: E501

        Whether the entry is the source for the link. The default value is true.  # noqa: E501

        :return: The is_source of this LinkToUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._is_source

    @is_source.setter
    def is_source(self, is_source):
        """Sets the is_source of this LinkToUpdate.

        Whether the entry is the source for the link. The default value is true.  # noqa: E501

        :param is_source: The is_source of this LinkToUpdate.  # noqa: E501
        :type: bool
        """

        self._is_source = is_source

    @property
    def custom_properties(self):
        """Gets the custom_properties of this LinkToUpdate.  # noqa: E501

        Custom properties (key, value pairs) to be added to the link.  # noqa: E501

        :return: The custom_properties of this LinkToUpdate.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this LinkToUpdate.

        Custom properties (key, value pairs) to be added to the link.  # noqa: E501

        :param custom_properties: The custom_properties of this LinkToUpdate.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_properties = custom_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LinkToUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LinkToUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
