# coding: utf-8

"""
    Laserfiche Repository API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p>Visit the changelog for the list of changes: <a href=\"/repository/v2/changelog\">/repository/v2/changelog</a></p><p><strong>Build# : </strong>41a7347c0662989661d7ab8105a70d36cb42518e_.20240124.4</p>  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetEntryByPathResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry': 'OneOfGetEntryByPathResponseEntry',
        'ancestor_entry': 'OneOfGetEntryByPathResponseAncestorEntry'
    }

    attribute_map = {
        'entry': 'entry',
        'ancestor_entry': 'ancestorEntry'
    }

    def __init__(self, entry=None, ancestor_entry=None):  # noqa: E501
        """GetEntryByPathResponse - a model defined in Swagger"""  # noqa: E501
        self._entry = None
        self._ancestor_entry = None
        self.discriminator = None
        if entry is not None:
            self.entry = entry
        if ancestor_entry is not None:
            self.ancestor_entry = ancestor_entry

    @property
    def entry(self):
        """Gets the entry of this GetEntryByPathResponse.  # noqa: E501

        The entry found by path. This property is set if entry is found.  # noqa: E501

        :return: The entry of this GetEntryByPathResponse.  # noqa: E501
        :rtype: OneOfGetEntryByPathResponseEntry
        """
        return self._entry

    @entry.setter
    def entry(self, entry):
        """Sets the entry of this GetEntryByPathResponse.

        The entry found by path. This property is set if entry is found.  # noqa: E501

        :param entry: The entry of this GetEntryByPathResponse.  # noqa: E501
        :type: OneOfGetEntryByPathResponseEntry
        """

        self._entry = entry

    @property
    def ancestor_entry(self):
        """Gets the ancestor_entry of this GetEntryByPathResponse.  # noqa: E501

        The closest entry ancestor. This property is set if entry is not found and fallbackToClosestAncestor is set to true.  # noqa: E501

        :return: The ancestor_entry of this GetEntryByPathResponse.  # noqa: E501
        :rtype: OneOfGetEntryByPathResponseAncestorEntry
        """
        return self._ancestor_entry

    @ancestor_entry.setter
    def ancestor_entry(self, ancestor_entry):
        """Sets the ancestor_entry of this GetEntryByPathResponse.

        The closest entry ancestor. This property is set if entry is not found and fallbackToClosestAncestor is set to true.  # noqa: E501

        :param ancestor_entry: The ancestor_entry of this GetEntryByPathResponse.  # noqa: E501
        :type: OneOfGetEntryByPathResponseAncestorEntry
        """

        self._ancestor_entry = ancestor_entry

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetEntryByPathResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetEntryByPathResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
