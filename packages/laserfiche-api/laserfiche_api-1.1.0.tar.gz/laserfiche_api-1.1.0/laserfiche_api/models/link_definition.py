# coding: utf-8

"""
    Laserfiche Repository API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p>Visit the changelog for the list of changes: <a href=\"/repository/v2/changelog\">/repository/v2/changelog</a></p><p><strong>Build# : </strong>41a7347c0662989661d7ab8105a70d36cb42518e_.20240124.4</p>  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LinkDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'source_label': 'str',
        'target_label': 'str',
        'description': 'str'
    }

    attribute_map = {
        'id': 'id',
        'source_label': 'sourceLabel',
        'target_label': 'targetLabel',
        'description': 'description'
    }

    def __init__(self, id=None, source_label=None, target_label=None, description=None):  # noqa: E501
        """LinkDefinition - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._source_label = None
        self._target_label = None
        self._description = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if source_label is not None:
            self.source_label = source_label
        if target_label is not None:
            self.target_label = target_label
        if description is not None:
            self.description = description

    @property
    def id(self):
        """Gets the id of this LinkDefinition.  # noqa: E501

        The ID of the link definition.  # noqa: E501

        :return: The id of this LinkDefinition.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LinkDefinition.

        The ID of the link definition.  # noqa: E501

        :param id: The id of this LinkDefinition.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def source_label(self):
        """Gets the source_label of this LinkDefinition.  # noqa: E501

        The label for the source entry in the link definition.  # noqa: E501

        :return: The source_label of this LinkDefinition.  # noqa: E501
        :rtype: str
        """
        return self._source_label

    @source_label.setter
    def source_label(self, source_label):
        """Sets the source_label of this LinkDefinition.

        The label for the source entry in the link definition.  # noqa: E501

        :param source_label: The source_label of this LinkDefinition.  # noqa: E501
        :type: str
        """

        self._source_label = source_label

    @property
    def target_label(self):
        """Gets the target_label of this LinkDefinition.  # noqa: E501

        The label for the target entry in the link definition.  # noqa: E501

        :return: The target_label of this LinkDefinition.  # noqa: E501
        :rtype: str
        """
        return self._target_label

    @target_label.setter
    def target_label(self, target_label):
        """Sets the target_label of this LinkDefinition.

        The label for the target entry in the link definition.  # noqa: E501

        :param target_label: The target_label of this LinkDefinition.  # noqa: E501
        :type: str
        """

        self._target_label = target_label

    @property
    def description(self):
        """Gets the description of this LinkDefinition.  # noqa: E501

        The description of the link definition.  # noqa: E501

        :return: The description of this LinkDefinition.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LinkDefinition.

        The description of the link definition.  # noqa: E501

        :param description: The description of this LinkDefinition.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LinkDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LinkDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
