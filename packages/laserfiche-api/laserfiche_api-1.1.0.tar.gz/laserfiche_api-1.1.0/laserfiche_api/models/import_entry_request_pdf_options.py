# coding: utf-8

"""
    Laserfiche Repository API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p>Visit the changelog for the list of changes: <a href=\"/repository/v2/changelog\">/repository/v2/changelog</a></p><p><strong>Build# : </strong>41a7347c0662989661d7ab8105a70d36cb42518e_.20240124.4</p>  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ImportEntryRequestPdfOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'generate_text': 'bool',
        'generate_pages': 'bool',
        'generate_pages_image_type': 'OneOfImportEntryRequestPdfOptionsGeneratePagesImageType',
        'keep_pdf_after_import': 'bool'
    }

    attribute_map = {
        'generate_text': 'generateText',
        'generate_pages': 'generatePages',
        'generate_pages_image_type': 'generatePagesImageType',
        'keep_pdf_after_import': 'keepPdfAfterImport'
    }

    def __init__(self, generate_text=False, generate_pages=False, generate_pages_image_type=None, keep_pdf_after_import=True):  # noqa: E501
        """ImportEntryRequestPdfOptions - a model defined in Swagger"""  # noqa: E501
        self._generate_text = None
        self._generate_pages = None
        self._generate_pages_image_type = None
        self._keep_pdf_after_import = None
        self.discriminator = None
        if generate_text is not None:
            self.generate_text = generate_text
        if generate_pages is not None:
            self.generate_pages = generate_pages
        if generate_pages_image_type is not None:
            self.generate_pages_image_type = generate_pages_image_type
        if keep_pdf_after_import is not None:
            self.keep_pdf_after_import = keep_pdf_after_import

    @property
    def generate_text(self):
        """Gets the generate_text of this ImportEntryRequestPdfOptions.  # noqa: E501

        Indicates if the import operation should generate text. The default value is false.  # noqa: E501

        :return: The generate_text of this ImportEntryRequestPdfOptions.  # noqa: E501
        :rtype: bool
        """
        return self._generate_text

    @generate_text.setter
    def generate_text(self, generate_text):
        """Sets the generate_text of this ImportEntryRequestPdfOptions.

        Indicates if the import operation should generate text. The default value is false.  # noqa: E501

        :param generate_text: The generate_text of this ImportEntryRequestPdfOptions.  # noqa: E501
        :type: bool
        """

        self._generate_text = generate_text

    @property
    def generate_pages(self):
        """Gets the generate_pages of this ImportEntryRequestPdfOptions.  # noqa: E501

        Indicates if the import operation should generate image pages. The default value is false.  # noqa: E501

        :return: The generate_pages of this ImportEntryRequestPdfOptions.  # noqa: E501
        :rtype: bool
        """
        return self._generate_pages

    @generate_pages.setter
    def generate_pages(self, generate_pages):
        """Sets the generate_pages of this ImportEntryRequestPdfOptions.

        Indicates if the import operation should generate image pages. The default value is false.  # noqa: E501

        :param generate_pages: The generate_pages of this ImportEntryRequestPdfOptions.  # noqa: E501
        :type: bool
        """

        self._generate_pages = generate_pages

    @property
    def generate_pages_image_type(self):
        """Gets the generate_pages_image_type of this ImportEntryRequestPdfOptions.  # noqa: E501

        The image type used when generating image pages. The default value is StandardColor. This option is only applicable when GeneratePages is true.  # noqa: E501

        :return: The generate_pages_image_type of this ImportEntryRequestPdfOptions.  # noqa: E501
        :rtype: OneOfImportEntryRequestPdfOptionsGeneratePagesImageType
        """
        return self._generate_pages_image_type

    @generate_pages_image_type.setter
    def generate_pages_image_type(self, generate_pages_image_type):
        """Sets the generate_pages_image_type of this ImportEntryRequestPdfOptions.

        The image type used when generating image pages. The default value is StandardColor. This option is only applicable when GeneratePages is true.  # noqa: E501

        :param generate_pages_image_type: The generate_pages_image_type of this ImportEntryRequestPdfOptions.  # noqa: E501
        :type: OneOfImportEntryRequestPdfOptionsGeneratePagesImageType
        """

        self._generate_pages_image_type = generate_pages_image_type

    @property
    def keep_pdf_after_import(self):
        """Gets the keep_pdf_after_import of this ImportEntryRequestPdfOptions.  # noqa: E501

        Indicates if the PDF file should be retained as an electronic document after generating image pages. The default value is true. This option is only applicable when GeneratePages is true.  # noqa: E501

        :return: The keep_pdf_after_import of this ImportEntryRequestPdfOptions.  # noqa: E501
        :rtype: bool
        """
        return self._keep_pdf_after_import

    @keep_pdf_after_import.setter
    def keep_pdf_after_import(self, keep_pdf_after_import):
        """Sets the keep_pdf_after_import of this ImportEntryRequestPdfOptions.

        Indicates if the PDF file should be retained as an electronic document after generating image pages. The default value is true. This option is only applicable when GeneratePages is true.  # noqa: E501

        :param keep_pdf_after_import: The keep_pdf_after_import of this ImportEntryRequestPdfOptions.  # noqa: E501
        :type: bool
        """

        self._keep_pdf_after_import = keep_pdf_after_import

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ImportEntryRequestPdfOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ImportEntryRequestPdfOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
