# coding: utf-8

"""
    Laserfiche Repository API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p>Visit the changelog for the list of changes: <a href=\"/repository/v2/changelog\">/repository/v2/changelog</a></p><p><strong>Build# : </strong>41a7347c0662989661d7ab8105a70d36cb42518e_.20240124.4</p>  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from laserfiche_api.models.entry import Entry  # noqa: F401,E501

class Shortcut(Entry):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_id': 'int',
        'extension': 'str',
        'target_type': 'object'
    }
    if hasattr(Entry, "swagger_types"):
        swagger_types.update(Entry.swagger_types)

    attribute_map = {
        'target_id': 'targetId',
        'extension': 'extension',
        'target_type': 'targetType'
    }
    if hasattr(Entry, "attribute_map"):
        attribute_map.update(Entry.attribute_map)

    def __init__(self, target_id=None, extension=None, target_type=None, *args, **kwargs):  # noqa: E501
        """Shortcut - a model defined in Swagger"""  # noqa: E501
        self._target_id = None
        self._extension = None
        self._target_type = None
        self.discriminator = None
        if target_id is not None:
            self.target_id = target_id
        if extension is not None:
            self.extension = extension
        if target_type is not None:
            self.target_type = target_type
        Entry.__init__(self, *args, **kwargs)

    @property
    def target_id(self):
        """Gets the target_id of this Shortcut.  # noqa: E501

        The entry ID of the shortcut target.  # noqa: E501

        :return: The target_id of this Shortcut.  # noqa: E501
        :rtype: int
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this Shortcut.

        The entry ID of the shortcut target.  # noqa: E501

        :param target_id: The target_id of this Shortcut.  # noqa: E501
        :type: int
        """

        self._target_id = target_id

    @property
    def extension(self):
        """Gets the extension of this Shortcut.  # noqa: E501

        The extension of the shortcut target.  # noqa: E501

        :return: The extension of this Shortcut.  # noqa: E501
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this Shortcut.

        The extension of the shortcut target.  # noqa: E501

        :param extension: The extension of this Shortcut.  # noqa: E501
        :type: str
        """

        self._extension = extension

    @property
    def target_type(self):
        """Gets the target_type of this Shortcut.  # noqa: E501

        The entry type of the shortcut target.  # noqa: E501

        :return: The target_type of this Shortcut.  # noqa: E501
        :rtype: object
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type):
        """Sets the target_type of this Shortcut.

        The entry type of the shortcut target.  # noqa: E501

        :param target_type: The target_type of this Shortcut.  # noqa: E501
        :type: object
        """

        self._target_type = target_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Shortcut, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Shortcut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
