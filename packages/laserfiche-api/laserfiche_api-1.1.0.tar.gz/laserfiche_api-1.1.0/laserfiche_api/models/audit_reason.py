# coding: utf-8

"""
    Laserfiche Repository API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p>Visit the changelog for the list of changes: <a href=\"/repository/v2/changelog\">/repository/v2/changelog</a></p><p><strong>Build# : </strong>41a7347c0662989661d7ab8105a70d36cb42518e_.20240124.4</p>  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuditReason(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'audit_event_type': 'OneOfAuditReasonAuditEventType'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'audit_event_type': 'auditEventType'
    }

    def __init__(self, id=None, name=None, audit_event_type=None):  # noqa: E501
        """AuditReason - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._audit_event_type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if audit_event_type is not None:
            self.audit_event_type = audit_event_type

    @property
    def id(self):
        """Gets the id of this AuditReason.  # noqa: E501

        The audit reason id.  # noqa: E501

        :return: The id of this AuditReason.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuditReason.

        The audit reason id.  # noqa: E501

        :param id: The id of this AuditReason.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AuditReason.  # noqa: E501

        The audit reason text.  # noqa: E501

        :return: The name of this AuditReason.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AuditReason.

        The audit reason text.  # noqa: E501

        :param name: The name of this AuditReason.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def audit_event_type(self):
        """Gets the audit_event_type of this AuditReason.  # noqa: E501

        The audit event type for this audit reason.  # noqa: E501

        :return: The audit_event_type of this AuditReason.  # noqa: E501
        :rtype: OneOfAuditReasonAuditEventType
        """
        return self._audit_event_type

    @audit_event_type.setter
    def audit_event_type(self, audit_event_type):
        """Sets the audit_event_type of this AuditReason.

        The audit event type for this audit reason.  # noqa: E501

        :param audit_event_type: The audit_event_type of this AuditReason.  # noqa: E501
        :type: OneOfAuditReasonAuditEventType
        """

        self._audit_event_type = audit_event_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditReason, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditReason):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
