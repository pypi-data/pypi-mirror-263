# coding: utf-8

"""
    Laserfiche Repository API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p>Visit the changelog for the list of changes: <a href=\"/repository/v2/changelog\">/repository/v2/changelog</a></p><p><strong>Build# : </strong>41a7347c0662989661d7ab8105a70d36cb42518e_.20240124.4</p>  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'entry_id': 'int',
        'uri': 'str'
    }

    attribute_map = {
        'entry_id': 'entryId',
        'uri': 'uri'
    }

    def __init__(self, entry_id=None, uri=None):  # noqa: E501
        """TaskResult - a model defined in Swagger"""  # noqa: E501
        self._entry_id = None
        self._uri = None
        self.discriminator = None
        if entry_id is not None:
            self.entry_id = entry_id
        if uri is not None:
            self.uri = uri

    @property
    def entry_id(self):
        """Gets the entry_id of this TaskResult.  # noqa: E501

        The ID of the entry which is affected (e.g. created or modified) by the execution of the associated task.  # noqa: E501

        :return: The entry_id of this TaskResult.  # noqa: E501
        :rtype: int
        """
        return self._entry_id

    @entry_id.setter
    def entry_id(self, entry_id):
        """Sets the entry_id of this TaskResult.

        The ID of the entry which is affected (e.g. created or modified) by the execution of the associated task.  # noqa: E501

        :param entry_id: The entry_id of this TaskResult.  # noqa: E501
        :type: int
        """

        self._entry_id = entry_id

    @property
    def uri(self):
        """Gets the uri of this TaskResult.  # noqa: E501

        The URI which can be used (via api call) to access the result(s) of the associated task.  # noqa: E501

        :return: The uri of this TaskResult.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this TaskResult.

        The URI which can be used (via api call) to access the result(s) of the associated task.  # noqa: E501

        :param uri: The uri of this TaskResult.  # noqa: E501
        :type: str
        """

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
