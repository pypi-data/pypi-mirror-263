# coding: utf-8

"""
    Laserfiche Repository API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p>Visit the changelog for the list of changes: <a href=\"/repository/v2/changelog\">/repository/v2/changelog</a></p><p><strong>Build# : </strong>41a7347c0662989661d7ab8105a70d36cb42518e_.20240124.4</p>  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CancelTaskResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'task_type': 'OneOfCancelTaskResultTaskType',
        'result': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'task_type': 'taskType',
        'result': 'result'
    }

    def __init__(self, id=None, task_type=None, result=None):  # noqa: E501
        """CancelTaskResult - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._task_type = None
        self._result = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if task_type is not None:
            self.task_type = task_type
        if result is not None:
            self.result = result

    @property
    def id(self):
        """Gets the id of this CancelTaskResult.  # noqa: E501

        The ID of the task which has been subject to cancellation.  # noqa: E501

        :return: The id of this CancelTaskResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CancelTaskResult.

        The ID of the task which has been subject to cancellation.  # noqa: E501

        :param id: The id of this CancelTaskResult.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def task_type(self):
        """Gets the task_type of this CancelTaskResult.  # noqa: E501

        The type of the task which has been subject to cancellation.  # noqa: E501

        :return: The task_type of this CancelTaskResult.  # noqa: E501
        :rtype: OneOfCancelTaskResultTaskType
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this CancelTaskResult.

        The type of the task which has been subject to cancellation.  # noqa: E501

        :param task_type: The task_type of this CancelTaskResult.  # noqa: E501
        :type: OneOfCancelTaskResultTaskType
        """

        self._task_type = task_type

    @property
    def result(self):
        """Gets the result of this CancelTaskResult.  # noqa: E501

        Indicates if the request to cancel the task has been received.  # noqa: E501

        :return: The result of this CancelTaskResult.  # noqa: E501
        :rtype: bool
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this CancelTaskResult.

        Indicates if the request to cancel the task has been received.  # noqa: E501

        :param result: The result of this CancelTaskResult.  # noqa: E501
        :type: bool
        """

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CancelTaskResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CancelTaskResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
