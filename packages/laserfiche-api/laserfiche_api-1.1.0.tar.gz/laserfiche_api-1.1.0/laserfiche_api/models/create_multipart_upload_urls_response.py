# coding: utf-8

"""
    Laserfiche Repository API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p>Visit the changelog for the list of changes: <a href=\"/repository/v2/changelog\">/repository/v2/changelog</a></p><p><strong>Build# : </strong>41a7347c0662989661d7ab8105a70d36cb42518e_.20240124.4</p>  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateMultipartUploadUrlsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'upload_id': 'str',
        'urls': 'list[str]'
    }

    attribute_map = {
        'upload_id': 'uploadId',
        'urls': 'urls'
    }

    def __init__(self, upload_id=None, urls=None):  # noqa: E501
        """CreateMultipartUploadUrlsResponse - a model defined in Swagger"""  # noqa: E501
        self._upload_id = None
        self._urls = None
        self.discriminator = None
        if upload_id is not None:
            self.upload_id = upload_id
        if urls is not None:
            self.urls = urls

    @property
    def upload_id(self):
        """Gets the upload_id of this CreateMultipartUploadUrlsResponse.  # noqa: E501

        A unique identifier for the whole upload process.  # noqa: E501

        :return: The upload_id of this CreateMultipartUploadUrlsResponse.  # noqa: E501
        :rtype: str
        """
        return self._upload_id

    @upload_id.setter
    def upload_id(self, upload_id):
        """Sets the upload_id of this CreateMultipartUploadUrlsResponse.

        A unique identifier for the whole upload process.  # noqa: E501

        :param upload_id: The upload_id of this CreateMultipartUploadUrlsResponse.  # noqa: E501
        :type: str
        """

        self._upload_id = upload_id

    @property
    def urls(self):
        """Gets the urls of this CreateMultipartUploadUrlsResponse.  # noqa: E501

        A list of URLs to which the file chunk should be written.  # noqa: E501

        :return: The urls of this CreateMultipartUploadUrlsResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this CreateMultipartUploadUrlsResponse.

        A list of URLs to which the file chunk should be written.  # noqa: E501

        :param urls: The urls of this CreateMultipartUploadUrlsResponse.  # noqa: E501
        :type: list[str]
        """

        self._urls = urls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateMultipartUploadUrlsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateMultipartUploadUrlsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
