# coding: utf-8

"""
    Laserfiche Repository API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p>Visit the changelog for the list of changes: <a href=\"/repository/v2/changelog\">/repository/v2/changelog</a></p><p><strong>Build# : </strong>41a7347c0662989661d7ab8105a70d36cb42518e_.20240124.4</p>  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SetTemplateRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'template_name': 'str',
        'fields': 'list[FieldToUpdate]'
    }

    attribute_map = {
        'template_name': 'templateName',
        'fields': 'fields'
    }

    def __init__(self, template_name=None, fields=None):  # noqa: E501
        """SetTemplateRequest - a model defined in Swagger"""  # noqa: E501
        self._template_name = None
        self._fields = None
        self.discriminator = None
        self.template_name = template_name
        if fields is not None:
            self.fields = fields

    @property
    def template_name(self):
        """Gets the template_name of this SetTemplateRequest.  # noqa: E501

        The template that will be assigned to the entry.  # noqa: E501

        :return: The template_name of this SetTemplateRequest.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this SetTemplateRequest.

        The template that will be assigned to the entry.  # noqa: E501

        :param template_name: The template_name of this SetTemplateRequest.  # noqa: E501
        :type: str
        """
        if template_name is None:
            raise ValueError("Invalid value for `template_name`, must not be `None`")  # noqa: E501

        self._template_name = template_name

    @property
    def fields(self):
        """Gets the fields of this SetTemplateRequest.  # noqa: E501

        The template fields that will be assigned to the entry.  # noqa: E501

        :return: The fields of this SetTemplateRequest.  # noqa: E501
        :rtype: list[FieldToUpdate]
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this SetTemplateRequest.

        The template fields that will be assigned to the entry.  # noqa: E501

        :param fields: The fields of this SetTemplateRequest.  # noqa: E501
        :type: list[FieldToUpdate]
        """

        self._fields = fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SetTemplateRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetTemplateRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
