# coding: utf-8

"""
    Laserfiche Repository API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p>Visit the changelog for the list of changes: <a href=\"/repository/v2/changelog\">/repository/v2/changelog</a></p><p><strong>Build# : </strong>41a7347c0662989661d7ab8105a70d36cb42518e_.20240124.4</p>  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Field(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'field_type': 'OneOfFieldFieldType',
        'id': 'int',
        'is_multi_value': 'bool',
        'is_required': 'bool',
        'has_more_values': 'bool',
        'group_id': 'int',
        'values': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'field_type': 'fieldType',
        'id': 'id',
        'is_multi_value': 'isMultiValue',
        'is_required': 'isRequired',
        'has_more_values': 'hasMoreValues',
        'group_id': 'groupId',
        'values': 'values'
    }

    def __init__(self, name=None, field_type=None, id=None, is_multi_value=None, is_required=None, has_more_values=None, group_id=None, values=None):  # noqa: E501
        """Field - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._field_type = None
        self._id = None
        self._is_multi_value = None
        self._is_required = None
        self._has_more_values = None
        self._group_id = None
        self._values = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if field_type is not None:
            self.field_type = field_type
        if id is not None:
            self.id = id
        if is_multi_value is not None:
            self.is_multi_value = is_multi_value
        if is_required is not None:
            self.is_required = is_required
        if has_more_values is not None:
            self.has_more_values = has_more_values
        if group_id is not None:
            self.group_id = group_id
        if values is not None:
            self.values = values

    @property
    def name(self):
        """Gets the name of this Field.  # noqa: E501

        The name of the field.  # noqa: E501

        :return: The name of this Field.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Field.

        The name of the field.  # noqa: E501

        :param name: The name of this Field.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def field_type(self):
        """Gets the field_type of this Field.  # noqa: E501

        The type of the field. The possible field types are listed below.  # noqa: E501

        :return: The field_type of this Field.  # noqa: E501
        :rtype: OneOfFieldFieldType
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this Field.

        The type of the field. The possible field types are listed below.  # noqa: E501

        :param field_type: The field_type of this Field.  # noqa: E501
        :type: OneOfFieldFieldType
        """

        self._field_type = field_type

    @property
    def id(self):
        """Gets the id of this Field.  # noqa: E501

        The ID of the field.  # noqa: E501

        :return: The id of this Field.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Field.

        The ID of the field.  # noqa: E501

        :param id: The id of this Field.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_multi_value(self):
        """Gets the is_multi_value of this Field.  # noqa: E501

        A boolean indicating if the represented field supports multiple values.  # noqa: E501

        :return: The is_multi_value of this Field.  # noqa: E501
        :rtype: bool
        """
        return self._is_multi_value

    @is_multi_value.setter
    def is_multi_value(self, is_multi_value):
        """Sets the is_multi_value of this Field.

        A boolean indicating if the represented field supports multiple values.  # noqa: E501

        :param is_multi_value: The is_multi_value of this Field.  # noqa: E501
        :type: bool
        """

        self._is_multi_value = is_multi_value

    @property
    def is_required(self):
        """Gets the is_required of this Field.  # noqa: E501

        A boolean indicating if the represented field must have a value set on entries assigned to a template that the field is a member of.  # noqa: E501

        :return: The is_required of this Field.  # noqa: E501
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this Field.

        A boolean indicating if the represented field must have a value set on entries assigned to a template that the field is a member of.  # noqa: E501

        :param is_required: The is_required of this Field.  # noqa: E501
        :type: bool
        """

        self._is_required = is_required

    @property
    def has_more_values(self):
        """Gets the has_more_values of this Field.  # noqa: E501

        A boolean indicating if there are more field values.  # noqa: E501

        :return: The has_more_values of this Field.  # noqa: E501
        :rtype: bool
        """
        return self._has_more_values

    @has_more_values.setter
    def has_more_values(self, has_more_values):
        """Sets the has_more_values of this Field.

        A boolean indicating if there are more field values.  # noqa: E501

        :param has_more_values: The has_more_values of this Field.  # noqa: E501
        :type: bool
        """

        self._has_more_values = has_more_values

    @property
    def group_id(self):
        """Gets the group_id of this Field.  # noqa: E501

        The group id of the multi value field group. If the field is not a part of a multi value field group, then there is no group id.  # noqa: E501

        :return: The group_id of this Field.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Field.

        The group id of the multi value field group. If the field is not a part of a multi value field group, then there is no group id.  # noqa: E501

        :param group_id: The group_id of this Field.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def values(self):
        """Gets the values of this Field.  # noqa: E501

        The values assigned to the field.  # noqa: E501

        :return: The values of this Field.  # noqa: E501
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Field.

        The values assigned to the field.  # noqa: E501

        :param values: The values of this Field.  # noqa: E501
        :type: list[str]
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Field, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Field):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
