# coding: utf-8

"""
    Laserfiche Repository API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p>Visit the changelog for the list of changes: <a href=\"/repository/v2/changelog\">/repository/v2/changelog</a></p><p><strong>Build# : </strong>41a7347c0662989661d7ab8105a70d36cb42518e_.20240124.4</p>  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateMultipartUploadUrlsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'upload_id': 'str',
        'starting_part_number': 'int',
        'number_of_parts': 'int',
        'file_name': 'str',
        'mime_type': 'str'
    }

    attribute_map = {
        'upload_id': 'uploadId',
        'starting_part_number': 'startingPartNumber',
        'number_of_parts': 'numberOfParts',
        'file_name': 'fileName',
        'mime_type': 'mimeType'
    }

    def __init__(self, upload_id='', starting_part_number=1, number_of_parts=None, file_name=None, mime_type=None):  # noqa: E501
        """CreateMultipartUploadUrlsRequest - a model defined in Swagger"""  # noqa: E501
        self._upload_id = None
        self._starting_part_number = None
        self._number_of_parts = None
        self._file_name = None
        self._mime_type = None
        self.discriminator = None
        if upload_id is not None:
            self.upload_id = upload_id
        if starting_part_number is not None:
            self.starting_part_number = starting_part_number
        self.number_of_parts = number_of_parts
        if file_name is not None:
            self.file_name = file_name
        if mime_type is not None:
            self.mime_type = mime_type

    @property
    def upload_id(self):
        """Gets the upload_id of this CreateMultipartUploadUrlsRequest.  # noqa: E501

        A unique identifier for the whole upload process.  # noqa: E501

        :return: The upload_id of this CreateMultipartUploadUrlsRequest.  # noqa: E501
        :rtype: str
        """
        return self._upload_id

    @upload_id.setter
    def upload_id(self, upload_id):
        """Sets the upload_id of this CreateMultipartUploadUrlsRequest.

        A unique identifier for the whole upload process.  # noqa: E501

        :param upload_id: The upload_id of this CreateMultipartUploadUrlsRequest.  # noqa: E501
        :type: str
        """

        self._upload_id = upload_id

    @property
    def starting_part_number(self):
        """Gets the starting_part_number of this CreateMultipartUploadUrlsRequest.  # noqa: E501

        Determines the starting position of the requested parts among all the parts associated with this upload. The default value is 1.  # noqa: E501

        :return: The starting_part_number of this CreateMultipartUploadUrlsRequest.  # noqa: E501
        :rtype: int
        """
        return self._starting_part_number

    @starting_part_number.setter
    def starting_part_number(self, starting_part_number):
        """Sets the starting_part_number of this CreateMultipartUploadUrlsRequest.

        Determines the starting position of the requested parts among all the parts associated with this upload. The default value is 1.  # noqa: E501

        :param starting_part_number: The starting_part_number of this CreateMultipartUploadUrlsRequest.  # noqa: E501
        :type: int
        """

        self._starting_part_number = starting_part_number

    @property
    def number_of_parts(self):
        """Gets the number_of_parts of this CreateMultipartUploadUrlsRequest.  # noqa: E501

        The value must be in the range [1, 100], meaning that in each call to the CreateMultipartUploadUrls api, a maximum of 100 Upload URLs can be requested. Further, each file chunk written to an Upload URL should be at least 5 MB. There is no minimum size limit for the last chunk.  # noqa: E501

        :return: The number_of_parts of this CreateMultipartUploadUrlsRequest.  # noqa: E501
        :rtype: int
        """
        return self._number_of_parts

    @number_of_parts.setter
    def number_of_parts(self, number_of_parts):
        """Sets the number_of_parts of this CreateMultipartUploadUrlsRequest.

        The value must be in the range [1, 100], meaning that in each call to the CreateMultipartUploadUrls api, a maximum of 100 Upload URLs can be requested. Further, each file chunk written to an Upload URL should be at least 5 MB. There is no minimum size limit for the last chunk.  # noqa: E501

        :param number_of_parts: The number_of_parts of this CreateMultipartUploadUrlsRequest.  # noqa: E501
        :type: int
        """
        if number_of_parts is None:
            raise ValueError("Invalid value for `number_of_parts`, must not be `None`")  # noqa: E501

        self._number_of_parts = number_of_parts

    @property
    def file_name(self):
        """Gets the file_name of this CreateMultipartUploadUrlsRequest.  # noqa: E501

        The name of the file to be uploaded. The file extension in the name will be used as the extension of the imported entry.  # noqa: E501

        :return: The file_name of this CreateMultipartUploadUrlsRequest.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this CreateMultipartUploadUrlsRequest.

        The name of the file to be uploaded. The file extension in the name will be used as the extension of the imported entry.  # noqa: E501

        :param file_name: The file_name of this CreateMultipartUploadUrlsRequest.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def mime_type(self):
        """Gets the mime_type of this CreateMultipartUploadUrlsRequest.  # noqa: E501

        The mime-type of the file to be uploaded.  # noqa: E501

        :return: The mime_type of this CreateMultipartUploadUrlsRequest.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this CreateMultipartUploadUrlsRequest.

        The mime-type of the file to be uploaded.  # noqa: E501

        :param mime_type: The mime_type of this CreateMultipartUploadUrlsRequest.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateMultipartUploadUrlsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateMultipartUploadUrlsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
