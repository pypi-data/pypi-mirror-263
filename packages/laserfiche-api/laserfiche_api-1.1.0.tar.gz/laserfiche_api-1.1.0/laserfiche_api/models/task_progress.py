# coding: utf-8

"""
    Laserfiche Repository API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p>Visit the changelog for the list of changes: <a href=\"/repository/v2/changelog\">/repository/v2/changelog</a></p><p><strong>Build# : </strong>41a7347c0662989661d7ab8105a70d36cb42518e_.20240124.4</p>  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskProgress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'task_type': 'OneOfTaskProgressTaskType',
        'percent_complete': 'int',
        'status': 'OneOfTaskProgressStatus',
        'errors': 'list[ProblemDetails]',
        'result': 'OneOfTaskProgressResult',
        'start_time': 'datetime',
        'last_update_time': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'task_type': 'taskType',
        'percent_complete': 'percentComplete',
        'status': 'status',
        'errors': 'errors',
        'result': 'result',
        'start_time': 'startTime',
        'last_update_time': 'lastUpdateTime'
    }

    def __init__(self, id=None, task_type=None, percent_complete=None, status=None, errors=None, result=None, start_time=None, last_update_time=None):  # noqa: E501
        """TaskProgress - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._task_type = None
        self._percent_complete = None
        self._status = None
        self._errors = None
        self._result = None
        self._start_time = None
        self._last_update_time = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if task_type is not None:
            self.task_type = task_type
        if percent_complete is not None:
            self.percent_complete = percent_complete
        if status is not None:
            self.status = status
        if errors is not None:
            self.errors = errors
        if result is not None:
            self.result = result
        if start_time is not None:
            self.start_time = start_time
        if last_update_time is not None:
            self.last_update_time = last_update_time

    @property
    def id(self):
        """Gets the id of this TaskProgress.  # noqa: E501

        The task ID of the task associated with this TaskProgress.  # noqa: E501

        :return: The id of this TaskProgress.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TaskProgress.

        The task ID of the task associated with this TaskProgress.  # noqa: E501

        :param id: The id of this TaskProgress.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def task_type(self):
        """Gets the task_type of this TaskProgress.  # noqa: E501

        The type of the task associated with this TaskProgress.  # noqa: E501

        :return: The task_type of this TaskProgress.  # noqa: E501
        :rtype: OneOfTaskProgressTaskType
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this TaskProgress.

        The type of the task associated with this TaskProgress.  # noqa: E501

        :param task_type: The task_type of this TaskProgress.  # noqa: E501
        :type: OneOfTaskProgressTaskType
        """

        self._task_type = task_type

    @property
    def percent_complete(self):
        """Gets the percent_complete of this TaskProgress.  # noqa: E501

        Determines what percentage of the execution of the associated task is completed.  # noqa: E501

        :return: The percent_complete of this TaskProgress.  # noqa: E501
        :rtype: int
        """
        return self._percent_complete

    @percent_complete.setter
    def percent_complete(self, percent_complete):
        """Sets the percent_complete of this TaskProgress.

        Determines what percentage of the execution of the associated task is completed.  # noqa: E501

        :param percent_complete: The percent_complete of this TaskProgress.  # noqa: E501
        :type: int
        """

        self._percent_complete = percent_complete

    @property
    def status(self):
        """Gets the status of this TaskProgress.  # noqa: E501

        The status of the task associated with this TaskProgress.  # noqa: E501

        :return: The status of this TaskProgress.  # noqa: E501
        :rtype: OneOfTaskProgressStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TaskProgress.

        The status of the task associated with this TaskProgress.  # noqa: E501

        :param status: The status of this TaskProgress.  # noqa: E501
        :type: OneOfTaskProgressStatus
        """

        self._status = status

    @property
    def errors(self):
        """Gets the errors of this TaskProgress.  # noqa: E501

        The list of errors occurred during the execution of the associated task.  # noqa: E501

        :return: The errors of this TaskProgress.  # noqa: E501
        :rtype: list[ProblemDetails]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this TaskProgress.

        The list of errors occurred during the execution of the associated task.  # noqa: E501

        :param errors: The errors of this TaskProgress.  # noqa: E501
        :type: list[ProblemDetails]
        """

        self._errors = errors

    @property
    def result(self):
        """Gets the result of this TaskProgress.  # noqa: E501

        The result of the execution of the associated task.  # noqa: E501

        :return: The result of this TaskProgress.  # noqa: E501
        :rtype: OneOfTaskProgressResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this TaskProgress.

        The result of the execution of the associated task.  # noqa: E501

        :param result: The result of this TaskProgress.  # noqa: E501
        :type: OneOfTaskProgressResult
        """

        self._result = result

    @property
    def start_time(self):
        """Gets the start_time of this TaskProgress.  # noqa: E501

        The time representing when the associated task's execution started.  # noqa: E501

        :return: The start_time of this TaskProgress.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TaskProgress.

        The time representing when the associated task's execution started.  # noqa: E501

        :param start_time: The start_time of this TaskProgress.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def last_update_time(self):
        """Gets the last_update_time of this TaskProgress.  # noqa: E501

        The time representing when the associated task's status last changed.  # noqa: E501

        :return: The last_update_time of this TaskProgress.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_time

    @last_update_time.setter
    def last_update_time(self, last_update_time):
        """Sets the last_update_time of this TaskProgress.

        The time representing when the associated task's status last changed.  # noqa: E501

        :param last_update_time: The last_update_time of this TaskProgress.  # noqa: E501
        :type: datetime
        """

        self._last_update_time = last_update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskProgress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskProgress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
