# coding: utf-8

"""
    Laserfiche Repository API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p>Visit the changelog for the list of changes: <a href=\"/repository/v2/changelog\">/repository/v2/changelog</a></p><p><strong>Build# : </strong>41a7347c0662989661d7ab8105a70d36cb42518e_.20240124.4</p>  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TagDefinitionWatermark(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'text': 'str',
        'page_span_percentage': 'int',
        'position': 'OneOfTagDefinitionWatermarkPosition',
        'rotation_angle': 'int',
        'is_mandatory': 'bool',
        'opacity': 'int'
    }

    attribute_map = {
        'text': 'text',
        'page_span_percentage': 'pageSpanPercentage',
        'position': 'position',
        'rotation_angle': 'rotationAngle',
        'is_mandatory': 'isMandatory',
        'opacity': 'opacity'
    }

    def __init__(self, text=None, page_span_percentage=None, position=None, rotation_angle=None, is_mandatory=None, opacity=None):  # noqa: E501
        """TagDefinitionWatermark - a model defined in Swagger"""  # noqa: E501
        self._text = None
        self._page_span_percentage = None
        self._position = None
        self._rotation_angle = None
        self._is_mandatory = None
        self._opacity = None
        self.discriminator = None
        if text is not None:
            self.text = text
        if page_span_percentage is not None:
            self.page_span_percentage = page_span_percentage
        if position is not None:
            self.position = position
        if rotation_angle is not None:
            self.rotation_angle = rotation_angle
        if is_mandatory is not None:
            self.is_mandatory = is_mandatory
        if opacity is not None:
            self.opacity = opacity

    @property
    def text(self):
        """Gets the text of this TagDefinitionWatermark.  # noqa: E501

        The watermark text associated with the tag defintion.  # noqa: E501

        :return: The text of this TagDefinitionWatermark.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TagDefinitionWatermark.

        The watermark text associated with the tag defintion.  # noqa: E501

        :param text: The text of this TagDefinitionWatermark.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def page_span_percentage(self):
        """Gets the page_span_percentage of this TagDefinitionWatermark.  # noqa: E501

        The percentage of the page that the watermark associated with the tag definition spans on.  # noqa: E501

        :return: The page_span_percentage of this TagDefinitionWatermark.  # noqa: E501
        :rtype: int
        """
        return self._page_span_percentage

    @page_span_percentage.setter
    def page_span_percentage(self, page_span_percentage):
        """Sets the page_span_percentage of this TagDefinitionWatermark.

        The percentage of the page that the watermark associated with the tag definition spans on.  # noqa: E501

        :param page_span_percentage: The page_span_percentage of this TagDefinitionWatermark.  # noqa: E501
        :type: int
        """

        self._page_span_percentage = page_span_percentage

    @property
    def position(self):
        """Gets the position of this TagDefinitionWatermark.  # noqa: E501

        The position of the watermark on the page.  # noqa: E501

        :return: The position of this TagDefinitionWatermark.  # noqa: E501
        :rtype: OneOfTagDefinitionWatermarkPosition
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this TagDefinitionWatermark.

        The position of the watermark on the page.  # noqa: E501

        :param position: The position of this TagDefinitionWatermark.  # noqa: E501
        :type: OneOfTagDefinitionWatermarkPosition
        """

        self._position = position

    @property
    def rotation_angle(self):
        """Gets the rotation_angle of this TagDefinitionWatermark.  # noqa: E501

        The rotation angle, in degrees, of the watermark associated with the tag definition.  # noqa: E501

        :return: The rotation_angle of this TagDefinitionWatermark.  # noqa: E501
        :rtype: int
        """
        return self._rotation_angle

    @rotation_angle.setter
    def rotation_angle(self, rotation_angle):
        """Sets the rotation_angle of this TagDefinitionWatermark.

        The rotation angle, in degrees, of the watermark associated with the tag definition.  # noqa: E501

        :param rotation_angle: The rotation_angle of this TagDefinitionWatermark.  # noqa: E501
        :type: int
        """

        self._rotation_angle = rotation_angle

    @property
    def is_mandatory(self):
        """Gets the is_mandatory of this TagDefinitionWatermark.  # noqa: E501

        A boolean indicating whether or not the watermark associated with the tag is mandatory.  # noqa: E501

        :return: The is_mandatory of this TagDefinitionWatermark.  # noqa: E501
        :rtype: bool
        """
        return self._is_mandatory

    @is_mandatory.setter
    def is_mandatory(self, is_mandatory):
        """Sets the is_mandatory of this TagDefinitionWatermark.

        A boolean indicating whether or not the watermark associated with the tag is mandatory.  # noqa: E501

        :param is_mandatory: The is_mandatory of this TagDefinitionWatermark.  # noqa: E501
        :type: bool
        """

        self._is_mandatory = is_mandatory

    @property
    def opacity(self):
        """Gets the opacity of this TagDefinitionWatermark.  # noqa: E501

        The opacity of the watermark associated with the tag definition. Valid value ranges from 0 to 100, with -1 as the default values.  # noqa: E501

        :return: The opacity of this TagDefinitionWatermark.  # noqa: E501
        :rtype: int
        """
        return self._opacity

    @opacity.setter
    def opacity(self, opacity):
        """Sets the opacity of this TagDefinitionWatermark.

        The opacity of the watermark associated with the tag definition. Valid value ranges from 0 to 100, with -1 as the default values.  # noqa: E501

        :param opacity: The opacity of this TagDefinitionWatermark.  # noqa: E501
        :type: int
        """

        self._opacity = opacity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TagDefinitionWatermark, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TagDefinitionWatermark):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
