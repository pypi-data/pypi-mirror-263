# coding: utf-8

"""
    Laserfiche Repository API

    Welcome to the Laserfiche API Swagger Playground. You can try out any of our API calls against your live Laserfiche Cloud account. Visit the developer center for more details: <a href=\"https://developer.laserfiche.com\">https://developer.laserfiche.com</a><p>Visit the changelog for the list of changes: <a href=\"/repository/v2/changelog\">/repository/v2/changelog</a></p><p><strong>Build# : </strong>41a7347c0662989661d7ab8105a70d36cb42518e_.20240124.4</p>  # noqa: E501

    OpenAPI spec version: 2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateEntryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parent_id': 'int',
        'name': 'str',
        'auto_rename': 'bool'
    }

    attribute_map = {
        'parent_id': 'parentId',
        'name': 'name',
        'auto_rename': 'autoRename'
    }

    def __init__(self, parent_id=None, name=None, auto_rename=False):  # noqa: E501
        """UpdateEntryRequest - a model defined in Swagger"""  # noqa: E501
        self._parent_id = None
        self._name = None
        self._auto_rename = None
        self.discriminator = None
        if parent_id is not None:
            self.parent_id = parent_id
        if name is not None:
            self.name = name
        if auto_rename is not None:
            self.auto_rename = auto_rename

    @property
    def parent_id(self):
        """Gets the parent_id of this UpdateEntryRequest.  # noqa: E501

        The ID of the parent entry that the entry will be moved to.  # noqa: E501

        :return: The parent_id of this UpdateEntryRequest.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this UpdateEntryRequest.

        The ID of the parent entry that the entry will be moved to.  # noqa: E501

        :param parent_id: The parent_id of this UpdateEntryRequest.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def name(self):
        """Gets the name of this UpdateEntryRequest.  # noqa: E501

        The name that will be assigned to the entry.  # noqa: E501

        :return: The name of this UpdateEntryRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateEntryRequest.

        The name that will be assigned to the entry.  # noqa: E501

        :param name: The name of this UpdateEntryRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def auto_rename(self):
        """Gets the auto_rename of this UpdateEntryRequest.  # noqa: E501

        Indicates if the entry should be automatically renamed if an entry already exists with the given name in the folder. The default value is false.  # noqa: E501

        :return: The auto_rename of this UpdateEntryRequest.  # noqa: E501
        :rtype: bool
        """
        return self._auto_rename

    @auto_rename.setter
    def auto_rename(self, auto_rename):
        """Sets the auto_rename of this UpdateEntryRequest.

        Indicates if the entry should be automatically renamed if an entry already exists with the given name in the folder. The default value is false.  # noqa: E501

        :param auto_rename: The auto_rename of this UpdateEntryRequest.  # noqa: E501
        :type: bool
        """

        self._auto_rename = auto_rename

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateEntryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateEntryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
