/*
国密SM2加密模块 V0.1
*/

const Sbox = [
    0xd6, 0x90, 0xe9, 0xfe, 0xcc, 0xe1, 0x3d, 0xb7, 0x16, 0xb6, 0x14, 0xc2, 0x28, 0xfb, 0x2c, 0x05,
    0x2b, 0x67, 0x9a, 0x76, 0x2a, 0xbe, 0x04, 0xc3, 0xaa, 0x44, 0x13, 0x26, 0x49, 0x86, 0x06, 0x99,
    0x9c, 0x42, 0x50, 0xf4, 0x91, 0xef, 0x98, 0x7a, 0x33, 0x54, 0x0b, 0x43, 0xed, 0xcf, 0xac, 0x62,
    0xe4, 0xb3, 0x1c, 0xa9, 0xc9, 0x08, 0xe8, 0x95, 0x80, 0xdf, 0x94, 0xfa, 0x75, 0x8f, 0x3f, 0xa6,
    0x47, 0x07, 0xa7, 0xfc, 0xf3, 0x73, 0x17, 0xba, 0x83, 0x59, 0x3c, 0x19, 0xe6, 0x85, 0x4f, 0xa8,
    0x68, 0x6b, 0x81, 0xb2, 0x71, 0x64, 0xda, 0x8b, 0xf8, 0xeb, 0x0f, 0x4b, 0x70, 0x56, 0x9d, 0x35,
    0x1e, 0x24, 0x0e, 0x5e, 0x63, 0x58, 0xd1, 0xa2, 0x25, 0x22, 0x7c, 0x3b, 0x01, 0x21, 0x78, 0x87,
    0xd4, 0x00, 0x46, 0x57, 0x9f, 0xd3, 0x27, 0x52, 0x4c, 0x36, 0x02, 0xe7, 0xa0, 0xc4, 0xc8, 0x9e,
    0xea, 0xbf, 0x8a, 0xd2, 0x40, 0xc7, 0x38, 0xb5, 0xa3, 0xf7, 0xf2, 0xce, 0xf9, 0x61, 0x15, 0xa1,
    0xe0, 0xae, 0x5d, 0xa4, 0x9b, 0x34, 0x1a, 0x55, 0xad, 0x93, 0x32, 0x30, 0xf5, 0x8c, 0xb1, 0xe3,
    0x1d, 0xf6, 0xe2, 0x2e, 0x82, 0x66, 0xca, 0x60, 0xc0, 0x29, 0x23, 0xab, 0x0d, 0x53, 0x4e, 0x6f,
    0xd5, 0xdb, 0x37, 0x45, 0xde, 0xfd, 0x8e, 0x2f, 0x03, 0xff, 0x6a, 0x72, 0x6d, 0x6c, 0x5b, 0x51,
    0x8d, 0x1b, 0xaf, 0x92, 0xbb, 0xdd, 0xbc, 0x7f, 0x11, 0xd9, 0x5c, 0x41, 0x1f, 0x10, 0x5a, 0xd8,
    0x0a, 0xc1, 0x31, 0x88, 0xa5, 0xcd, 0x7b, 0xbd, 0x2d, 0x74, 0xd0, 0x12, 0xb8, 0xe5, 0xb4, 0xb0,
    0x89, 0x69, 0x97, 0x4a, 0x0c, 0x96, 0x77, 0x7e, 0x65, 0xb9, 0xf1, 0x09, 0xc5, 0x6e, 0xc6, 0x84,
    0x18, 0xf0, 0x7d, 0xec, 0x3a, 0xdc, 0x4d, 0x20, 0x79, 0xee, 0x5f, 0x3e, 0xd7, 0xcb, 0x39, 0x48,
]
const CK = [
    0x00,0x07,0x0e,0x15, 0x1c,0x23,0x2a,0x31, 0x38,0x3f,0x46,0x4d, 0x54,0x5b,0x62,0x69,
    0x70,0x77,0x7e,0x85, 0x8c,0x93,0x9a,0xa1, 0xa8,0xaf,0xb6,0xbd, 0xc4,0xcb,0xd2,0xd9,
    0xe0,0xe7,0xee,0xf5, 0xfc,0x03,0x0a,0x11, 0x18,0x1f,0x26,0x2d, 0x34,0x3b,0x42,0x49,
    0x50,0x57,0x5e,0x65, 0x6c,0x73,0x7a,0x81, 0x88,0x8f,0x96,0x9d, 0xa4,0xab,0xb2,0xb9,
    0xc0,0xc7,0xce,0xd5, 0xdc,0xe3,0xea,0xf1, 0xf8,0xff,0x6,0xd,   0x14,0x1b,0x22,0x29,
    0x30,0x37,0x3e,0x45, 0x4c,0x53,0x5a,0x61, 0x68,0x6f,0x76,0x7d, 0x84,0x8b,0x92,0x99,
    0xa0,0xa7,0xae,0xb5, 0xbc,0xc3,0xca,0xd1, 0xd8,0xdf,0xe6,0xed, 0xf4,0xfb,0x2,0x9,
    0x10,0x17,0x1e,0x25, 0x2c,0x33,0x3a,0x41, 0x48,0x4f,0x56,0x5d, 0x64,0x6b,0x72,0x79]

const FK = [0xa3,0xb1,0xba,0xc6, 0x56,0xaa,0x33,0x50, 0x67,0x7d,0x91,0x97, 0xb2,0x70,0x22,0xdc]


function lshifts(B, n){
    /*
    <<<i 32位左移i位
    */
    let b = ""
    B.forEach(o => {
        b += o.toString(2).padStart(8, '0')
    });
    b = b.slice(n) + b.slice(0, n)
    let res = []
    for(let i=0;i<32;i+=8){
        res.push(Number(`0b${b.slice(i, i+8)}`))
    }
    return res
}

function t(A){
    let [a0, a1, a2, a3] = A
    return [Sbox[a0], Sbox[a1], Sbox[a2], Sbox[a3]]
}

function L(B){
    // 线性变换L
    return xor(B , lshifts(B, 2) , lshifts(B, 10) , lshifts(B, 18) , lshifts(B, 24))
}

function L1(B){
    // 线性变换L
    return xor(B , lshifts(B, 13) , lshifts(B, 23))
}

function T(A){
    return L(t(A))
}

function F(xi, xi1, xi2, xi3 , rki){
    return xor(xi , T(xor(xi1 , xi2 , xi3 , rki)))
}

function xor(arr1, arr2){
    let res = []
    for(let i=0;i<arr1.length;i++){
        let x = 0
        for(let k in arguments){
            x ^= arguments[k][i]
        }
        res.push(x)
    }
    return res
}
function word(arr1, i){
    return arr1.slice(i, i+4)
}

class SM4{
    constructor(key){
        /*
        key: [0x01, 0x23, 0x45, 0x67,
              0x89, 0xab, 0xcd, 0xef,
              0xfe, 0xdc, 0xba, 0x98,
              0x76, 0x54, 0x32, 0x10]
        */
        let MK = key.slice()
        
        // rki = K[i+4*4]
        let K = xor(MK, FK)
        for(let j=0;j<32;j++){
            // rk: round key 论密钥
            let i = j*4
            //let rk = this.K[i] ^ L1(t(U(this.K[i+1] ^ this.K[i+2] ^ this.K[i+3] ^ CK[i])))
            let rk = xor(word(K, i), L1(t(xor(word(K, i+4) ,word(K,i+8) , word(K, i+12) , word(CK, i)))))
            K = K.concat(rk)
        }
        this.K = K
    }
    
    block(data, mod=1){
        /*
        mod = 1 | 0 (加密 | 解密)
        */
        let X = data.slice()
        for(let j=0;j<32;j++){
            let i = j*4
            let x = F(word(X,i), word(X,i+4), word(X, i+8), word(X, i+12), word(this.K, mod?i+16:140-i))
            X = X.concat(x)
        }
        let res = []
        res = res.concat(X.slice(-4))
        res = res.concat(X.slice(-8, -4))
        res = res.concat(X.slice(-12, -8))
        res = res.concat(X.slice(-16, -12))
        return res
    }

    encrypt(msg){
        let res = []
        let l = 16 - msg.length % 16
        for(let i=0;i<l; i++){
            msg.push(l)
        }

        for(let i=0;i<msg.length;i+=16){
            res = res.concat(this.block(msg.slice(i, i+16)))
        }
        return res
    }
    
    decrypt(msg){
        let res = []
        for(let i=0;i<msg.length;i+=16){
            res = res.concat(this.block(msg.slice(i, i+16), 0))
        }
        res.length = res.length - res[res.length-1]
        return res
    }
}

export {SM4}