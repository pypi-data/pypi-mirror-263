# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic.   # noqa: E501

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iparapheur_internal import schemas  # noqa: F401


class GdprProperties(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def declaringEntity() -> typing.Type['GdprDeclaringEntity']:
                return GdprDeclaringEntity
            hostingEntityComments = schemas.StrSchema
        
            @staticmethod
            def hostingEntity() -> typing.Type['GdprEntity']:
                return GdprEntity
        
            @staticmethod
            def maintenanceEntity() -> typing.Type['GdprEntity']:
                return GdprEntity
        
            @staticmethod
            def application() -> typing.Type['GdprApplication']:
                return GdprApplication
            __annotations__ = {
                "declaringEntity": declaringEntity,
                "hostingEntityComments": hostingEntityComments,
                "hostingEntity": hostingEntity,
                "maintenanceEntity": maintenanceEntity,
                "application": application,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["declaringEntity"]) -> 'GdprDeclaringEntity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostingEntityComments"]) -> MetaOapg.properties.hostingEntityComments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostingEntity"]) -> 'GdprEntity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maintenanceEntity"]) -> 'GdprEntity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["application"]) -> 'GdprApplication': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["declaringEntity", "hostingEntityComments", "hostingEntity", "maintenanceEntity", "application", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["declaringEntity"]) -> typing.Union['GdprDeclaringEntity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostingEntityComments"]) -> typing.Union[MetaOapg.properties.hostingEntityComments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostingEntity"]) -> typing.Union['GdprEntity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maintenanceEntity"]) -> typing.Union['GdprEntity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["application"]) -> typing.Union['GdprApplication', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["declaringEntity", "hostingEntityComments", "hostingEntity", "maintenanceEntity", "application", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        declaringEntity: typing.Union['GdprDeclaringEntity', schemas.Unset] = schemas.unset,
        hostingEntityComments: typing.Union[MetaOapg.properties.hostingEntityComments, str, schemas.Unset] = schemas.unset,
        hostingEntity: typing.Union['GdprEntity', schemas.Unset] = schemas.unset,
        maintenanceEntity: typing.Union['GdprEntity', schemas.Unset] = schemas.unset,
        application: typing.Union['GdprApplication', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GdprProperties':
        return super().__new__(
            cls,
            *_args,
            declaringEntity=declaringEntity,
            hostingEntityComments=hostingEntityComments,
            hostingEntity=hostingEntity,
            maintenanceEntity=maintenanceEntity,
            application=application,
            _configuration=_configuration,
            **kwargs,
        )

from iparapheur_internal.model.gdpr_application import GdprApplication
from iparapheur_internal.model.gdpr_declaring_entity import GdprDeclaringEntity
from iparapheur_internal.model.gdpr_entity import GdprEntity
