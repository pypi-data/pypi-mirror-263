# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic.   # noqa: E501

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iparapheur_internal import schemas  # noqa: F401


class FolderListableDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 2
                    regex=[{
                        'pattern': r'^[^\r\nÂ ]*$',  # noqa: E501
                    }]
            id = schemas.StrSchema
            
            
            class dueDate(
                schemas.DateTimeBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    format = 'date-time'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, datetime, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'dueDate':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class metadata(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'metadata':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            draftCreationDate = schemas.DateTimeSchema
        
            @staticmethod
            def type() -> typing.Type['TypeDto']:
                return TypeDto
        
            @staticmethod
            def subtype() -> typing.Type['SubtypeDto']:
                return SubtypeDto
        
            @staticmethod
            def originDesk() -> typing.Type['DeskRepresentation']:
                return DeskRepresentation
        
            @staticmethod
            def finalDesk() -> typing.Type['DeskRepresentation']:
                return DeskRepresentation
            isReadByCurrentUser = schemas.BoolSchema
            legacyId = schemas.StrSchema
            readByCurrentUser = schemas.BoolSchema
            __annotations__ = {
                "name": name,
                "id": id,
                "dueDate": dueDate,
                "metadata": metadata,
                "draftCreationDate": draftCreationDate,
                "type": type,
                "subtype": subtype,
                "originDesk": originDesk,
                "finalDesk": finalDesk,
                "isReadByCurrentUser": isReadByCurrentUser,
                "legacyId": legacyId,
                "readByCurrentUser": readByCurrentUser,
            }
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dueDate"]) -> MetaOapg.properties.dueDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["draftCreationDate"]) -> MetaOapg.properties.draftCreationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'TypeDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtype"]) -> 'SubtypeDto': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["originDesk"]) -> 'DeskRepresentation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finalDesk"]) -> 'DeskRepresentation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isReadByCurrentUser"]) -> MetaOapg.properties.isReadByCurrentUser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legacyId"]) -> MetaOapg.properties.legacyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readByCurrentUser"]) -> MetaOapg.properties.readByCurrentUser: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "id", "dueDate", "metadata", "draftCreationDate", "type", "subtype", "originDesk", "finalDesk", "isReadByCurrentUser", "legacyId", "readByCurrentUser", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dueDate"]) -> typing.Union[MetaOapg.properties.dueDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["draftCreationDate"]) -> typing.Union[MetaOapg.properties.draftCreationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['TypeDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtype"]) -> typing.Union['SubtypeDto', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["originDesk"]) -> typing.Union['DeskRepresentation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finalDesk"]) -> typing.Union['DeskRepresentation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isReadByCurrentUser"]) -> typing.Union[MetaOapg.properties.isReadByCurrentUser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legacyId"]) -> typing.Union[MetaOapg.properties.legacyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readByCurrentUser"]) -> typing.Union[MetaOapg.properties.readByCurrentUser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "id", "dueDate", "metadata", "draftCreationDate", "type", "subtype", "originDesk", "finalDesk", "isReadByCurrentUser", "legacyId", "readByCurrentUser", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        dueDate: typing.Union[MetaOapg.properties.dueDate, None, str, datetime, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        draftCreationDate: typing.Union[MetaOapg.properties.draftCreationDate, str, datetime, schemas.Unset] = schemas.unset,
        type: typing.Union['TypeDto', schemas.Unset] = schemas.unset,
        subtype: typing.Union['SubtypeDto', schemas.Unset] = schemas.unset,
        originDesk: typing.Union['DeskRepresentation', schemas.Unset] = schemas.unset,
        finalDesk: typing.Union['DeskRepresentation', schemas.Unset] = schemas.unset,
        isReadByCurrentUser: typing.Union[MetaOapg.properties.isReadByCurrentUser, bool, schemas.Unset] = schemas.unset,
        legacyId: typing.Union[MetaOapg.properties.legacyId, str, schemas.Unset] = schemas.unset,
        readByCurrentUser: typing.Union[MetaOapg.properties.readByCurrentUser, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FolderListableDto':
        return super().__new__(
            cls,
            *_args,
            name=name,
            id=id,
            dueDate=dueDate,
            metadata=metadata,
            draftCreationDate=draftCreationDate,
            type=type,
            subtype=subtype,
            originDesk=originDesk,
            finalDesk=finalDesk,
            isReadByCurrentUser=isReadByCurrentUser,
            legacyId=legacyId,
            readByCurrentUser=readByCurrentUser,
            _configuration=_configuration,
            **kwargs,
        )

from iparapheur_internal.model.desk_representation import DeskRepresentation
from iparapheur_internal.model.subtype_dto import SubtypeDto
from iparapheur_internal.model.type_dto import TypeDto
