# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic.   # noqa: E501

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iparapheur_internal import schemas  # noqa: F401


class SignaturePlacement(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            page = schemas.Int32Schema
            width = schemas.Int32Schema
            height = schemas.Int32Schema
            x = schemas.Int32Schema
            y = schemas.Int32Schema
            pageRotation = schemas.Int32Schema
            pageWidth = schemas.Int32Schema
            pageHeight = schemas.Int32Schema
            
            
            class rectangleOrigin(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "BOTTOM_LEFT": "BOTTOM_LEFT",
                        "TOP_LEFT": "TOP_LEFT",
                        "BOTTOM_RIGHT": "BOTTOM_RIGHT",
                        "TOP_RIGHT": "TOP_RIGHT",
                        "CENTER": "CENTER",
                    }
                
                @schemas.classproperty
                def BOTTOM_LEFT(cls):
                    return cls("BOTTOM_LEFT")
                
                @schemas.classproperty
                def TOP_LEFT(cls):
                    return cls("TOP_LEFT")
                
                @schemas.classproperty
                def BOTTOM_RIGHT(cls):
                    return cls("BOTTOM_RIGHT")
                
                @schemas.classproperty
                def TOP_RIGHT(cls):
                    return cls("TOP_RIGHT")
                
                @schemas.classproperty
                def CENTER(cls):
                    return cls("CENTER")
            signatureNumber = schemas.Int32Schema
        
            @staticmethod
            def templateType() -> typing.Type['TemplateType']:
                return TemplateType
            __annotations__ = {
                "id": id,
                "page": page,
                "width": width,
                "height": height,
                "x": x,
                "y": y,
                "pageRotation": pageRotation,
                "pageWidth": pageWidth,
                "pageHeight": pageHeight,
                "rectangleOrigin": rectangleOrigin,
                "signatureNumber": signatureNumber,
                "templateType": templateType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["page"]) -> MetaOapg.properties.page: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["width"]) -> MetaOapg.properties.width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["height"]) -> MetaOapg.properties.height: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pageRotation"]) -> MetaOapg.properties.pageRotation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pageWidth"]) -> MetaOapg.properties.pageWidth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pageHeight"]) -> MetaOapg.properties.pageHeight: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rectangleOrigin"]) -> MetaOapg.properties.rectangleOrigin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signatureNumber"]) -> MetaOapg.properties.signatureNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["templateType"]) -> 'TemplateType': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "page", "width", "height", "x", "y", "pageRotation", "pageWidth", "pageHeight", "rectangleOrigin", "signatureNumber", "templateType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["page"]) -> typing.Union[MetaOapg.properties.page, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["width"]) -> typing.Union[MetaOapg.properties.width, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["height"]) -> typing.Union[MetaOapg.properties.height, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x"]) -> typing.Union[MetaOapg.properties.x, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["y"]) -> typing.Union[MetaOapg.properties.y, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pageRotation"]) -> typing.Union[MetaOapg.properties.pageRotation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pageWidth"]) -> typing.Union[MetaOapg.properties.pageWidth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pageHeight"]) -> typing.Union[MetaOapg.properties.pageHeight, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rectangleOrigin"]) -> typing.Union[MetaOapg.properties.rectangleOrigin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signatureNumber"]) -> typing.Union[MetaOapg.properties.signatureNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["templateType"]) -> typing.Union['TemplateType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "page", "width", "height", "x", "y", "pageRotation", "pageWidth", "pageHeight", "rectangleOrigin", "signatureNumber", "templateType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        page: typing.Union[MetaOapg.properties.page, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        width: typing.Union[MetaOapg.properties.width, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        height: typing.Union[MetaOapg.properties.height, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        x: typing.Union[MetaOapg.properties.x, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        y: typing.Union[MetaOapg.properties.y, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pageRotation: typing.Union[MetaOapg.properties.pageRotation, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pageWidth: typing.Union[MetaOapg.properties.pageWidth, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pageHeight: typing.Union[MetaOapg.properties.pageHeight, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rectangleOrigin: typing.Union[MetaOapg.properties.rectangleOrigin, str, schemas.Unset] = schemas.unset,
        signatureNumber: typing.Union[MetaOapg.properties.signatureNumber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        templateType: typing.Union['TemplateType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SignaturePlacement':
        return super().__new__(
            cls,
            *_args,
            id=id,
            page=page,
            width=width,
            height=height,
            x=x,
            y=y,
            pageRotation=pageRotation,
            pageWidth=pageWidth,
            pageHeight=pageHeight,
            rectangleOrigin=rectangleOrigin,
            signatureNumber=signatureNumber,
            templateType=templateType,
            _configuration=_configuration,
            **kwargs,
        )

from iparapheur_internal.model.template_type import TemplateType
