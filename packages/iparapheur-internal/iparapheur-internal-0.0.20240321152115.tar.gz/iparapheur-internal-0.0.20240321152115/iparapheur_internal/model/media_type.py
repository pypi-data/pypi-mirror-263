# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic.   # noqa: E501

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iparapheur_internal import schemas  # noqa: F401


class MediaType(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            type = schemas.StrSchema
            subtype = schemas.StrSchema
            
            
            class parameters(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'parameters':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            qualityValue = schemas.Float64Schema
            wildcardType = schemas.BoolSchema
            wildcardSubtype = schemas.BoolSchema
            subtypeSuffix = schemas.StrSchema
            concrete = schemas.BoolSchema
            charset = schemas.StrSchema
            __annotations__ = {
                "type": type,
                "subtype": subtype,
                "parameters": parameters,
                "qualityValue": qualityValue,
                "wildcardType": wildcardType,
                "wildcardSubtype": wildcardSubtype,
                "subtypeSuffix": subtypeSuffix,
                "concrete": concrete,
                "charset": charset,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtype"]) -> MetaOapg.properties.subtype: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parameters"]) -> MetaOapg.properties.parameters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualityValue"]) -> MetaOapg.properties.qualityValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wildcardType"]) -> MetaOapg.properties.wildcardType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wildcardSubtype"]) -> MetaOapg.properties.wildcardSubtype: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtypeSuffix"]) -> MetaOapg.properties.subtypeSuffix: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["concrete"]) -> MetaOapg.properties.concrete: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["charset"]) -> MetaOapg.properties.charset: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "subtype", "parameters", "qualityValue", "wildcardType", "wildcardSubtype", "subtypeSuffix", "concrete", "charset", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtype"]) -> typing.Union[MetaOapg.properties.subtype, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parameters"]) -> typing.Union[MetaOapg.properties.parameters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualityValue"]) -> typing.Union[MetaOapg.properties.qualityValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wildcardType"]) -> typing.Union[MetaOapg.properties.wildcardType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wildcardSubtype"]) -> typing.Union[MetaOapg.properties.wildcardSubtype, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtypeSuffix"]) -> typing.Union[MetaOapg.properties.subtypeSuffix, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["concrete"]) -> typing.Union[MetaOapg.properties.concrete, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["charset"]) -> typing.Union[MetaOapg.properties.charset, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "subtype", "parameters", "qualityValue", "wildcardType", "wildcardSubtype", "subtypeSuffix", "concrete", "charset", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        subtype: typing.Union[MetaOapg.properties.subtype, str, schemas.Unset] = schemas.unset,
        parameters: typing.Union[MetaOapg.properties.parameters, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        qualityValue: typing.Union[MetaOapg.properties.qualityValue, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        wildcardType: typing.Union[MetaOapg.properties.wildcardType, bool, schemas.Unset] = schemas.unset,
        wildcardSubtype: typing.Union[MetaOapg.properties.wildcardSubtype, bool, schemas.Unset] = schemas.unset,
        subtypeSuffix: typing.Union[MetaOapg.properties.subtypeSuffix, str, schemas.Unset] = schemas.unset,
        concrete: typing.Union[MetaOapg.properties.concrete, bool, schemas.Unset] = schemas.unset,
        charset: typing.Union[MetaOapg.properties.charset, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MediaType':
        return super().__new__(
            cls,
            *_args,
            type=type,
            subtype=subtype,
            parameters=parameters,
            qualityValue=qualityValue,
            wildcardType=wildcardType,
            wildcardSubtype=wildcardSubtype,
            subtypeSuffix=subtypeSuffix,
            concrete=concrete,
            charset=charset,
            _configuration=_configuration,
            **kwargs,
        )
