# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic.   # noqa: E501

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iparapheur_internal import schemas  # noqa: F401


class StampDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            page = schemas.Int32Schema
            x = schemas.Int32Schema
            y = schemas.Int32Schema
            signatureRank = schemas.Int32Schema
            afterSignature = schemas.BoolSchema
        
            @staticmethod
            def type() -> typing.Type['StampType']:
                return StampType
            value = schemas.StrSchema
            fontSize = schemas.Int32Schema
        
            @staticmethod
            def textColor() -> typing.Type['StampTextColor']:
                return StampTextColor
            __annotations__ = {
                "id": id,
                "page": page,
                "x": x,
                "y": y,
                "signatureRank": signatureRank,
                "afterSignature": afterSignature,
                "type": type,
                "value": value,
                "fontSize": fontSize,
                "textColor": textColor,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["page"]) -> MetaOapg.properties.page: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x"]) -> MetaOapg.properties.x: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["y"]) -> MetaOapg.properties.y: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signatureRank"]) -> MetaOapg.properties.signatureRank: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["afterSignature"]) -> MetaOapg.properties.afterSignature: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'StampType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fontSize"]) -> MetaOapg.properties.fontSize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["textColor"]) -> 'StampTextColor': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "page", "x", "y", "signatureRank", "afterSignature", "type", "value", "fontSize", "textColor", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["page"]) -> typing.Union[MetaOapg.properties.page, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x"]) -> typing.Union[MetaOapg.properties.x, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["y"]) -> typing.Union[MetaOapg.properties.y, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signatureRank"]) -> typing.Union[MetaOapg.properties.signatureRank, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["afterSignature"]) -> typing.Union[MetaOapg.properties.afterSignature, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['StampType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fontSize"]) -> typing.Union[MetaOapg.properties.fontSize, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["textColor"]) -> typing.Union['StampTextColor', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "page", "x", "y", "signatureRank", "afterSignature", "type", "value", "fontSize", "textColor", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        page: typing.Union[MetaOapg.properties.page, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        x: typing.Union[MetaOapg.properties.x, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        y: typing.Union[MetaOapg.properties.y, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        signatureRank: typing.Union[MetaOapg.properties.signatureRank, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        afterSignature: typing.Union[MetaOapg.properties.afterSignature, bool, schemas.Unset] = schemas.unset,
        type: typing.Union['StampType', schemas.Unset] = schemas.unset,
        value: typing.Union[MetaOapg.properties.value, str, schemas.Unset] = schemas.unset,
        fontSize: typing.Union[MetaOapg.properties.fontSize, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        textColor: typing.Union['StampTextColor', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StampDto':
        return super().__new__(
            cls,
            *_args,
            id=id,
            page=page,
            x=x,
            y=y,
            signatureRank=signatureRank,
            afterSignature=afterSignature,
            type=type,
            value=value,
            fontSize=fontSize,
            textColor=textColor,
            _configuration=_configuration,
            **kwargs,
        )

from iparapheur_internal.model.stamp_text_color import StampTextColor
from iparapheur_internal.model.stamp_type import StampType
