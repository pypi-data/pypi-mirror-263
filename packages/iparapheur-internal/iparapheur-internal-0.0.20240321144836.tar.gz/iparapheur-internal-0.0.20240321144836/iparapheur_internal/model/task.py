# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic.   # noqa: E501

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iparapheur_internal import schemas  # noqa: F401


class Task(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            
            
            class metadata(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'metadata':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def action() -> typing.Type['Action']:
                return Action
        
            @staticmethod
            def performedAction() -> typing.Type['Action']:
                return Action
        
            @staticmethod
            def externalState() -> typing.Type['ExternalState']:
                return ExternalState
        
            @staticmethod
            def state() -> typing.Type['State']:
                return State
            
            
            class desks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeskRepresentation']:
                        return DeskRepresentation
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeskRepresentation'], typing.List['DeskRepresentation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'desks':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeskRepresentation':
                    return super().__getitem__(i)
        
            @staticmethod
            def delegatedByDesk() -> typing.Type['DeskRepresentation']:
                return DeskRepresentation
        
            @staticmethod
            def user() -> typing.Type['UserRepresentation']:
                return UserRepresentation
            
            
            class readByUserIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    unique_items = True
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'readByUserIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            publicCertificateBase64 = schemas.StrSchema
            externalSignatureProcedureId = schemas.StrSchema
            beginDate = schemas.DateTimeSchema
            date = schemas.DateTimeSchema
            draftCreationDate = schemas.DateTimeSchema
            publicAnnotation = schemas.StrSchema
            privateAnnotation = schemas.StrSchema
            
            
            class notifiedDesks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeskRepresentation']:
                        return DeskRepresentation
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeskRepresentation'], typing.List['DeskRepresentation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'notifiedDesks':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeskRepresentation':
                    return super().__getitem__(i)
            workflowIndex = schemas.Int64Schema
            stepIndex = schemas.Int64Schema
            
            
            class mandatoryValidationMetadata(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mandatoryValidationMetadata':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class mandatoryRejectionMetadata(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mandatoryRejectionMetadata':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            instanceName = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "metadata": metadata,
                "action": action,
                "performedAction": performedAction,
                "externalState": externalState,
                "state": state,
                "desks": desks,
                "delegatedByDesk": delegatedByDesk,
                "user": user,
                "readByUserIds": readByUserIds,
                "publicCertificateBase64": publicCertificateBase64,
                "externalSignatureProcedureId": externalSignatureProcedureId,
                "beginDate": beginDate,
                "date": date,
                "draftCreationDate": draftCreationDate,
                "publicAnnotation": publicAnnotation,
                "privateAnnotation": privateAnnotation,
                "notifiedDesks": notifiedDesks,
                "workflowIndex": workflowIndex,
                "stepIndex": stepIndex,
                "mandatoryValidationMetadata": mandatoryValidationMetadata,
                "mandatoryRejectionMetadata": mandatoryRejectionMetadata,
                "instanceName": instanceName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["action"]) -> 'Action': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["performedAction"]) -> 'Action': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalState"]) -> 'ExternalState': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> 'State': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["desks"]) -> MetaOapg.properties.desks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delegatedByDesk"]) -> 'DeskRepresentation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'UserRepresentation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readByUserIds"]) -> MetaOapg.properties.readByUserIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publicCertificateBase64"]) -> MetaOapg.properties.publicCertificateBase64: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalSignatureProcedureId"]) -> MetaOapg.properties.externalSignatureProcedureId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beginDate"]) -> MetaOapg.properties.beginDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date"]) -> MetaOapg.properties.date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["draftCreationDate"]) -> MetaOapg.properties.draftCreationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publicAnnotation"]) -> MetaOapg.properties.publicAnnotation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privateAnnotation"]) -> MetaOapg.properties.privateAnnotation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notifiedDesks"]) -> MetaOapg.properties.notifiedDesks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowIndex"]) -> MetaOapg.properties.workflowIndex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stepIndex"]) -> MetaOapg.properties.stepIndex: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mandatoryValidationMetadata"]) -> MetaOapg.properties.mandatoryValidationMetadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mandatoryRejectionMetadata"]) -> MetaOapg.properties.mandatoryRejectionMetadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instanceName"]) -> MetaOapg.properties.instanceName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "metadata", "action", "performedAction", "externalState", "state", "desks", "delegatedByDesk", "user", "readByUserIds", "publicCertificateBase64", "externalSignatureProcedureId", "beginDate", "date", "draftCreationDate", "publicAnnotation", "privateAnnotation", "notifiedDesks", "workflowIndex", "stepIndex", "mandatoryValidationMetadata", "mandatoryRejectionMetadata", "instanceName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["action"]) -> typing.Union['Action', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["performedAction"]) -> typing.Union['Action', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalState"]) -> typing.Union['ExternalState', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union['State', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["desks"]) -> typing.Union[MetaOapg.properties.desks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delegatedByDesk"]) -> typing.Union['DeskRepresentation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['UserRepresentation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readByUserIds"]) -> typing.Union[MetaOapg.properties.readByUserIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publicCertificateBase64"]) -> typing.Union[MetaOapg.properties.publicCertificateBase64, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalSignatureProcedureId"]) -> typing.Union[MetaOapg.properties.externalSignatureProcedureId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beginDate"]) -> typing.Union[MetaOapg.properties.beginDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date"]) -> typing.Union[MetaOapg.properties.date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["draftCreationDate"]) -> typing.Union[MetaOapg.properties.draftCreationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publicAnnotation"]) -> typing.Union[MetaOapg.properties.publicAnnotation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privateAnnotation"]) -> typing.Union[MetaOapg.properties.privateAnnotation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notifiedDesks"]) -> typing.Union[MetaOapg.properties.notifiedDesks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowIndex"]) -> typing.Union[MetaOapg.properties.workflowIndex, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stepIndex"]) -> typing.Union[MetaOapg.properties.stepIndex, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mandatoryValidationMetadata"]) -> typing.Union[MetaOapg.properties.mandatoryValidationMetadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mandatoryRejectionMetadata"]) -> typing.Union[MetaOapg.properties.mandatoryRejectionMetadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instanceName"]) -> typing.Union[MetaOapg.properties.instanceName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "metadata", "action", "performedAction", "externalState", "state", "desks", "delegatedByDesk", "user", "readByUserIds", "publicCertificateBase64", "externalSignatureProcedureId", "beginDate", "date", "draftCreationDate", "publicAnnotation", "privateAnnotation", "notifiedDesks", "workflowIndex", "stepIndex", "mandatoryValidationMetadata", "mandatoryRejectionMetadata", "instanceName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        action: typing.Union['Action', schemas.Unset] = schemas.unset,
        performedAction: typing.Union['Action', schemas.Unset] = schemas.unset,
        externalState: typing.Union['ExternalState', schemas.Unset] = schemas.unset,
        state: typing.Union['State', schemas.Unset] = schemas.unset,
        desks: typing.Union[MetaOapg.properties.desks, list, tuple, schemas.Unset] = schemas.unset,
        delegatedByDesk: typing.Union['DeskRepresentation', schemas.Unset] = schemas.unset,
        user: typing.Union['UserRepresentation', schemas.Unset] = schemas.unset,
        readByUserIds: typing.Union[MetaOapg.properties.readByUserIds, list, tuple, schemas.Unset] = schemas.unset,
        publicCertificateBase64: typing.Union[MetaOapg.properties.publicCertificateBase64, str, schemas.Unset] = schemas.unset,
        externalSignatureProcedureId: typing.Union[MetaOapg.properties.externalSignatureProcedureId, str, schemas.Unset] = schemas.unset,
        beginDate: typing.Union[MetaOapg.properties.beginDate, str, datetime, schemas.Unset] = schemas.unset,
        date: typing.Union[MetaOapg.properties.date, str, datetime, schemas.Unset] = schemas.unset,
        draftCreationDate: typing.Union[MetaOapg.properties.draftCreationDate, str, datetime, schemas.Unset] = schemas.unset,
        publicAnnotation: typing.Union[MetaOapg.properties.publicAnnotation, str, schemas.Unset] = schemas.unset,
        privateAnnotation: typing.Union[MetaOapg.properties.privateAnnotation, str, schemas.Unset] = schemas.unset,
        notifiedDesks: typing.Union[MetaOapg.properties.notifiedDesks, list, tuple, schemas.Unset] = schemas.unset,
        workflowIndex: typing.Union[MetaOapg.properties.workflowIndex, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        stepIndex: typing.Union[MetaOapg.properties.stepIndex, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        mandatoryValidationMetadata: typing.Union[MetaOapg.properties.mandatoryValidationMetadata, list, tuple, schemas.Unset] = schemas.unset,
        mandatoryRejectionMetadata: typing.Union[MetaOapg.properties.mandatoryRejectionMetadata, list, tuple, schemas.Unset] = schemas.unset,
        instanceName: typing.Union[MetaOapg.properties.instanceName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Task':
        return super().__new__(
            cls,
            *_args,
            id=id,
            metadata=metadata,
            action=action,
            performedAction=performedAction,
            externalState=externalState,
            state=state,
            desks=desks,
            delegatedByDesk=delegatedByDesk,
            user=user,
            readByUserIds=readByUserIds,
            publicCertificateBase64=publicCertificateBase64,
            externalSignatureProcedureId=externalSignatureProcedureId,
            beginDate=beginDate,
            date=date,
            draftCreationDate=draftCreationDate,
            publicAnnotation=publicAnnotation,
            privateAnnotation=privateAnnotation,
            notifiedDesks=notifiedDesks,
            workflowIndex=workflowIndex,
            stepIndex=stepIndex,
            mandatoryValidationMetadata=mandatoryValidationMetadata,
            mandatoryRejectionMetadata=mandatoryRejectionMetadata,
            instanceName=instanceName,
            _configuration=_configuration,
            **kwargs,
        )

from iparapheur_internal.model.action import Action
from iparapheur_internal.model.desk_representation import DeskRepresentation
from iparapheur_internal.model.external_state import ExternalState
from iparapheur_internal.model.state import State
from iparapheur_internal.model.user_representation import UserRepresentation
