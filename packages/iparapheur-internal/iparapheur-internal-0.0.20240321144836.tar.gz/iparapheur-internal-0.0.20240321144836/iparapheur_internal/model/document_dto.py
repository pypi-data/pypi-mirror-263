# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic.   # noqa: E501

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iparapheur_internal import schemas  # noqa: F401


class DocumentDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            index = schemas.Int32Schema
            pageCount = schemas.Int32Schema
            contentLength = schemas.Int64Schema
        
            @staticmethod
            def mediaType() -> typing.Type['MediaType']:
                return MediaType
            
            
            class pagesProperties(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['PageInfo']:
                        return PageInfo
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'PageInfo':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'PageInfo':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'PageInfo',
                ) -> 'pagesProperties':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            pdfVisualId = schemas.StrSchema
            
            
            class signaturePlacementAnnotations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SignaturePlacement']:
                        return SignaturePlacement
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SignaturePlacement'], typing.List['SignaturePlacement']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'signaturePlacementAnnotations':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SignaturePlacement':
                    return super().__getitem__(i)
            
            
            class signatureTags(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['PdfSignaturePosition']:
                        return PdfSignaturePosition
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'PdfSignaturePosition':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'PdfSignaturePosition':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'PdfSignaturePosition',
                ) -> 'signatureTags':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class sealTags(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['PdfSignaturePosition']:
                        return PdfSignaturePosition
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'PdfSignaturePosition':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'PdfSignaturePosition':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'PdfSignaturePosition',
                ) -> 'sealTags':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class detachedSignatures(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DetachedSignature']:
                        return DetachedSignature
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DetachedSignature'], typing.List['DetachedSignature']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'detachedSignatures':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DetachedSignature':
                    return super().__getitem__(i)
            
            
            class embeddedSignatureInfos(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SignatureInfo']:
                        return SignatureInfo
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SignatureInfo'], typing.List['SignatureInfo']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'embeddedSignatureInfos':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SignatureInfo':
                    return super().__getitem__(i)
            signatureProof = schemas.BoolSchema
            deletable = schemas.BoolSchema
            isMainDocument = schemas.BoolSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "index": index,
                "pageCount": pageCount,
                "contentLength": contentLength,
                "mediaType": mediaType,
                "pagesProperties": pagesProperties,
                "pdfVisualId": pdfVisualId,
                "signaturePlacementAnnotations": signaturePlacementAnnotations,
                "signatureTags": signatureTags,
                "sealTags": sealTags,
                "detachedSignatures": detachedSignatures,
                "embeddedSignatureInfos": embeddedSignatureInfos,
                "signatureProof": signatureProof,
                "deletable": deletable,
                "isMainDocument": isMainDocument,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["index"]) -> MetaOapg.properties.index: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pageCount"]) -> MetaOapg.properties.pageCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contentLength"]) -> MetaOapg.properties.contentLength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mediaType"]) -> 'MediaType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pagesProperties"]) -> MetaOapg.properties.pagesProperties: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pdfVisualId"]) -> MetaOapg.properties.pdfVisualId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signaturePlacementAnnotations"]) -> MetaOapg.properties.signaturePlacementAnnotations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signatureTags"]) -> MetaOapg.properties.signatureTags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sealTags"]) -> MetaOapg.properties.sealTags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["detachedSignatures"]) -> MetaOapg.properties.detachedSignatures: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["embeddedSignatureInfos"]) -> MetaOapg.properties.embeddedSignatureInfos: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signatureProof"]) -> MetaOapg.properties.signatureProof: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deletable"]) -> MetaOapg.properties.deletable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isMainDocument"]) -> MetaOapg.properties.isMainDocument: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "index", "pageCount", "contentLength", "mediaType", "pagesProperties", "pdfVisualId", "signaturePlacementAnnotations", "signatureTags", "sealTags", "detachedSignatures", "embeddedSignatureInfos", "signatureProof", "deletable", "isMainDocument", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["index"]) -> typing.Union[MetaOapg.properties.index, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pageCount"]) -> typing.Union[MetaOapg.properties.pageCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contentLength"]) -> typing.Union[MetaOapg.properties.contentLength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mediaType"]) -> typing.Union['MediaType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pagesProperties"]) -> typing.Union[MetaOapg.properties.pagesProperties, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pdfVisualId"]) -> typing.Union[MetaOapg.properties.pdfVisualId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signaturePlacementAnnotations"]) -> typing.Union[MetaOapg.properties.signaturePlacementAnnotations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signatureTags"]) -> typing.Union[MetaOapg.properties.signatureTags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sealTags"]) -> typing.Union[MetaOapg.properties.sealTags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["detachedSignatures"]) -> typing.Union[MetaOapg.properties.detachedSignatures, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["embeddedSignatureInfos"]) -> typing.Union[MetaOapg.properties.embeddedSignatureInfos, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signatureProof"]) -> typing.Union[MetaOapg.properties.signatureProof, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deletable"]) -> typing.Union[MetaOapg.properties.deletable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isMainDocument"]) -> typing.Union[MetaOapg.properties.isMainDocument, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "index", "pageCount", "contentLength", "mediaType", "pagesProperties", "pdfVisualId", "signaturePlacementAnnotations", "signatureTags", "sealTags", "detachedSignatures", "embeddedSignatureInfos", "signatureProof", "deletable", "isMainDocument", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        index: typing.Union[MetaOapg.properties.index, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        pageCount: typing.Union[MetaOapg.properties.pageCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        contentLength: typing.Union[MetaOapg.properties.contentLength, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        mediaType: typing.Union['MediaType', schemas.Unset] = schemas.unset,
        pagesProperties: typing.Union[MetaOapg.properties.pagesProperties, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        pdfVisualId: typing.Union[MetaOapg.properties.pdfVisualId, str, schemas.Unset] = schemas.unset,
        signaturePlacementAnnotations: typing.Union[MetaOapg.properties.signaturePlacementAnnotations, list, tuple, schemas.Unset] = schemas.unset,
        signatureTags: typing.Union[MetaOapg.properties.signatureTags, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        sealTags: typing.Union[MetaOapg.properties.sealTags, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        detachedSignatures: typing.Union[MetaOapg.properties.detachedSignatures, list, tuple, schemas.Unset] = schemas.unset,
        embeddedSignatureInfos: typing.Union[MetaOapg.properties.embeddedSignatureInfos, list, tuple, schemas.Unset] = schemas.unset,
        signatureProof: typing.Union[MetaOapg.properties.signatureProof, bool, schemas.Unset] = schemas.unset,
        deletable: typing.Union[MetaOapg.properties.deletable, bool, schemas.Unset] = schemas.unset,
        isMainDocument: typing.Union[MetaOapg.properties.isMainDocument, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DocumentDto':
        return super().__new__(
            cls,
            *_args,
            id=id,
            name=name,
            index=index,
            pageCount=pageCount,
            contentLength=contentLength,
            mediaType=mediaType,
            pagesProperties=pagesProperties,
            pdfVisualId=pdfVisualId,
            signaturePlacementAnnotations=signaturePlacementAnnotations,
            signatureTags=signatureTags,
            sealTags=sealTags,
            detachedSignatures=detachedSignatures,
            embeddedSignatureInfos=embeddedSignatureInfos,
            signatureProof=signatureProof,
            deletable=deletable,
            isMainDocument=isMainDocument,
            _configuration=_configuration,
            **kwargs,
        )

from iparapheur_internal.model.detached_signature import DetachedSignature
from iparapheur_internal.model.media_type import MediaType
from iparapheur_internal.model.page_info import PageInfo
from iparapheur_internal.model.pdf_signature_position import PdfSignaturePosition
from iparapheur_internal.model.signature_info import SignatureInfo
from iparapheur_internal.model.signature_placement import SignaturePlacement
