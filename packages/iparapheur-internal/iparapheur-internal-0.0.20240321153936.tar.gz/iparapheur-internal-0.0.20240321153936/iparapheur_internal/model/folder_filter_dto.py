# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic.   # noqa: E501

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iparapheur_internal import schemas  # noqa: F401


class FolderFilterDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            userId = schemas.StrSchema
            
            
            class filterName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 2
            typeId = schemas.StrSchema
        
            @staticmethod
            def type() -> typing.Type['TypologyRepresentation']:
                return TypologyRepresentation
            subtypeId = schemas.StrSchema
        
            @staticmethod
            def subtype() -> typing.Type['TypologyRepresentation']:
                return TypologyRepresentation
            searchData = schemas.StrSchema
            legacyId = schemas.StrSchema
        
            @staticmethod
            def state() -> typing.Type['State']:
                return State
            
            
            class metadataFilters(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'metadataFilters':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            _from = schemas.DateTimeSchema
            to = schemas.DateTimeSchema
            __annotations__ = {
                "id": id,
                "userId": userId,
                "filterName": filterName,
                "typeId": typeId,
                "type": type,
                "subtypeId": subtypeId,
                "subtype": subtype,
                "searchData": searchData,
                "legacyId": legacyId,
                "state": state,
                "metadataFilters": metadataFilters,
                "from": _from,
                "to": to,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterName"]) -> MetaOapg.properties.filterName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["typeId"]) -> MetaOapg.properties.typeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'TypologyRepresentation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtypeId"]) -> MetaOapg.properties.subtypeId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtype"]) -> 'TypologyRepresentation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["searchData"]) -> MetaOapg.properties.searchData: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legacyId"]) -> MetaOapg.properties.legacyId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> 'State': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadataFilters"]) -> MetaOapg.properties.metadataFilters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "userId", "filterName", "typeId", "type", "subtypeId", "subtype", "searchData", "legacyId", "state", "metadataFilters", "from", "to", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterName"]) -> typing.Union[MetaOapg.properties.filterName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["typeId"]) -> typing.Union[MetaOapg.properties.typeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['TypologyRepresentation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtypeId"]) -> typing.Union[MetaOapg.properties.subtypeId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtype"]) -> typing.Union['TypologyRepresentation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["searchData"]) -> typing.Union[MetaOapg.properties.searchData, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legacyId"]) -> typing.Union[MetaOapg.properties.legacyId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> typing.Union['State', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadataFilters"]) -> typing.Union[MetaOapg.properties.metadataFilters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> typing.Union[MetaOapg.properties._from, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> typing.Union[MetaOapg.properties.to, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "userId", "filterName", "typeId", "type", "subtypeId", "subtype", "searchData", "legacyId", "state", "metadataFilters", "from", "to", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        userId: typing.Union[MetaOapg.properties.userId, str, schemas.Unset] = schemas.unset,
        filterName: typing.Union[MetaOapg.properties.filterName, str, schemas.Unset] = schemas.unset,
        typeId: typing.Union[MetaOapg.properties.typeId, str, schemas.Unset] = schemas.unset,
        type: typing.Union['TypologyRepresentation', schemas.Unset] = schemas.unset,
        subtypeId: typing.Union[MetaOapg.properties.subtypeId, str, schemas.Unset] = schemas.unset,
        subtype: typing.Union['TypologyRepresentation', schemas.Unset] = schemas.unset,
        searchData: typing.Union[MetaOapg.properties.searchData, str, schemas.Unset] = schemas.unset,
        legacyId: typing.Union[MetaOapg.properties.legacyId, str, schemas.Unset] = schemas.unset,
        state: typing.Union['State', schemas.Unset] = schemas.unset,
        metadataFilters: typing.Union[MetaOapg.properties.metadataFilters, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        to: typing.Union[MetaOapg.properties.to, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FolderFilterDto':
        return super().__new__(
            cls,
            *_args,
            id=id,
            userId=userId,
            filterName=filterName,
            typeId=typeId,
            type=type,
            subtypeId=subtypeId,
            subtype=subtype,
            searchData=searchData,
            legacyId=legacyId,
            state=state,
            metadataFilters=metadataFilters,
            to=to,
            _configuration=_configuration,
            **kwargs,
        )

from iparapheur_internal.model.state import State
from iparapheur_internal.model.typology_representation import TypologyRepresentation
