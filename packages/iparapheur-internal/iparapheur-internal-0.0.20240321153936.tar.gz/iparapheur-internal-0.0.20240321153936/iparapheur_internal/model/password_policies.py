# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic.   # noqa: E501

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iparapheur_internal import schemas  # noqa: F401


class PasswordPolicies(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            minLength = schemas.Int32Schema
            maxLength = schemas.Int32Schema
            notUsername = schemas.BoolSchema
            notEmail = schemas.BoolSchema
            specialCharsMinCount = schemas.Int32Schema
            uppercaseCharsMinCount = schemas.Int32Schema
            lowercaseCharsMinCount = schemas.Int32Schema
            digitsMinCount = schemas.Int32Schema
            __annotations__ = {
                "minLength": minLength,
                "maxLength": maxLength,
                "notUsername": notUsername,
                "notEmail": notEmail,
                "specialCharsMinCount": specialCharsMinCount,
                "uppercaseCharsMinCount": uppercaseCharsMinCount,
                "lowercaseCharsMinCount": lowercaseCharsMinCount,
                "digitsMinCount": digitsMinCount,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minLength"]) -> MetaOapg.properties.minLength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxLength"]) -> MetaOapg.properties.maxLength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notUsername"]) -> MetaOapg.properties.notUsername: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notEmail"]) -> MetaOapg.properties.notEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["specialCharsMinCount"]) -> MetaOapg.properties.specialCharsMinCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uppercaseCharsMinCount"]) -> MetaOapg.properties.uppercaseCharsMinCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lowercaseCharsMinCount"]) -> MetaOapg.properties.lowercaseCharsMinCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["digitsMinCount"]) -> MetaOapg.properties.digitsMinCount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["minLength", "maxLength", "notUsername", "notEmail", "specialCharsMinCount", "uppercaseCharsMinCount", "lowercaseCharsMinCount", "digitsMinCount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minLength"]) -> typing.Union[MetaOapg.properties.minLength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxLength"]) -> typing.Union[MetaOapg.properties.maxLength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notUsername"]) -> typing.Union[MetaOapg.properties.notUsername, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notEmail"]) -> typing.Union[MetaOapg.properties.notEmail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["specialCharsMinCount"]) -> typing.Union[MetaOapg.properties.specialCharsMinCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uppercaseCharsMinCount"]) -> typing.Union[MetaOapg.properties.uppercaseCharsMinCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lowercaseCharsMinCount"]) -> typing.Union[MetaOapg.properties.lowercaseCharsMinCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["digitsMinCount"]) -> typing.Union[MetaOapg.properties.digitsMinCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["minLength", "maxLength", "notUsername", "notEmail", "specialCharsMinCount", "uppercaseCharsMinCount", "lowercaseCharsMinCount", "digitsMinCount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        minLength: typing.Union[MetaOapg.properties.minLength, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maxLength: typing.Union[MetaOapg.properties.maxLength, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        notUsername: typing.Union[MetaOapg.properties.notUsername, bool, schemas.Unset] = schemas.unset,
        notEmail: typing.Union[MetaOapg.properties.notEmail, bool, schemas.Unset] = schemas.unset,
        specialCharsMinCount: typing.Union[MetaOapg.properties.specialCharsMinCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        uppercaseCharsMinCount: typing.Union[MetaOapg.properties.uppercaseCharsMinCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        lowercaseCharsMinCount: typing.Union[MetaOapg.properties.lowercaseCharsMinCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        digitsMinCount: typing.Union[MetaOapg.properties.digitsMinCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PasswordPolicies':
        return super().__new__(
            cls,
            *_args,
            minLength=minLength,
            maxLength=maxLength,
            notUsername=notUsername,
            notEmail=notEmail,
            specialCharsMinCount=specialCharsMinCount,
            uppercaseCharsMinCount=uppercaseCharsMinCount,
            lowercaseCharsMinCount=lowercaseCharsMinCount,
            digitsMinCount=digitsMinCount,
            _configuration=_configuration,
            **kwargs,
        )
