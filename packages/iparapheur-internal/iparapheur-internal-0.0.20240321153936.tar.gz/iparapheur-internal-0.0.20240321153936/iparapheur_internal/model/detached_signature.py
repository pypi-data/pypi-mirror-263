# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic.   # noqa: E501

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iparapheur_internal import schemas  # noqa: F401


class DetachedSignature(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            id = schemas.StrSchema
            name = schemas.StrSchema
            contentLength = schemas.Int64Schema
        
            @staticmethod
            def mediaType() -> typing.Type['MediaType']:
                return MediaType
            targetDocumentId = schemas.StrSchema
            targetTaskId = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "name": name,
                "contentLength": contentLength,
                "mediaType": mediaType,
                "targetDocumentId": targetDocumentId,
                "targetTaskId": targetTaskId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contentLength"]) -> MetaOapg.properties.contentLength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mediaType"]) -> 'MediaType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetDocumentId"]) -> MetaOapg.properties.targetDocumentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetTaskId"]) -> MetaOapg.properties.targetTaskId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "name", "contentLength", "mediaType", "targetDocumentId", "targetTaskId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contentLength"]) -> typing.Union[MetaOapg.properties.contentLength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mediaType"]) -> typing.Union['MediaType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetDocumentId"]) -> typing.Union[MetaOapg.properties.targetDocumentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetTaskId"]) -> typing.Union[MetaOapg.properties.targetTaskId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "name", "contentLength", "mediaType", "targetDocumentId", "targetTaskId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        contentLength: typing.Union[MetaOapg.properties.contentLength, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        mediaType: typing.Union['MediaType', schemas.Unset] = schemas.unset,
        targetDocumentId: typing.Union[MetaOapg.properties.targetDocumentId, str, schemas.Unset] = schemas.unset,
        targetTaskId: typing.Union[MetaOapg.properties.targetTaskId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DetachedSignature':
        return super().__new__(
            cls,
            *_args,
            id=id,
            name=name,
            contentLength=contentLength,
            mediaType=mediaType,
            targetDocumentId=targetDocumentId,
            targetTaskId=targetTaskId,
            _configuration=_configuration,
            **kwargs,
        )

from iparapheur_internal.model.media_type import MediaType
