# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic.   # noqa: E501

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iparapheur_internal import schemas  # noqa: F401


class SignatureInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            signatureDateTime = schemas.Int64Schema
            isSignatureValid = schemas.BoolSchema
            name = schemas.StrSchema
            issuerName = schemas.StrSchema
            __annotations__ = {
                "signatureDateTime": signatureDateTime,
                "isSignatureValid": isSignatureValid,
                "name": name,
                "issuerName": issuerName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signatureDateTime"]) -> MetaOapg.properties.signatureDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSignatureValid"]) -> MetaOapg.properties.isSignatureValid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issuerName"]) -> MetaOapg.properties.issuerName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["signatureDateTime", "isSignatureValid", "name", "issuerName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signatureDateTime"]) -> typing.Union[MetaOapg.properties.signatureDateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSignatureValid"]) -> typing.Union[MetaOapg.properties.isSignatureValid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issuerName"]) -> typing.Union[MetaOapg.properties.issuerName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["signatureDateTime", "isSignatureValid", "name", "issuerName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        signatureDateTime: typing.Union[MetaOapg.properties.signatureDateTime, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        isSignatureValid: typing.Union[MetaOapg.properties.isSignatureValid, bool, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        issuerName: typing.Union[MetaOapg.properties.issuerName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SignatureInfo':
        return super().__new__(
            cls,
            *_args,
            signatureDateTime=signatureDateTime,
            isSignatureValid=isSignatureValid,
            name=name,
            issuerName=issuerName,
            _configuration=_configuration,
            **kwargs,
        )
