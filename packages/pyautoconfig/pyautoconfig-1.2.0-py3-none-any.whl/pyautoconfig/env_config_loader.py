# Author: Yiannis Charalambous

import os
import sys
from dotenv import load_dotenv, find_dotenv
from pathlib import Path
from dataclasses import dataclass
from typing_extensions import override, Optional
from platform import system as system_name

from pyautoconfig import EnvTypes
from .base_config_loader import BaseConfigLoader


@dataclass
class EnvConfigField:
    name: str
    default_value: EnvTypes = ""
    is_optional: bool = False
    """Will not load the config if the value is not specified by the user. If
    true will assign default_value."""
    show_in_config: bool = True
    """Show in config tool UI."""


class EnvConfigLoader(BaseConfigLoader):
    autogenerated_string: str = "# Generated by ESBMC-AI config tool."

    def __init__(
        self,
        fields: list[EnvConfigField],
        file_path: str = "~/.config/esbmc-ai.env",
        create_missing_fields: bool = False,
    ) -> None:
        assert file_path.endswith(".env"), f"{self.file_path} is not a valid env file."

        self.fields: list[EnvConfigField] = fields

        self.values: dict[str, EnvTypes] = {}

        super().__init__(
            file_path=file_path,
            create_missing_fields=create_missing_fields,
        )

    @override
    def save(self) -> None:
        with open(self.file_path, "w") as file:
            file.write(EnvConfigLoader.autogenerated_string + "\n")
            for field in self.fields:
                file.write(f"{field.name}={self.values[field.name]}\n")

    @override
    def _create_default_file(self) -> None:
        with open(self.file_path, "w") as file:
            file.write(EnvConfigLoader.autogenerated_string)

    @override
    def _read_fields(self, create_missing_fields: bool = False) -> None:
        """Environment variables are loaded in the following order:

        1. Environment variables already loaded. Any variable not present will be looked for in
        .env files in the following locations.
        2. .env file in the current directory, moving upwards in the directory tree.
        3. esbmc-ai.env file in the current directory, moving upwards in the directory tree.
        4. esbmc-ai.env file in $HOME/.config/ for Linux/macOS and %userprofile% for Windows.

        Note: ESBMC_AI_CFG_PATH undergoes tilde user expansion and also environment
        variable expansion.
        """

        values: dict[str, EnvTypes] = {}

        def get_env_vars() -> None:
            """Gets all the system environment variables that are currently loaded. Will not
            load values that are not following the EnvConfigField specification."""
            for field in self.fields:
                value: Optional[str] = os.getenv(field.name)
                # Check if value is not None
                if value != None:
                    values[field.name] = value

        # Read from system environment.
        get_env_vars()

        # Search for .env or esbmc-ai.env in cwd and go up.
        # Find .env in file path and load it else find esbmc-ai.env in current working directory and load it.
        dotenv_file_path: str = find_dotenv(usecwd=True)
        if dotenv_file_path != "":
            load_dotenv(dotenv_path=dotenv_file_path, override=False, verbose=True)
        else:
            dotenv_file_path: str = find_dotenv(filename="esbmc-ai.env", usecwd=True)
            if dotenv_file_path != "":
                load_dotenv(dotenv_path=dotenv_file_path, override=False, verbose=True)

        get_env_vars()

        # Look for .env in home folder.
        home_path: Path = Path.home()
        match system_name():
            case "Linux" | "Darwin":
                home_path /= ".config/esbmc-ai.env"
            case "Windows":
                home_path /= "esbmc-ai.env"
            case _:
                raise ValueError(f"Unknown OS type: {system_name()}")

        load_dotenv(home_path, override=False, verbose=True)
        get_env_vars()

        # Check if all the values are set, else create them with defaults.
        for field in self.fields:
            if field.name not in values:
                if create_missing_fields or field.is_optional:
                    # Create new field with default value.
                    values[field.name] = field.default_value
                else:
                    print(f"Error: No ${field.name} in environment.")
                    sys.exit(1)

        self.values: dict[str, EnvTypes] = values
