# Author: Yiannis Charalambous

import pytest

from pyautoconfig import EnvConfigField, EnvConfigLoader


@pytest.fixture(scope="module")
def setup_no_missing():
    return EnvConfigLoader.from_schema(
        fields=[
            EnvConfigField("field1", "string"),
            EnvConfigField("field2", 0),
            EnvConfigField("field3", 2.5, is_optional=True),
        ],
    )


def test_values(setup_no_missing):
    loader: EnvConfigLoader = setup_no_missing
    assert loader.get_value("field1") == "string" and isinstance(
        loader.get_value("field1"), str
    )
    assert loader.get_value("field2") == 0 and isinstance(
        loader.get_value("field2"), int
    )
    assert loader.get_value("field3") == 2.5 and isinstance(
        loader.get_value("field3"), float
    )
    assert loader.get_value("aaaaa") is None


def test_load_single():
    pass


def test_load_stacked():
    pass


def test_detect_missing():
    with pytest.raises(Exception):
        EnvConfigLoader(
            fields=[
                EnvConfigField("field1", "string"),
                EnvConfigField("field2", 0),
                EnvConfigField("field3", 2.5, is_optional=True),
            ],
            create_missing_fields=False,
        )


def test_create_missing():
    loader: EnvConfigLoader = EnvConfigLoader(
        fields=[
            EnvConfigField("field1", "string"),
            EnvConfigField("field2", 0),
            EnvConfigField("field3", 2.5, is_optional=True),
        ],
        content=f"{EnvConfigLoader.autogenerated_string}field3=3",
        create_missing_fields=True,
    )

    assert loader.get_value("field1") == "string" and isinstance(
        loader.get_value("field1"), str
    )
    assert loader.get_value("field2") == 0 and isinstance(
        loader.get_value("field2"), int
    )
    assert loader.get_value("field3") == 2.5 and isinstance(
        loader.get_value("field3"), float
    )


def test_optional():
    loader: EnvConfigLoader = EnvConfigLoader(
        fields=[
            EnvConfigField("field1", "string"),
            EnvConfigField("field2", 0),
            EnvConfigField("field3", 2.5, is_optional=True),
        ],
        content=f"{EnvConfigLoader.autogenerated_string}\nfield1=hello\nfield2=100",
        create_missing_fields=False,
    )
    assert loader.get_value("field1") == "hello" and isinstance(
        loader.get_value("field1"), str
    )
    assert loader.get_value("field2") == 100 and isinstance(
        loader.get_value("field2"), int
    )
    assert loader.get_value("field3") == 2.5 and isinstance(
        loader.get_value("field3"), float
    )


def test_types():
    pass
