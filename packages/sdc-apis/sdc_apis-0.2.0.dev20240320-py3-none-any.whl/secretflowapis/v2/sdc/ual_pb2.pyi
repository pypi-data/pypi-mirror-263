"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2023 Ant Group Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class UnifiedAttestationAttributes(google.protobuf.message.Message):
    """/ UnifiedAttestationAttributes collect all attributes information
    / of trusted application from UnifiedAttestationReport format report.
    / All attributes is optional when used in UnifiedAttestationPolicy.
    / The TEE implement decides which attribute is used in repport and policy.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STR_TEE_PLATFORM_FIELD_NUMBER: builtins.int
    HEX_PLATFORM_HW_VERSION_FIELD_NUMBER: builtins.int
    HEX_PLATFORM_SW_VERSION_FIELD_NUMBER: builtins.int
    HEX_SECURE_FLAGS_FIELD_NUMBER: builtins.int
    HEX_PLATFORM_MEASUREMENT_FIELD_NUMBER: builtins.int
    HEX_BOOT_MEASUREMENT_FIELD_NUMBER: builtins.int
    STR_TEE_IDENTITY_FIELD_NUMBER: builtins.int
    HEX_TA_MEASUREMENT_FIELD_NUMBER: builtins.int
    HEX_TA_DYN_MEASUREMENT_FIELD_NUMBER: builtins.int
    HEX_SIGNER_FIELD_NUMBER: builtins.int
    HEX_PROD_ID_FIELD_NUMBER: builtins.int
    STR_MIN_ISVSVN_FIELD_NUMBER: builtins.int
    BOOL_DEBUG_DISABLED_FIELD_NUMBER: builtins.int
    HEX_USER_DATA_FIELD_NUMBER: builtins.int
    HEX_HASH_OR_PEM_PUBKEY_FIELD_NUMBER: builtins.int
    HEX_NONCE_FIELD_NUMBER: builtins.int
    HEX_SPID_FIELD_NUMBER: builtins.int
    str_tee_platform: builtins.str
    """The TEE platform, in case some verifier need to verify this."""
    hex_platform_hw_version: builtins.str
    """The TEE platform hardware related identity or version"""
    hex_platform_sw_version: builtins.str
    """The TEE platform TCB software related version"""
    hex_secure_flags: builtins.str
    """The TEE platform security related attribte or flags"""
    hex_platform_measurement: builtins.str
    """The measurement of TEE implement internal stuffs"""
    hex_boot_measurement: builtins.str
    """The measurement of TEE instance boot time stuffs"""
    str_tee_identity: builtins.str
    """The TEE instance or trust application identity when generate the reprot"""
    hex_ta_measurement: builtins.str
    """The static measurement of trust application when load the code"""
    hex_ta_dyn_measurement: builtins.str
    """The dynamical measurement of trust application code,
    for example, the real-time measurement of code in secure memory
    after the trust application is already run.
    """
    hex_signer: builtins.str
    """The measurement or other identity of the trust application signer"""
    hex_prod_id: builtins.str
    """The product ID of the TEE instance or trust application"""
    str_min_isvsvn: builtins.str
    """The minimal ISV SVN of the TEE instance or trust application"""
    bool_debug_disabled: builtins.str
    """The bool string "0" for debugable, "1" for not debugable"""
    hex_user_data: builtins.str
    """The user special data for generating attestation report"""
    hex_hash_or_pem_pubkey: builtins.str
    """hex string hash or original pem public key"""
    hex_nonce: builtins.str
    """The idenpendent freshness value beside what in user data"""
    hex_spid: builtins.str
    """The service provider id, e.g. use in sgx1, 64 bytes hex string"""
    def __init__(
        self,
        *,
        str_tee_platform: builtins.str = ...,
        hex_platform_hw_version: builtins.str = ...,
        hex_platform_sw_version: builtins.str = ...,
        hex_secure_flags: builtins.str = ...,
        hex_platform_measurement: builtins.str = ...,
        hex_boot_measurement: builtins.str = ...,
        str_tee_identity: builtins.str = ...,
        hex_ta_measurement: builtins.str = ...,
        hex_ta_dyn_measurement: builtins.str = ...,
        hex_signer: builtins.str = ...,
        hex_prod_id: builtins.str = ...,
        str_min_isvsvn: builtins.str = ...,
        bool_debug_disabled: builtins.str = ...,
        hex_user_data: builtins.str = ...,
        hex_hash_or_pem_pubkey: builtins.str = ...,
        hex_nonce: builtins.str = ...,
        hex_spid: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["bool_debug_disabled", b"bool_debug_disabled", "hex_boot_measurement", b"hex_boot_measurement", "hex_hash_or_pem_pubkey", b"hex_hash_or_pem_pubkey", "hex_nonce", b"hex_nonce", "hex_platform_hw_version", b"hex_platform_hw_version", "hex_platform_measurement", b"hex_platform_measurement", "hex_platform_sw_version", b"hex_platform_sw_version", "hex_prod_id", b"hex_prod_id", "hex_secure_flags", b"hex_secure_flags", "hex_signer", b"hex_signer", "hex_spid", b"hex_spid", "hex_ta_dyn_measurement", b"hex_ta_dyn_measurement", "hex_ta_measurement", b"hex_ta_measurement", "hex_user_data", b"hex_user_data", "str_min_isvsvn", b"str_min_isvsvn", "str_tee_identity", b"str_tee_identity", "str_tee_platform", b"str_tee_platform"]) -> None: ...

global___UnifiedAttestationAttributes = UnifiedAttestationAttributes

@typing_extensions.final
class UnifiedAttestationPolicy(google.protobuf.message.Message):
    """/ UnifiedAttestationPolicy is used when verify the attestation report.
    / Both main or nested submodule attester support multi-version of instances.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PEM_PUBLIC_KEY_FIELD_NUMBER: builtins.int
    MAIN_ATTRIBUTES_FIELD_NUMBER: builtins.int
    NESTED_POLICIES_FIELD_NUMBER: builtins.int
    pem_public_key: builtins.str
    """Assume one public key is bound to one report, specify it here.
    We can also specify the public key or its hash in main or submodule
    UnifiedAttestationAttributes. Public key verification will happen
    in both two places.
    NOTE: if there is submodule attester, we must specify the public key
    here to verify the signature of submode attestation result.
    """
    @property
    def main_attributes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___UnifiedAttestationAttributes]:
        """For main attester"""
    @property
    def nested_policies(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___UnifiedAttestationNestedPolicy]:
        """For submodule attesters"""
    def __init__(
        self,
        *,
        pem_public_key: builtins.str = ...,
        main_attributes: collections.abc.Iterable[global___UnifiedAttestationAttributes] | None = ...,
        nested_policies: collections.abc.Iterable[global___UnifiedAttestationNestedPolicy] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["main_attributes", b"main_attributes", "nested_policies", b"nested_policies", "pem_public_key", b"pem_public_key"]) -> None: ...

global___UnifiedAttestationPolicy = UnifiedAttestationPolicy

@typing_extensions.final
class UnifiedAttestationNestedPolicy(google.protobuf.message.Message):
    """/ Match rulse for nested report verification"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SUB_ATTRIBUTES_FIELD_NUMBER: builtins.int
    @property
    def sub_attributes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___UnifiedAttestationAttributes]: ...
    def __init__(
        self,
        *,
        sub_attributes: collections.abc.Iterable[global___UnifiedAttestationAttributes] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["sub_attributes", b"sub_attributes"]) -> None: ...

global___UnifiedAttestationNestedPolicy = UnifiedAttestationNestedPolicy

@typing_extensions.final
class UnifiedAttestationReportParams(google.protobuf.message.Message):
    """/ Special Parameters for different TEE platforms, keep consistent with kubetee
    / attestation.proto
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STR_REPORT_IDENTITY_FIELD_NUMBER: builtins.int
    HEX_USER_DATA_FIELD_NUMBER: builtins.int
    JSON_NESTED_REPORTS_FIELD_NUMBER: builtins.int
    HEX_SPID_FIELD_NUMBER: builtins.int
    str_report_identity: builtins.str
    """The identity string for report instance which is cached inside TEE.
    It's optional and usually used in Asynchronous processes.
    """
    hex_user_data: builtins.str
    """The user data in some TEE platforms, Max to 64 Bytes of HEX string.
    Users need to convert binary value data to HEX string themselves.
    """
    json_nested_reports: builtins.str
    """The JSON serialized string of UnifiedAttestationNestedReports"""
    hex_spid: builtins.str
    """Service Provider ID for SGX1 only"""
    def __init__(
        self,
        *,
        str_report_identity: builtins.str = ...,
        hex_user_data: builtins.str = ...,
        json_nested_reports: builtins.str = ...,
        hex_spid: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["hex_spid", b"hex_spid", "hex_user_data", b"hex_user_data", "json_nested_reports", b"json_nested_reports", "str_report_identity", b"str_report_identity"]) -> None: ...

global___UnifiedAttestationReportParams = UnifiedAttestationReportParams

@typing_extensions.final
class UnifiedAttestationReport(google.protobuf.message.Message):
    """/ Unified Attestation Report, keep consistent with kubetee attestation.proto"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    STR_REPORT_VERSION_FIELD_NUMBER: builtins.int
    STR_REPORT_TYPE_FIELD_NUMBER: builtins.int
    STR_TEE_PLATFORM_FIELD_NUMBER: builtins.int
    JSON_REPORT_FIELD_NUMBER: builtins.int
    JSON_NESTED_REPORTS_FIELD_NUMBER: builtins.int
    str_report_version: builtins.str
    """For compatibility and udpate later, current is version "1.0" """
    str_report_type: builtins.str
    """Valid type string: "BackgroundCheck"|"Passport"|"Uas" """
    str_tee_platform: builtins.str
    """The TEE platform name"""
    json_report: builtins.str
    """Different JSON serialized string for each TEE platform
    The TEE platforms are in charge of parsing it in their own way.
    """
    json_nested_reports: builtins.str
    """The JSON serialized string of UnifiedAttestationNestedReports"""
    def __init__(
        self,
        *,
        str_report_version: builtins.str = ...,
        str_report_type: builtins.str = ...,
        str_tee_platform: builtins.str = ...,
        json_report: builtins.str = ...,
        json_nested_reports: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["json_nested_reports", b"json_nested_reports", "json_report", b"json_report", "str_report_type", b"str_report_type", "str_report_version", b"str_report_version", "str_tee_platform", b"str_tee_platform"]) -> None: ...

global___UnifiedAttestationReport = UnifiedAttestationReport
