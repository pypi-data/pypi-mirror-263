# coding: utf-8

"""
    seqq

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.18
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class V1alphaHit(BaseModel):
    """
    Hit is a single hit from a Search.
    """ # noqa: E501
    saccver: Optional[StrictStr] = Field(default=None, description="Subject accession version.")
    pident: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Percentage of identical matches.")
    length: Optional[StrictStr] = Field(default=None, description="Alignment length.")
    mismatch: Optional[StrictStr] = Field(default=None, description="Number of mismatches.")
    gapopen: Optional[StrictStr] = Field(default=None, description="Number of gap openings.")
    qstart: Optional[StrictStr] = Field(default=None, description="Start of alignment in search.")
    qend: Optional[StrictStr] = Field(default=None, description="End of alignment in search.")
    sstart: Optional[StrictStr] = Field(default=None, description="Start of alignment in subject.")
    send: Optional[StrictStr] = Field(default=None, description="End of alignment in subject.")
    evalue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Expect value.")
    bitscore: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Bit score.")
    __properties: ClassVar[List[str]] = ["saccver", "pident", "length", "mismatch", "gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V1alphaHit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "saccver",
            "pident",
            "length",
            "mismatch",
            "gapopen",
            "qstart",
            "qend",
            "sstart",
            "send",
            "evalue",
            "bitscore",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V1alphaHit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "saccver": obj.get("saccver"),
            "pident": obj.get("pident"),
            "length": obj.get("length"),
            "mismatch": obj.get("mismatch"),
            "gapopen": obj.get("gapopen"),
            "qstart": obj.get("qstart"),
            "qend": obj.get("qend"),
            "sstart": obj.get("sstart"),
            "send": obj.get("send"),
            "evalue": obj.get("evalue"),
            "bitscore": obj.get("bitscore")
        })
        return _obj


