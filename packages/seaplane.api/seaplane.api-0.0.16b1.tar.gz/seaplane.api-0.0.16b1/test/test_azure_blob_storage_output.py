# coding: utf-8

"""
    Carrier API

    **Seaplane Global Messaging Service**  For information about authentication see [authentication](/docs/authentication)   # noqa: E501

    The version of the OpenAPI document: 1.1.0-beta
    Contact: support@seaplane.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import seaplane.gen.carrier
from seaplane.gen.carrier.models.azure_blob_storage_output import (
    AzureBlobStorageOutput,
)  # noqa: E501
from seaplane.gen.carrier.rest import ApiException


class TestAzureBlobStorageOutput(unittest.TestCase):
    """AzureBlobStorageOutput unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test AzureBlobStorageOutput
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `AzureBlobStorageOutput`
        """
        model = seaplane.gen.carrier.models.azure_blob_storage_output.AzureBlobStorageOutput()  # noqa: E501
        if include_optional :
            return AzureBlobStorageOutput(
                storage_account = '', 
                storage_access_key = '', 
                storage_sas_token = '', 
                storage_connection_string = '', 
                container = 'foo', 
                path = '${!count("files")}-${!timestamp_unix_nano()}.txt', 
                blob_type = 'BLOCK', 
                public_access_level = 'PRIVATE', 
                max_in_flight = 64
            )
        else :
            return AzureBlobStorageOutput(
                container = 'foo',
        )
        """

    def testAzureBlobStorageOutput(self):
        """Test AzureBlobStorageOutput"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
