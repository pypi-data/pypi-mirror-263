# coding: utf-8

"""
    Carrier API

    **Seaplane Global Messaging Service**  For information about authentication see [authentication](/docs/authentication)   # noqa: E501

    The version of the OpenAPI document: 1.0.0-beta
    Contact: support@seaplane.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from pydantic import BaseModel, Field
from seaplane.gen.carrier.models.switch_nested1_switch import SwitchNested1Switch


class SwitchNested1(BaseModel):
    """
    Switch (flow control on condition) to many outputs
    """

    switch: SwitchNested1Switch = Field(...)
    __properties = ["switch"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SwitchNested1:
        """Create an instance of SwitchNested1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of switch
        if self.switch:
            _dict["switch"] = self.switch.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SwitchNested1:
        """Create an instance of SwitchNested1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SwitchNested1.parse_obj(obj)

        _obj = SwitchNested1.parse_obj(
            {
                "switch": SwitchNested1Switch.from_dict(obj.get("switch"))
                if obj.get("switch") is not None
                else None
            }
        )
        return _obj
