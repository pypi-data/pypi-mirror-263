[tool.poetry]
name = "a2"
version = "0.10.11"
description = "Package for predicting information about the weather from social media data as application 2 for maelstrom project"
authors = ["Kristian Ehlert <kristian.ehlert@4-cast.de>"]
packages = [{ include = "a2", from = "src" }]

[tool.poetry.dependencies]
# torch = {url = "https://download.pytorch.org/whl/cpu/torch-2.0.1%2Bcpu-cp310-cp310-linux_x86_64.whl", optional = true} # cannot upload this to package
python = ">=3.10,<3.12"

ipykernel = { version = "^6.27.1", optional = true }
ipywidgets = { version = "^7.7.1", optional = true }

pandas = "^1.4.2"
xarray = { extras = ["io"], version = "^2023.12.0", optional = true }
# Shapely = "^1.8.2"
pyproj = { version = "^3.3.1", optional = true }
# rioxarray = "^0.12.2"
# geopy = "^2.3.0"
# rasterio = "^1.3.3"
ecmwflibs = { version = "0.5.3", optional = true }
matplotlib = "^3.5.2"
plotly = { version = "^5.11.0", optional = true }
seaborn = { version = "^0.12.1", optional = true }

scikit-learn = "^1.1.2"
datasets = "^2.11.0"

mantik = { extras = ["mlflow"], version = "^0.4.4", optional = true }
pynvml = { version = "^11.5.0", optional = true }
sentencepiece = { version = "^0.1.98", optional = true }
transformers = { version = "^4.29.2", optional = true }
requests = { version = "^2.28.1", optional = true }
emoji = { version = "<1.0.0", optional = true }
spacymoji = { version = "^3.0.1", optional = true }
jsonlines = { version = "^3.1.0", optional = true }
tweepy = { version = "^4.10.0", optional = true }
bottleneck = { version = "^1.3.7", optional = true }
sentence-transformers = { version = "^2.3.1", optional = true }
nltk = { version = "^3.8.1", optional = true }
logging-tree = "^1.9"
netcdf4 = {version = "^1.6.5", optional = true}
tf-keras = {version = "^2.16.0", optional = true}
accelerate = {version = "^0.28.0", optional = true}
deep500 = {version = "^0.2.0", optional = true}

[[tool.poetry.source]]
name = "torch-source"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"


[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[tool.poetry.group.dev.dependencies]
urllib3 = "^1.26.12"
types-python-dateutil = "^2.8.18"
types-requests = "^2.28.0"
pandas-stubs = "^1.4.2"
pytest = "^7.1.2"
pytest-cov = "^3.0.0"
pytest-cases = "^3.6.13"
pytest-recording = "^0.12.1"
types-tqdm = "^4.64.4"
line-profiler = { extras = ["ipython"], version = "^3.5.1" }
pyflakes = "^2.5.0"
traceback-with-variables = "^2.0.4"
sacremoses = "^0.0.53"
deepdiff = "^5.8.1"
guppy3 = "^3.1.2"
memory-profiler = "^0.60.0"
pre-commit = "^2.20.0"
docformatter = "^1.5.0"
pytest-mpl = "^0.16.1"
responses = "0.18"
pytest-mock = "^3.10.0"
no-implicit-optional = "^1.4"
pytest-xdist = "^3.4.0"

[tool.poetry.group.eradata]
optional = true
[tool.poetry.group.eradata.dependencies]
cdsapi = "^0.6.1"


[tool.poetry.group.maelstrom]
optional = true
[tool.poetry.group.maelstrom.dependencies]
climetlab = "^0.14.23"
climetlab-plugin-tools = "^0.0.5"
setuptools = "^67.7.2"
wheel = "^0.40.0"
twine = "^4.0.2"

[tool.poetry.extras]
llama-chatbot = ["transformers", "sentencepiece"]
extend-exclude = ["helper_deep500.py"]
tweets = ["tweepy", "emoji", "requests", "jsonlines", "spacymoji"]
benchmarks = ["pynvml"]
coordinates = ["pyproj"]
fancy-plotting = ["plotly", "seaborn"]
notebooks = ["ipykernel", "ipywidgets"]
deberta = [
    "transformers",
    "sentencepiece",
    "bottleneck",
    "sentence-transformers",
    "nltk",
]
deberta-tf = [
    "sentencepiece",
    "bottleneck",
    "sentence-transformers",
    "nltk",
]
tracking = ["mantik"]
xarray-extra = ["xarray", "ecmwflibs", "netcdf4"]

[tool.poetry.group.parallel]
optional = true
[tool.poetry.group.parallel.dependencies]
p-tqdm = "^1.4.0"

[tool.poetry.group.train]
optional = true
[tool.poetry.group.train.dependencies]
xgboost = "^1.6.2"
catboost = "^1.1"
nltk = "^3.7"
sentence-transformers = "^2.2.2"
ray = { extras = ["tune"], version = "^2.2.0" }
tensorboard = "^2.11.0"

[tool.poetry.group.torch-cpu]
optional = true
[tool.poetry.group.torch-cpu.dependencies]
torch = { version = "2.0.0", source = "torch-source" } # for newest version, i.e. 2.0.1, torch with cpu backend notworking
accelerate = { version = ">=0.20.0" }


[tool.poetry.group.benchmarking]
optional = true
[tool.poetry.group.benchmarking.dependencies]
optimum = { extras = ["onnxruntime"], version = "^1.7.1" }

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
a2 = 'a2.cli.main:cli'

[tool.vulture]
min_confidence = 80
paths = ['src/']
exclude = [
    '**/cachedir/*',
    '**/.venv/*',
    'src/a2/training/tracking_hugging.py',
    'src/a2/training/training_performance.py',
    'src/a2/training/training_deep500.py',
    'src/tests/unit/twitter/test_locations.py',
]
ignore_names = ["control", "gpu"]
sort_by_size = true
verbose = false

[tool.mypy]
warn_unused_configs = true
exclude = [
    'src/a2/dataset/radar.py',
    'bootcamp2023/scripts/normalize_text_bootcamp.py',
    'src/a2/dataset/radar.py',
]

[[tool.mypy.overrides]]
module = [
    "shapely.geometry",
    "shapely",
    "tweepy",
    "matplotlib",
    "matplotlib.pyplot",
    "matplotlib.colors",
    "sklearn",
    "sklearn.metrics",
    "sklearn.model_selection",
    "transformers",
    "mlflow",
    "mantik",
    "memory_profiler",
    "p_tqdm",
    "uvloop",
    "PIL",
    "geopy",
    "requests",
]
ignore_missing_imports = true


[tool.poetry.group.webscraping.dependencies]
beautifulsoup4 = "^4.11.1"
html5lib = "^1.1"
urllib3 = "^1.26.12"

[tool.poetry.group.visulization.dependencies]
wordcloud = "^1.8.2"

[tool.poetry.group.clustering.dependencies]
openTSNE = "^0.6.2"
umap-learn = "^0.5.3"
[tool.black]
line-length = 120

[tool.flake8]
max-line-length = 120
per-file-ignores = [
    "__init__.py:F401,E501",
    "training_deep500.py:F403,F405",
    "training_performance.py:F403,F405",
    "src/a2/dataset/load_dataset.py:F821",
    "src/a2/dataset/radar.py:F821",
    "src/a2/dataset/utils_dataset.py:F821",
    "scripts/relevance_dataset_generation/mlflow_projects/generate_relevance_labels.py:E501",
    "scripts/finetune_deberta/mlflow_projects/deberta_rain_classifier/utils_energy_amd.py:F405,F403",
    "scripts/finetune_deberta/mlflow_projects/deberta_rain_classifier/finetune_deberta_classifier.py:E402",
]

[tool.pytest.ini_options]
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
