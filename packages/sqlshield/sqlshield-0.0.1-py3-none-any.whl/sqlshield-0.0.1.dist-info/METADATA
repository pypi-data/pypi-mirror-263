Metadata-Version: 2.1
Name: sqlshield
Version: 0.0.1
Summary: A Shield for your LLM generated SQL Queries. It provides an application level control for securing the database from SQL generated by LLM.
Author-email: Sandeep Giri <sandeepgiri@gmail.com>
Project-URL: Homepage, https://github.com/terno-ai/llm-sql-shield
Project-URL: Issues, https://github.com/terno-ai/llm-sql-shield/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE

# LLM SQL Shield

`llm-sql-shield` is A Shield for your LLM generated SQL Queries.

# Background
Large Language Models (LLM) prove to be extraordinally good when it comes to SQL query generation. This has lead to a revolution in generating SQL using large language models.

But there is a huge challenge, there is threat to database. The queries generted by LLMs can access the data that they aren't supposed to. No matter how you constraint the prompt is, it is always possible to jailbreak. Given the nature of LLMs, I don't think they can ever be controlled deterministically.

We can secure our database but it is too dificult to achieve it:

1. Databases are usually controlled and management by a different team. Therefore, any changes to the databases would take time.
2. Databases are usually accessed and modified by multiple different services. Therefore, making any change to database is dificult.
3. Database security is designed for handful of roles and users. Achieving the security for thousand of users is dificult.
4. Row based security can be achieved by predefined views but if we have to have dynamic view or parameterised views, it is not possible in databases as of now.
5. LLMs require the table names and column names to be self explainatory. To achieve the same, in database, you will have to clone the database and make modifications to it but then making the data sync in these tables becomes dificult task.

# LLM SQL Shield - Features
With SQL Shield, you can:

1. Limit the tables that you expose to LLM. 
2. You can also rename the tables as per your wish by setting proper `pub_name`
3. You can limit the columns from each table.
4. You can rename the columns to make them more meaningful by setting proper `pub_name`
5. You can limit the rows that can be accessed by providing `filters`.
6. The `filters` can have variables that you can fill in at the time of query generation and execution.

# Install
```
pip install sqlshield
pip install openai
pip install sqlalchemy

```
# Example

Here is an example

```

import sqlalchemy
from sqlalchemy import inspect
from sqlalchemy import text

from sqlshield.models import *
from sqlshield.shield import *
import os

# TODO: Specify correct OpenAI key
os.environ["OPENAI_API_KEY"] = 'sk-XXXXXXXXX'

# TODO: You can download this SQLite3 DB file: https://github.com/terno-ai/llm-sql-shield/raw/main/doc/db/chinook.db
# And save it in your current directory
# Connect to DB
engine = sqlalchemy.create_engine('sqlite:///chinook.db')
inspector = inspect(engine)

# Load default DB
mDb = MDatabase.from_inspector(inspector)

mDb.keep_only_tables(set(['Customer', 'Employee', 'Invoice', 'InvoiceLine']))

tables = mDb.get_table_dict()
customer_table = tables['Customer']

# Change Name of table
customer_table.pub_name = 'Customers'

# Add a filter
customer_table.filters = 'where company = {company}'

# Drop some colums
customer_table.drop_columns(set(['Address']))

# Column renaming

question = "Show me all customers."

from openai import OpenAI
client = OpenAI()

schema_generated = mDb.generate_schema()
print('The following schema was generated: ', schema_generated)

response = client.chat.completions.create(
    model="gpt-3.5-turbo",
    messages=[
        {"role": "system", "content": "You are an SQL Analyst. Your role is to generate the SQL given a question. Only generate SQL nothing else."},
        {"role": "user", "content": question},
        {"role": "assistant", "content": "The tables schema is follows: " + schema_generated},
    ]
)

aSql = response.choices[0].message.content
print('SQL Generated by LLM: ', aSql)

d = {'company':'\'Telus\''}
sess = Session(mDb, d)
gSQL = sess.generateNativeSQL(aSql)
print("Native SQL: ", gSQL)

print(" ===================== ")
with engine.connect() as con:
    rs = con.execute(text(gSQL))
    for row in rs:
        print(row)

```

