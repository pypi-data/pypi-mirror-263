# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ApiExtensionDestinationArgs',
    'ApiExtensionTriggerArgs',
    'AttributeGroupAttributeArgs',
    'CartDiscountCustomArgs',
    'CartDiscountTargetArgs',
    'CartDiscountValueArgs',
    'CartDiscountValueMoneyArgs',
    'CategoryAssetArgs',
    'CategoryAssetSourceArgs',
    'CategoryAssetSourceDimensionsArgs',
    'CategoryCustomArgs',
    'ChannelAddressArgs',
    'ChannelCustomArgs',
    'ChannelGeolocationArgs',
    'CustomerGroupCustomArgs',
    'DiscountCodeCustomArgs',
    'ProductDiscountValueArgs',
    'ProductDiscountValueMoneyArgs',
    'ProductTypeAttributeArgs',
    'ProductTypeAttributeTypeArgs',
    'ProductTypeAttributeTypeElementType2Args',
    'ProductTypeAttributeTypeElementType2LocalizedValueArgs',
    'ProductTypeAttributeTypeElementType2ValueArgs',
    'ProductTypeAttributeTypeLocalizedValueArgs',
    'ProductTypeAttributeTypeValueArgs',
    'ProjectSettingsCartsArgs',
    'ProjectSettingsExternalOauthArgs',
    'ProjectSettingsMessagesArgs',
    'ProjectSettingsShippingRateCartClassificationValueArgs',
    'ShippingMethodCustomArgs',
    'ShippingZoneLocationArgs',
    'ShippingZoneRateFreeAboveArgs',
    'ShippingZoneRatePriceArgs',
    'ShippingZoneRateShippingRatePriceTierArgs',
    'ShippingZoneRateShippingRatePriceTierPriceArgs',
    'ShippingZoneRateShippingRatePriceTierPriceFunctionArgs',
    'StoreCustomArgs',
    'StoreProductSelectionArgs',
    'SubscriptionChangeArgs',
    'SubscriptionDestinationArgs',
    'SubscriptionFormatArgs',
    'SubscriptionMessageArgs',
    'TaxCategoryRateSubRateArgs',
    'TypeFieldArgs',
    'TypeFieldTypeArgs',
    'TypeFieldTypeElementType2Args',
    'TypeFieldTypeElementType2LocalizedValueArgs',
    'TypeFieldTypeElementType2ValueArgs',
    'TypeFieldTypeLocalizedValueArgs',
    'TypeFieldTypeValueArgs',
]

@pulumi.input_type
class ApiExtensionDestinationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 access_secret: Optional[pulumi.Input[str]] = None,
                 arn: Optional[pulumi.Input[str]] = None,
                 authorization_header: Optional[pulumi.Input[str]] = None,
                 azure_authentication: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if access_secret is not None:
            pulumi.set(__self__, "access_secret", access_secret)
        if arn is not None:
            pulumi.set(__self__, "arn", arn)
        if authorization_header is not None:
            pulumi.set(__self__, "authorization_header", authorization_header)
        if azure_authentication is not None:
            pulumi.set(__self__, "azure_authentication", azure_authentication)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="accessSecret")
    def access_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_secret")

    @access_secret.setter
    def access_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_secret", value)

    @property
    @pulumi.getter
    def arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "arn")

    @arn.setter
    def arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arn", value)

    @property
    @pulumi.getter(name="authorizationHeader")
    def authorization_header(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "authorization_header")

    @authorization_header.setter
    def authorization_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_header", value)

    @property
    @pulumi.getter(name="azureAuthentication")
    def azure_authentication(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_authentication")

    @azure_authentication.setter
    def azure_authentication(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_authentication", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ApiExtensionTriggerArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 resource_type_id: pulumi.Input[str],
                 condition: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: Currently, Create and Update are supported
        :param pulumi.Input[str] resource_type_id: Currently, cart, order, payment, and customer are supported
        :param pulumi.Input[str] condition: Valid predicate that controls the conditions under which the API Extension is called.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "resource_type_id", resource_type_id)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Currently, Create and Update are supported
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="resourceTypeId")
    def resource_type_id(self) -> pulumi.Input[str]:
        """
        Currently, cart, order, payment, and customer are supported
        """
        return pulumi.get(self, "resource_type_id")

    @resource_type_id.setter
    def resource_type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type_id", value)

    @property
    @pulumi.getter
    def condition(self) -> Optional[pulumi.Input[str]]:
        """
        Valid predicate that controls the conditions under which the API Extension is called.
        """
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "condition", value)


@pulumi.input_type
class AttributeGroupAttributeArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str]):
        """
        :param pulumi.Input[str] key: The Attribute's name as given in its AttributeDefinition.
        """
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The Attribute's name as given in its AttributeDefinition.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class CartDiscountCustomArgs:
    def __init__(__self__, *,
                 type_id: pulumi.Input[str],
                 fields: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] fields: Custom fields for this resource. Note that the values need to be provided as JSON encoded strings: `my-value = jsonencode({"key": "value"})`
        """
        pulumi.set(__self__, "type_id", type_id)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type_id")

    @type_id.setter
    def type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_id", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Custom fields for this resource. Note that the values need to be provided as JSON encoded strings: `my-value = jsonencode({"key": "value"})`
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "fields", value)


@pulumi.input_type
class CartDiscountTargetArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 discounted_quantity: Optional[pulumi.Input[int]] = None,
                 max_occurrence: Optional[pulumi.Input[int]] = None,
                 predicate: Optional[pulumi.Input[str]] = None,
                 selection_mode: Optional[pulumi.Input[str]] = None,
                 trigger_quantity: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] type: Supports lineItems, customLineItems, multiBuyLineItems, multiBuyCustomLineItems, shipping or totalPrice
        :param pulumi.Input[int] discounted_quantity: MultiBuyLineItems or MultiBuyCustomLineItems target specific fields. If set for another target the value will be ignored
        :param pulumi.Input[int] max_occurrence: MultiBuyLineItems or MultiBuyCustomLineItems target specific fields. If set for another target the value will be ignored
        :param pulumi.Input[str] predicate: LineItems, CustomLineItems, MultiBuyLineItems or MultiBuyCustomLineItems target specific fields. If set for another target the value will be ignored
        :param pulumi.Input[str] selection_mode: MultiBuyLineItems or MultiBuyCustomLineItems target specific fields. Can be either Cheapest or MostExpensive. If set for another target the value will be ignored
        :param pulumi.Input[int] trigger_quantity: MultiBuyLineItems or MultiBuyCustomLineItems target specific fields. If set for another target the value will be ignored
        """
        pulumi.set(__self__, "type", type)
        if discounted_quantity is not None:
            pulumi.set(__self__, "discounted_quantity", discounted_quantity)
        if max_occurrence is not None:
            pulumi.set(__self__, "max_occurrence", max_occurrence)
        if predicate is not None:
            pulumi.set(__self__, "predicate", predicate)
        if selection_mode is not None:
            pulumi.set(__self__, "selection_mode", selection_mode)
        if trigger_quantity is not None:
            pulumi.set(__self__, "trigger_quantity", trigger_quantity)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Supports lineItems, customLineItems, multiBuyLineItems, multiBuyCustomLineItems, shipping or totalPrice
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="discountedQuantity")
    def discounted_quantity(self) -> Optional[pulumi.Input[int]]:
        """
        MultiBuyLineItems or MultiBuyCustomLineItems target specific fields. If set for another target the value will be ignored
        """
        return pulumi.get(self, "discounted_quantity")

    @discounted_quantity.setter
    def discounted_quantity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "discounted_quantity", value)

    @property
    @pulumi.getter(name="maxOccurrence")
    def max_occurrence(self) -> Optional[pulumi.Input[int]]:
        """
        MultiBuyLineItems or MultiBuyCustomLineItems target specific fields. If set for another target the value will be ignored
        """
        return pulumi.get(self, "max_occurrence")

    @max_occurrence.setter
    def max_occurrence(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_occurrence", value)

    @property
    @pulumi.getter
    def predicate(self) -> Optional[pulumi.Input[str]]:
        """
        LineItems, CustomLineItems, MultiBuyLineItems or MultiBuyCustomLineItems target specific fields. If set for another target the value will be ignored
        """
        return pulumi.get(self, "predicate")

    @predicate.setter
    def predicate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "predicate", value)

    @property
    @pulumi.getter(name="selectionMode")
    def selection_mode(self) -> Optional[pulumi.Input[str]]:
        """
        MultiBuyLineItems or MultiBuyCustomLineItems target specific fields. Can be either Cheapest or MostExpensive. If set for another target the value will be ignored
        """
        return pulumi.get(self, "selection_mode")

    @selection_mode.setter
    def selection_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "selection_mode", value)

    @property
    @pulumi.getter(name="triggerQuantity")
    def trigger_quantity(self) -> Optional[pulumi.Input[int]]:
        """
        MultiBuyLineItems or MultiBuyCustomLineItems target specific fields. If set for another target the value will be ignored
        """
        return pulumi.get(self, "trigger_quantity")

    @trigger_quantity.setter
    def trigger_quantity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "trigger_quantity", value)


@pulumi.input_type
class CartDiscountValueArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 distribution_channel_id: Optional[pulumi.Input[str]] = None,
                 monies: Optional[pulumi.Input[Sequence[pulumi.Input['CartDiscountValueMoneyArgs']]]] = None,
                 permyriad: Optional[pulumi.Input[int]] = None,
                 product_id: Optional[pulumi.Input[str]] = None,
                 supply_channel_id: Optional[pulumi.Input[str]] = None,
                 variant_id: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] type: Currently supports absolute/relative/giftLineItem
        :param pulumi.Input[str] distribution_channel_id: Channel must have the role ProductDistribution. Optional when value type is giftLineItem
        :param pulumi.Input[Sequence[pulumi.Input['CartDiscountValueMoneyArgs']]] monies: Absolute discount specific fields
        :param pulumi.Input[int] permyriad: Relative discount specific fields
        :param pulumi.Input[str] product_id: ResourceIdentifier of a Product. Required when value type is giftLineItem
        :param pulumi.Input[str] supply_channel_id: Channel must have the role InventorySupply. Optional when value type is giftLineItem
        :param pulumi.Input[int] variant_id: ProductVariant of the Product. Required when value type is giftLineItem
        """
        pulumi.set(__self__, "type", type)
        if distribution_channel_id is not None:
            pulumi.set(__self__, "distribution_channel_id", distribution_channel_id)
        if monies is not None:
            pulumi.set(__self__, "monies", monies)
        if permyriad is not None:
            pulumi.set(__self__, "permyriad", permyriad)
        if product_id is not None:
            pulumi.set(__self__, "product_id", product_id)
        if supply_channel_id is not None:
            pulumi.set(__self__, "supply_channel_id", supply_channel_id)
        if variant_id is not None:
            pulumi.set(__self__, "variant_id", variant_id)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Currently supports absolute/relative/giftLineItem
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="distributionChannelId")
    def distribution_channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        Channel must have the role ProductDistribution. Optional when value type is giftLineItem
        """
        return pulumi.get(self, "distribution_channel_id")

    @distribution_channel_id.setter
    def distribution_channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "distribution_channel_id", value)

    @property
    @pulumi.getter
    def monies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CartDiscountValueMoneyArgs']]]]:
        """
        Absolute discount specific fields
        """
        return pulumi.get(self, "monies")

    @monies.setter
    def monies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CartDiscountValueMoneyArgs']]]]):
        pulumi.set(self, "monies", value)

    @property
    @pulumi.getter
    def permyriad(self) -> Optional[pulumi.Input[int]]:
        """
        Relative discount specific fields
        """
        return pulumi.get(self, "permyriad")

    @permyriad.setter
    def permyriad(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "permyriad", value)

    @property
    @pulumi.getter(name="productId")
    def product_id(self) -> Optional[pulumi.Input[str]]:
        """
        ResourceIdentifier of a Product. Required when value type is giftLineItem
        """
        return pulumi.get(self, "product_id")

    @product_id.setter
    def product_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "product_id", value)

    @property
    @pulumi.getter(name="supplyChannelId")
    def supply_channel_id(self) -> Optional[pulumi.Input[str]]:
        """
        Channel must have the role InventorySupply. Optional when value type is giftLineItem
        """
        return pulumi.get(self, "supply_channel_id")

    @supply_channel_id.setter
    def supply_channel_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "supply_channel_id", value)

    @property
    @pulumi.getter(name="variantId")
    def variant_id(self) -> Optional[pulumi.Input[int]]:
        """
        ProductVariant of the Product. Required when value type is giftLineItem
        """
        return pulumi.get(self, "variant_id")

    @variant_id.setter
    def variant_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "variant_id", value)


@pulumi.input_type
class CartDiscountValueMoneyArgs:
    def __init__(__self__, *,
                 cent_amount: pulumi.Input[int],
                 currency_code: pulumi.Input[str]):
        """
        :param pulumi.Input[int] cent_amount: The amount in cents (the smallest indivisible unit of the currency)
        :param pulumi.Input[str] currency_code: The currency code compliant to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)
        """
        pulumi.set(__self__, "cent_amount", cent_amount)
        pulumi.set(__self__, "currency_code", currency_code)

    @property
    @pulumi.getter(name="centAmount")
    def cent_amount(self) -> pulumi.Input[int]:
        """
        The amount in cents (the smallest indivisible unit of the currency)
        """
        return pulumi.get(self, "cent_amount")

    @cent_amount.setter
    def cent_amount(self, value: pulumi.Input[int]):
        pulumi.set(self, "cent_amount", value)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> pulumi.Input[str]:
        """
        The currency code compliant to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)
        """
        return pulumi.get(self, "currency_code")

    @currency_code.setter
    def currency_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "currency_code", value)


@pulumi.input_type
class CategoryAssetArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[Mapping[str, Any]],
                 description: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input['CategoryAssetSourceArgs']]]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] key: Optional User-defined identifier for the asset. Asset keys are unique inside their container (in this case the category)
        :param pulumi.Input[Sequence[pulumi.Input['CategoryAssetSourceArgs']]] sources: Array of AssetSource, Has at least one entry
        """
        pulumi.set(__self__, "name", name)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Optional User-defined identifier for the asset. Asset keys are unique inside their container (in this case the category)
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CategoryAssetSourceArgs']]]]:
        """
        Array of AssetSource, Has at least one entry
        """
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CategoryAssetSourceArgs']]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)


@pulumi.input_type
class CategoryAssetSourceArgs:
    def __init__(__self__, *,
                 uri: pulumi.Input[str],
                 content_type: Optional[pulumi.Input[str]] = None,
                 dimensions: Optional[pulumi.Input['CategoryAssetSourceDimensionsArgs']] = None,
                 key: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] key: Unique identifier, must be unique within the Asset
        """
        pulumi.set(__self__, "uri", uri)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if dimensions is not None:
            pulumi.set(__self__, "dimensions", dimensions)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def uri(self) -> pulumi.Input[str]:
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "uri", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter
    def dimensions(self) -> Optional[pulumi.Input['CategoryAssetSourceDimensionsArgs']]:
        return pulumi.get(self, "dimensions")

    @dimensions.setter
    def dimensions(self, value: Optional[pulumi.Input['CategoryAssetSourceDimensionsArgs']]):
        pulumi.set(self, "dimensions", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier, must be unique within the Asset
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class CategoryAssetSourceDimensionsArgs:
    def __init__(__self__, *,
                 h: pulumi.Input[int],
                 w: pulumi.Input[int]):
        """
        :param pulumi.Input[int] h: The height of the asset source
        :param pulumi.Input[int] w: The width of the asset source
        """
        pulumi.set(__self__, "h", h)
        pulumi.set(__self__, "w", w)

    @property
    @pulumi.getter
    def h(self) -> pulumi.Input[int]:
        """
        The height of the asset source
        """
        return pulumi.get(self, "h")

    @h.setter
    def h(self, value: pulumi.Input[int]):
        pulumi.set(self, "h", value)

    @property
    @pulumi.getter
    def w(self) -> pulumi.Input[int]:
        """
        The width of the asset source
        """
        return pulumi.get(self, "w")

    @w.setter
    def w(self, value: pulumi.Input[int]):
        pulumi.set(self, "w", value)


@pulumi.input_type
class CategoryCustomArgs:
    def __init__(__self__, *,
                 type_id: pulumi.Input[str],
                 fields: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] fields: Custom fields for this resource. Note that the values need to be provided as JSON encoded strings: `my-value = jsonencode({"key": "value"})`
        """
        pulumi.set(__self__, "type_id", type_id)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type_id")

    @type_id.setter
    def type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_id", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Custom fields for this resource. Note that the values need to be provided as JSON encoded strings: `my-value = jsonencode({"key": "value"})`
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "fields", value)


@pulumi.input_type
class ChannelAddressArgs:
    def __init__(__self__, *,
                 country: pulumi.Input[str],
                 additional_address_info: Optional[pulumi.Input[str]] = None,
                 additional_street_info: Optional[pulumi.Input[str]] = None,
                 apartment: Optional[pulumi.Input[str]] = None,
                 building: Optional[pulumi.Input[str]] = None,
                 city: Optional[pulumi.Input[str]] = None,
                 company: Optional[pulumi.Input[str]] = None,
                 department: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 fax: Optional[pulumi.Input[str]] = None,
                 first_name: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 last_name: Optional[pulumi.Input[str]] = None,
                 mobile: Optional[pulumi.Input[str]] = None,
                 phone: Optional[pulumi.Input[str]] = None,
                 po_box: Optional[pulumi.Input[str]] = None,
                 postal_code: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 salutation: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 street_name: Optional[pulumi.Input[str]] = None,
                 street_number: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "country", country)
        if additional_address_info is not None:
            pulumi.set(__self__, "additional_address_info", additional_address_info)
        if additional_street_info is not None:
            pulumi.set(__self__, "additional_street_info", additional_street_info)
        if apartment is not None:
            pulumi.set(__self__, "apartment", apartment)
        if building is not None:
            pulumi.set(__self__, "building", building)
        if city is not None:
            pulumi.set(__self__, "city", city)
        if company is not None:
            pulumi.set(__self__, "company", company)
        if department is not None:
            pulumi.set(__self__, "department", department)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if fax is not None:
            pulumi.set(__self__, "fax", fax)
        if first_name is not None:
            pulumi.set(__self__, "first_name", first_name)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if last_name is not None:
            pulumi.set(__self__, "last_name", last_name)
        if mobile is not None:
            pulumi.set(__self__, "mobile", mobile)
        if phone is not None:
            pulumi.set(__self__, "phone", phone)
        if po_box is not None:
            pulumi.set(__self__, "po_box", po_box)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if salutation is not None:
            pulumi.set(__self__, "salutation", salutation)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if street_name is not None:
            pulumi.set(__self__, "street_name", street_name)
        if street_number is not None:
            pulumi.set(__self__, "street_number", street_number)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def country(self) -> pulumi.Input[str]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: pulumi.Input[str]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="additionalAddressInfo")
    def additional_address_info(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_address_info")

    @additional_address_info.setter
    def additional_address_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_address_info", value)

    @property
    @pulumi.getter(name="additionalStreetInfo")
    def additional_street_info(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_street_info")

    @additional_street_info.setter
    def additional_street_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_street_info", value)

    @property
    @pulumi.getter
    def apartment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "apartment")

    @apartment.setter
    def apartment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "apartment", value)

    @property
    @pulumi.getter
    def building(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "building")

    @building.setter
    def building(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "building", value)

    @property
    @pulumi.getter
    def city(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "city")

    @city.setter
    def city(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "city", value)

    @property
    @pulumi.getter
    def company(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "company")

    @company.setter
    def company(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "company", value)

    @property
    @pulumi.getter
    def department(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "department")

    @department.setter
    def department(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "department", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter
    def fax(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fax")

    @fax.setter
    def fax(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fax", value)

    @property
    @pulumi.getter(name="firstName")
    def first_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "first_name")

    @first_name.setter
    def first_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "first_name", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="lastName")
    def last_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "last_name")

    @last_name.setter
    def last_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_name", value)

    @property
    @pulumi.getter
    def mobile(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mobile")

    @mobile.setter
    def mobile(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mobile", value)

    @property
    @pulumi.getter
    def phone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "phone")

    @phone.setter
    def phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "phone", value)

    @property
    @pulumi.getter(name="poBox")
    def po_box(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "po_box")

    @po_box.setter
    def po_box(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "po_box", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def salutation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "salutation")

    @salutation.setter
    def salutation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "salutation", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="streetName")
    def street_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "street_name")

    @street_name.setter
    def street_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "street_name", value)

    @property
    @pulumi.getter(name="streetNumber")
    def street_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "street_number")

    @street_number.setter
    def street_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "street_number", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class ChannelCustomArgs:
    def __init__(__self__, *,
                 type_id: pulumi.Input[str],
                 fields: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] fields: Custom fields for this resource. Note that the values need to be provided as JSON encoded strings: `my-value = jsonencode({"key": "value"})`
        """
        pulumi.set(__self__, "type_id", type_id)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type_id")

    @type_id.setter
    def type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_id", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Custom fields for this resource. Note that the values need to be provided as JSON encoded strings: `my-value = jsonencode({"key": "value"})`
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "fields", value)


@pulumi.input_type
class ChannelGeolocationArgs:
    def __init__(__self__, *,
                 coordinates: pulumi.Input[Sequence[pulumi.Input[float]]]):
        pulumi.set(__self__, "coordinates", coordinates)

    @property
    @pulumi.getter
    def coordinates(self) -> pulumi.Input[Sequence[pulumi.Input[float]]]:
        return pulumi.get(self, "coordinates")

    @coordinates.setter
    def coordinates(self, value: pulumi.Input[Sequence[pulumi.Input[float]]]):
        pulumi.set(self, "coordinates", value)


@pulumi.input_type
class CustomerGroupCustomArgs:
    def __init__(__self__, *,
                 type_id: pulumi.Input[str],
                 fields: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] fields: Custom fields for this resource. Note that the values need to be provided as JSON encoded strings: `my-value = jsonencode({"key": "value"})`
        """
        pulumi.set(__self__, "type_id", type_id)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type_id")

    @type_id.setter
    def type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_id", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Custom fields for this resource. Note that the values need to be provided as JSON encoded strings: `my-value = jsonencode({"key": "value"})`
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "fields", value)


@pulumi.input_type
class DiscountCodeCustomArgs:
    def __init__(__self__, *,
                 type_id: pulumi.Input[str],
                 fields: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] fields: Custom fields for this resource. Note that the values need to be provided as JSON encoded strings: `my-value = jsonencode({"key": "value"})`
        """
        pulumi.set(__self__, "type_id", type_id)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type_id")

    @type_id.setter
    def type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_id", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Custom fields for this resource. Note that the values need to be provided as JSON encoded strings: `my-value = jsonencode({"key": "value"})`
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "fields", value)


@pulumi.input_type
class ProductDiscountValueArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 monies: Optional[pulumi.Input[Sequence[pulumi.Input['ProductDiscountValueMoneyArgs']]]] = None,
                 permyriad: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[str] type: Currently supports absolute/relative/external
        :param pulumi.Input[Sequence[pulumi.Input['ProductDiscountValueMoneyArgs']]] monies: Absolute discount specific fields
        :param pulumi.Input[int] permyriad: Relative discount specific fields
        """
        pulumi.set(__self__, "type", type)
        if monies is not None:
            pulumi.set(__self__, "monies", monies)
        if permyriad is not None:
            pulumi.set(__self__, "permyriad", permyriad)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Currently supports absolute/relative/external
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def monies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProductDiscountValueMoneyArgs']]]]:
        """
        Absolute discount specific fields
        """
        return pulumi.get(self, "monies")

    @monies.setter
    def monies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProductDiscountValueMoneyArgs']]]]):
        pulumi.set(self, "monies", value)

    @property
    @pulumi.getter
    def permyriad(self) -> Optional[pulumi.Input[int]]:
        """
        Relative discount specific fields
        """
        return pulumi.get(self, "permyriad")

    @permyriad.setter
    def permyriad(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "permyriad", value)


@pulumi.input_type
class ProductDiscountValueMoneyArgs:
    def __init__(__self__, *,
                 cent_amount: pulumi.Input[int],
                 currency_code: pulumi.Input[str],
                 fraction_digits: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] cent_amount: The amount in cents (the smallest indivisible unit of the currency)
        :param pulumi.Input[str] currency_code: The currency code compliant to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)
        :param pulumi.Input[int] fraction_digits: The number of default fraction digits for the given currency, like 2 for EUR or 0 for JPY
        """
        pulumi.set(__self__, "cent_amount", cent_amount)
        pulumi.set(__self__, "currency_code", currency_code)
        if fraction_digits is not None:
            pulumi.set(__self__, "fraction_digits", fraction_digits)

    @property
    @pulumi.getter(name="centAmount")
    def cent_amount(self) -> pulumi.Input[int]:
        """
        The amount in cents (the smallest indivisible unit of the currency)
        """
        return pulumi.get(self, "cent_amount")

    @cent_amount.setter
    def cent_amount(self, value: pulumi.Input[int]):
        pulumi.set(self, "cent_amount", value)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> pulumi.Input[str]:
        """
        The currency code compliant to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)
        """
        return pulumi.get(self, "currency_code")

    @currency_code.setter
    def currency_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "currency_code", value)

    @property
    @pulumi.getter(name="fractionDigits")
    def fraction_digits(self) -> Optional[pulumi.Input[int]]:
        """
        The number of default fraction digits for the given currency, like 2 for EUR or 0 for JPY
        """
        return pulumi.get(self, "fraction_digits")

    @fraction_digits.setter
    def fraction_digits(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "fraction_digits", value)


@pulumi.input_type
class ProductTypeAttributeArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[Mapping[str, Any]],
                 name: pulumi.Input[str],
                 type: pulumi.Input['ProductTypeAttributeTypeArgs'],
                 constraint: Optional[pulumi.Input[str]] = None,
                 input_hint: Optional[pulumi.Input[str]] = None,
                 input_tip: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 required: Optional[pulumi.Input[bool]] = None,
                 searchable: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] label: A human-readable label for the attribute
        :param pulumi.Input[str] name: The unique name of the attribute used in the API. The name must be between two and 256 characters long and can contain the ASCII letters A to Z in lowercase or uppercase, digits, underscores (_) and the hyphen-minus (-).
               When using the same name for an attribute in two or more product types all fields of the AttributeDefinition of this attribute need to be the same across the product types, otherwise an AttributeDefinitionAlreadyExists error code will be returned. An exception to this are the values of an enum or lenum type and sets thereof
        :param pulumi.Input['ProductTypeAttributeTypeArgs'] type: [AttributeType](https://docs.commercetools.com/api/projects/productTypes#attributetype)
        :param pulumi.Input[str] constraint: Describes how an attribute or a set of attributes should be validated across all variants of a product. See also [Attribute Constraint](https://docs.commercetools.com/api/projects/productTypes#attributeconstraint-enum)
        :param pulumi.Input[str] input_hint: Provides a visual representation type for this attribute. only relevant for text-based attribute types like TextType and LocalizableTextType
        :param pulumi.Input[Mapping[str, Any]] input_tip: Additional information about the attribute that aids content managers when setting product details
        :param pulumi.Input[bool] required: Whether the attribute is required to have a value
        :param pulumi.Input[bool] searchable: Whether the attribute's values should generally be activated in product search
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if constraint is not None:
            pulumi.set(__self__, "constraint", constraint)
        if input_hint is not None:
            pulumi.set(__self__, "input_hint", input_hint)
        if input_tip is not None:
            pulumi.set(__self__, "input_tip", input_tip)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if searchable is not None:
            pulumi.set(__self__, "searchable", searchable)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[Mapping[str, Any]]:
        """
        A human-readable label for the attribute
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The unique name of the attribute used in the API. The name must be between two and 256 characters long and can contain the ASCII letters A to Z in lowercase or uppercase, digits, underscores (_) and the hyphen-minus (-).
        When using the same name for an attribute in two or more product types all fields of the AttributeDefinition of this attribute need to be the same across the product types, otherwise an AttributeDefinitionAlreadyExists error code will be returned. An exception to this are the values of an enum or lenum type and sets thereof
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['ProductTypeAttributeTypeArgs']:
        """
        [AttributeType](https://docs.commercetools.com/api/projects/productTypes#attributetype)
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['ProductTypeAttributeTypeArgs']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def constraint(self) -> Optional[pulumi.Input[str]]:
        """
        Describes how an attribute or a set of attributes should be validated across all variants of a product. See also [Attribute Constraint](https://docs.commercetools.com/api/projects/productTypes#attributeconstraint-enum)
        """
        return pulumi.get(self, "constraint")

    @constraint.setter
    def constraint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "constraint", value)

    @property
    @pulumi.getter(name="inputHint")
    def input_hint(self) -> Optional[pulumi.Input[str]]:
        """
        Provides a visual representation type for this attribute. only relevant for text-based attribute types like TextType and LocalizableTextType
        """
        return pulumi.get(self, "input_hint")

    @input_hint.setter
    def input_hint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_hint", value)

    @property
    @pulumi.getter(name="inputTip")
    def input_tip(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Additional information about the attribute that aids content managers when setting product details
        """
        return pulumi.get(self, "input_tip")

    @input_tip.setter
    def input_tip(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "input_tip", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the attribute is required to have a value
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)

    @property
    @pulumi.getter
    def searchable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the attribute's values should generally be activated in product search
        """
        return pulumi.get(self, "searchable")

    @searchable.setter
    def searchable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "searchable", value)


@pulumi.input_type
class ProductTypeAttributeTypeArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 element_type2: Optional[pulumi.Input['ProductTypeAttributeTypeElementType2Args']] = None,
                 localized_values: Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeLocalizedValueArgs']]]] = None,
                 reference_type_id: Optional[pulumi.Input[str]] = None,
                 type_reference: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeValueArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the field type. Some types require extra fields to be set. Note that changing the type after creating is not supported. You need to delete the attribute and re-add it
        :param pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeLocalizedValueArgs']]] localized_values: Localized values for the `lenum` type.
        :param pulumi.Input[str] reference_type_id: Resource type the Custom Field can reference. Required when type is `reference`
        :param pulumi.Input[str] type_reference: Reference to another product type. Required when type is `nested`.
        :param pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeValueArgs']]] values: Values for the `enum` type.
        """
        pulumi.set(__self__, "name", name)
        if element_type2 is not None:
            pulumi.set(__self__, "element_type2", element_type2)
        if localized_values is not None:
            pulumi.set(__self__, "localized_values", localized_values)
        if reference_type_id is not None:
            pulumi.set(__self__, "reference_type_id", reference_type_id)
        if type_reference is not None:
            pulumi.set(__self__, "type_reference", type_reference)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the field type. Some types require extra fields to be set. Note that changing the type after creating is not supported. You need to delete the attribute and re-add it
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ElementType2")
    def element_type2(self) -> Optional[pulumi.Input['ProductTypeAttributeTypeElementType2Args']]:
        return pulumi.get(self, "element_type2")

    @element_type2.setter
    def element_type2(self, value: Optional[pulumi.Input['ProductTypeAttributeTypeElementType2Args']]):
        pulumi.set(self, "element_type2", value)

    @property
    @pulumi.getter(name="localizedValues")
    def localized_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeLocalizedValueArgs']]]]:
        """
        Localized values for the `lenum` type.
        """
        return pulumi.get(self, "localized_values")

    @localized_values.setter
    def localized_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeLocalizedValueArgs']]]]):
        pulumi.set(self, "localized_values", value)

    @property
    @pulumi.getter(name="referenceTypeId")
    def reference_type_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource type the Custom Field can reference. Required when type is `reference`
        """
        return pulumi.get(self, "reference_type_id")

    @reference_type_id.setter
    def reference_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reference_type_id", value)

    @property
    @pulumi.getter(name="typeReference")
    def type_reference(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to another product type. Required when type is `nested`.
        """
        return pulumi.get(self, "type_reference")

    @type_reference.setter
    def type_reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type_reference", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeValueArgs']]]]:
        """
        Values for the `enum` type.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeValueArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ProductTypeAttributeTypeElementType2Args:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 localized_values: Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeElementType2LocalizedValueArgs']]]] = None,
                 reference_type_id: Optional[pulumi.Input[str]] = None,
                 type_reference: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeElementType2ValueArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the field type. Some types require extra fields to be set. Note that changing the type after creating is not supported. You need to delete the attribute and re-add it
        :param pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeElementType2LocalizedValueArgs']]] localized_values: Localized values for the `lenum` type.
        :param pulumi.Input[str] reference_type_id: Resource type the Custom Field can reference. Required when type is `reference`
        :param pulumi.Input[str] type_reference: Reference to another product type. Required when type is `nested`.
        :param pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeElementType2ValueArgs']]] values: Values for the `enum` type.
        """
        pulumi.set(__self__, "name", name)
        if localized_values is not None:
            pulumi.set(__self__, "localized_values", localized_values)
        if reference_type_id is not None:
            pulumi.set(__self__, "reference_type_id", reference_type_id)
        if type_reference is not None:
            pulumi.set(__self__, "type_reference", type_reference)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the field type. Some types require extra fields to be set. Note that changing the type after creating is not supported. You need to delete the attribute and re-add it
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="localizedValues")
    def localized_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeElementType2LocalizedValueArgs']]]]:
        """
        Localized values for the `lenum` type.
        """
        return pulumi.get(self, "localized_values")

    @localized_values.setter
    def localized_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeElementType2LocalizedValueArgs']]]]):
        pulumi.set(self, "localized_values", value)

    @property
    @pulumi.getter(name="referenceTypeId")
    def reference_type_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource type the Custom Field can reference. Required when type is `reference`
        """
        return pulumi.get(self, "reference_type_id")

    @reference_type_id.setter
    def reference_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reference_type_id", value)

    @property
    @pulumi.getter(name="typeReference")
    def type_reference(self) -> Optional[pulumi.Input[str]]:
        """
        Reference to another product type. Required when type is `nested`.
        """
        return pulumi.get(self, "type_reference")

    @type_reference.setter
    def type_reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type_reference", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeElementType2ValueArgs']]]]:
        """
        Values for the `enum` type.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ProductTypeAttributeTypeElementType2ValueArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ProductTypeAttributeTypeElementType2LocalizedValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class ProductTypeAttributeTypeElementType2ValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class ProductTypeAttributeTypeLocalizedValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class ProductTypeAttributeTypeValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class ProjectSettingsCartsArgs:
    def __init__(__self__, *,
                 country_tax_rate_fallback_enabled: Optional[pulumi.Input[bool]] = None,
                 delete_days_after_last_modification: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[bool] country_tax_rate_fallback_enabled: Indicates if country - no state tax rate fallback should be used when a shipping address state is not explicitly covered in the rates lists of all tax categories of a cart line items
        :param pulumi.Input[int] delete_days_after_last_modification: Number - Optional The default value for the deleteDaysAfterLastModification parameter of the CartDraft. Initially set to 90 for projects created after December 2019.
        """
        if country_tax_rate_fallback_enabled is not None:
            pulumi.set(__self__, "country_tax_rate_fallback_enabled", country_tax_rate_fallback_enabled)
        if delete_days_after_last_modification is not None:
            pulumi.set(__self__, "delete_days_after_last_modification", delete_days_after_last_modification)

    @property
    @pulumi.getter(name="countryTaxRateFallbackEnabled")
    def country_tax_rate_fallback_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if country - no state tax rate fallback should be used when a shipping address state is not explicitly covered in the rates lists of all tax categories of a cart line items
        """
        return pulumi.get(self, "country_tax_rate_fallback_enabled")

    @country_tax_rate_fallback_enabled.setter
    def country_tax_rate_fallback_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "country_tax_rate_fallback_enabled", value)

    @property
    @pulumi.getter(name="deleteDaysAfterLastModification")
    def delete_days_after_last_modification(self) -> Optional[pulumi.Input[int]]:
        """
        Number - Optional The default value for the deleteDaysAfterLastModification parameter of the CartDraft. Initially set to 90 for projects created after December 2019.
        """
        return pulumi.get(self, "delete_days_after_last_modification")

    @delete_days_after_last_modification.setter
    def delete_days_after_last_modification(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delete_days_after_last_modification", value)


@pulumi.input_type
class ProjectSettingsExternalOauthArgs:
    def __init__(__self__, *,
                 authorization_header: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] authorization_header: Partially hidden on retrieval
        """
        if authorization_header is not None:
            pulumi.set(__self__, "authorization_header", authorization_header)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="authorizationHeader")
    def authorization_header(self) -> Optional[pulumi.Input[str]]:
        """
        Partially hidden on retrieval
        """
        return pulumi.get(self, "authorization_header")

    @authorization_header.setter
    def authorization_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authorization_header", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ProjectSettingsMessagesArgs:
    def __init__(__self__, *,
                 delete_days_after_creation: Optional[pulumi.Input[int]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[int] delete_days_after_creation: Specifies the number of days each Message should be available via the Messages Query API
        :param pulumi.Input[bool] enabled: When true the creation of messages on the Messages Query HTTP API is enabled
        """
        if delete_days_after_creation is not None:
            pulumi.set(__self__, "delete_days_after_creation", delete_days_after_creation)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="deleteDaysAfterCreation")
    def delete_days_after_creation(self) -> Optional[pulumi.Input[int]]:
        """
        Specifies the number of days each Message should be available via the Messages Query API
        """
        return pulumi.get(self, "delete_days_after_creation")

    @delete_days_after_creation.setter
    def delete_days_after_creation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delete_days_after_creation", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        When true the creation of messages on the Messages Query HTTP API is enabled
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)


@pulumi.input_type
class ProjectSettingsShippingRateCartClassificationValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] key: [Resource Type ID](https://docs.commercetools.com/api/projects/Projects#changeProject)
        """
        pulumi.set(__self__, "key", key)
        if label is not None:
            pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        [Resource Type ID](https://docs.commercetools.com/api/projects/Projects#changeProject)
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class ShippingMethodCustomArgs:
    def __init__(__self__, *,
                 type_id: pulumi.Input[str],
                 fields: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] fields: Custom fields for this resource. Note that the values need to be provided as JSON encoded strings: `my-value = jsonencode({"key": "value"})`
        """
        pulumi.set(__self__, "type_id", type_id)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type_id")

    @type_id.setter
    def type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_id", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Custom fields for this resource. Note that the values need to be provided as JSON encoded strings: `my-value = jsonencode({"key": "value"})`
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "fields", value)


@pulumi.input_type
class ShippingZoneLocationArgs:
    def __init__(__self__, *,
                 country: pulumi.Input[str],
                 state: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] country: A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
        """
        pulumi.set(__self__, "country", country)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter
    def country(self) -> pulumi.Input[str]:
        """
        A two-digit country code as per [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)
        """
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: pulumi.Input[str]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)


@pulumi.input_type
class ShippingZoneRateFreeAboveArgs:
    def __init__(__self__, *,
                 cent_amount: pulumi.Input[int],
                 currency_code: pulumi.Input[str]):
        """
        :param pulumi.Input[int] cent_amount: The amount in cents (the smallest indivisible unit of the currency)
        :param pulumi.Input[str] currency_code: The currency code compliant to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)
        """
        pulumi.set(__self__, "cent_amount", cent_amount)
        pulumi.set(__self__, "currency_code", currency_code)

    @property
    @pulumi.getter(name="centAmount")
    def cent_amount(self) -> pulumi.Input[int]:
        """
        The amount in cents (the smallest indivisible unit of the currency)
        """
        return pulumi.get(self, "cent_amount")

    @cent_amount.setter
    def cent_amount(self, value: pulumi.Input[int]):
        pulumi.set(self, "cent_amount", value)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> pulumi.Input[str]:
        """
        The currency code compliant to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)
        """
        return pulumi.get(self, "currency_code")

    @currency_code.setter
    def currency_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "currency_code", value)


@pulumi.input_type
class ShippingZoneRatePriceArgs:
    def __init__(__self__, *,
                 cent_amount: pulumi.Input[int],
                 currency_code: pulumi.Input[str]):
        pulumi.set(__self__, "cent_amount", cent_amount)
        pulumi.set(__self__, "currency_code", currency_code)

    @property
    @pulumi.getter(name="centAmount")
    def cent_amount(self) -> pulumi.Input[int]:
        return pulumi.get(self, "cent_amount")

    @cent_amount.setter
    def cent_amount(self, value: pulumi.Input[int]):
        pulumi.set(self, "cent_amount", value)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "currency_code")

    @currency_code.setter
    def currency_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "currency_code", value)


@pulumi.input_type
class ShippingZoneRateShippingRatePriceTierArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 minimum_cent_amount: Optional[pulumi.Input[int]] = None,
                 price: Optional[pulumi.Input['ShippingZoneRateShippingRatePriceTierPriceArgs']] = None,
                 price_function: Optional[pulumi.Input['ShippingZoneRateShippingRatePriceTierPriceFunctionArgs']] = None,
                 score: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: CartValue, CartScore or CartClassification
        :param pulumi.Input[int] minimum_cent_amount: If type is CartValue this represents the cent amount of the tier
        :param pulumi.Input['ShippingZoneRateShippingRatePriceTierPriceArgs'] price: The price of the score, value or minimum_cent_amount tier
        :param pulumi.Input['ShippingZoneRateShippingRatePriceTierPriceFunctionArgs'] price_function: If type is CartScore. Allows to calculate a price dynamically for the score.
        :param pulumi.Input[int] score: If type is CartScore. Sets a fixed price for this score value
        :param pulumi.Input[str] value: If type is CartClassification, must be a valid key of the CartClassification
        """
        pulumi.set(__self__, "type", type)
        if minimum_cent_amount is not None:
            pulumi.set(__self__, "minimum_cent_amount", minimum_cent_amount)
        if price is not None:
            pulumi.set(__self__, "price", price)
        if price_function is not None:
            pulumi.set(__self__, "price_function", price_function)
        if score is not None:
            pulumi.set(__self__, "score", score)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        CartValue, CartScore or CartClassification
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="minimumCentAmount")
    def minimum_cent_amount(self) -> Optional[pulumi.Input[int]]:
        """
        If type is CartValue this represents the cent amount of the tier
        """
        return pulumi.get(self, "minimum_cent_amount")

    @minimum_cent_amount.setter
    def minimum_cent_amount(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "minimum_cent_amount", value)

    @property
    @pulumi.getter
    def price(self) -> Optional[pulumi.Input['ShippingZoneRateShippingRatePriceTierPriceArgs']]:
        """
        The price of the score, value or minimum_cent_amount tier
        """
        return pulumi.get(self, "price")

    @price.setter
    def price(self, value: Optional[pulumi.Input['ShippingZoneRateShippingRatePriceTierPriceArgs']]):
        pulumi.set(self, "price", value)

    @property
    @pulumi.getter(name="priceFunction")
    def price_function(self) -> Optional[pulumi.Input['ShippingZoneRateShippingRatePriceTierPriceFunctionArgs']]:
        """
        If type is CartScore. Allows to calculate a price dynamically for the score.
        """
        return pulumi.get(self, "price_function")

    @price_function.setter
    def price_function(self, value: Optional[pulumi.Input['ShippingZoneRateShippingRatePriceTierPriceFunctionArgs']]):
        pulumi.set(self, "price_function", value)

    @property
    @pulumi.getter
    def score(self) -> Optional[pulumi.Input[int]]:
        """
        If type is CartScore. Sets a fixed price for this score value
        """
        return pulumi.get(self, "score")

    @score.setter
    def score(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "score", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        If type is CartClassification, must be a valid key of the CartClassification
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ShippingZoneRateShippingRatePriceTierPriceArgs:
    def __init__(__self__, *,
                 cent_amount: pulumi.Input[int],
                 currency_code: pulumi.Input[str]):
        pulumi.set(__self__, "cent_amount", cent_amount)
        pulumi.set(__self__, "currency_code", currency_code)

    @property
    @pulumi.getter(name="centAmount")
    def cent_amount(self) -> pulumi.Input[int]:
        return pulumi.get(self, "cent_amount")

    @cent_amount.setter
    def cent_amount(self, value: pulumi.Input[int]):
        pulumi.set(self, "cent_amount", value)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "currency_code")

    @currency_code.setter
    def currency_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "currency_code", value)


@pulumi.input_type
class ShippingZoneRateShippingRatePriceTierPriceFunctionArgs:
    def __init__(__self__, *,
                 currency_code: pulumi.Input[str],
                 function: pulumi.Input[str]):
        pulumi.set(__self__, "currency_code", currency_code)
        pulumi.set(__self__, "function", function)

    @property
    @pulumi.getter(name="currencyCode")
    def currency_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "currency_code")

    @currency_code.setter
    def currency_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "currency_code", value)

    @property
    @pulumi.getter
    def function(self) -> pulumi.Input[str]:
        return pulumi.get(self, "function")

    @function.setter
    def function(self, value: pulumi.Input[str]):
        pulumi.set(self, "function", value)


@pulumi.input_type
class StoreCustomArgs:
    def __init__(__self__, *,
                 type_id: pulumi.Input[str],
                 fields: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] fields: Custom fields for this resource. Note that the values need to be provided as JSON encoded strings: `my-value = jsonencode({"key": "value"})`
        """
        pulumi.set(__self__, "type_id", type_id)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter(name="typeId")
    def type_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type_id")

    @type_id.setter
    def type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "type_id", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Custom fields for this resource. Note that the values need to be provided as JSON encoded strings: `my-value = jsonencode({"key": "value"})`
        """
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "fields", value)


@pulumi.input_type
class StoreProductSelectionArgs:
    def __init__(__self__, *,
                 active: pulumi.Input[bool],
                 product_selection_id: pulumi.Input[str]):
        """
        :param pulumi.Input[bool] active: If true, all Products assigned to this Product Selection are part of the Store's assortment
        :param pulumi.Input[str] product_selection_id: Resource Identifier of a ProductSelection
        """
        pulumi.set(__self__, "active", active)
        pulumi.set(__self__, "product_selection_id", product_selection_id)

    @property
    @pulumi.getter
    def active(self) -> pulumi.Input[bool]:
        """
        If true, all Products assigned to this Product Selection are part of the Store's assortment
        """
        return pulumi.get(self, "active")

    @active.setter
    def active(self, value: pulumi.Input[bool]):
        pulumi.set(self, "active", value)

    @property
    @pulumi.getter(name="productSelectionId")
    def product_selection_id(self) -> pulumi.Input[str]:
        """
        Resource Identifier of a ProductSelection
        """
        return pulumi.get(self, "product_selection_id")

    @product_selection_id.setter
    def product_selection_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "product_selection_id", value)


@pulumi.input_type
class SubscriptionChangeArgs:
    def __init__(__self__, *,
                 resource_type_ids: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] resource_type_ids: [Resource Type ID](https://docs.commercetools.com/api/projects/subscriptions#changesubscription)
        """
        pulumi.set(__self__, "resource_type_ids", resource_type_ids)

    @property
    @pulumi.getter(name="resourceTypeIds")
    def resource_type_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        [Resource Type ID](https://docs.commercetools.com/api/projects/subscriptions#changesubscription)
        """
        return pulumi.get(self, "resource_type_ids")

    @resource_type_ids.setter
    def resource_type_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "resource_type_ids", value)


@pulumi.input_type
class SubscriptionDestinationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 access_secret: Optional[pulumi.Input[str]] = None,
                 account_id: Optional[pulumi.Input[str]] = None,
                 acks: Optional[pulumi.Input[str]] = None,
                 api_key: Optional[pulumi.Input[str]] = None,
                 api_secret: Optional[pulumi.Input[str]] = None,
                 bootstrap_server: Optional[pulumi.Input[str]] = None,
                 connection_string: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 queue_url: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 topic: Optional[pulumi.Input[str]] = None,
                 topic_arn: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] type: The type of the destination. See [Destination](https://docs.commercetools.com/api/projects/subscriptions#destination) for more information
        :param pulumi.Input[str] access_key: The access key of the SQS queue, SNS topic or EventBridge topic
        :param pulumi.Input[str] access_secret: The access secret of the SQS queue, SNS topic or EventBridge topic
        :param pulumi.Input[str] account_id: The AWS account ID of the SNS topic or EventBridge topic
        :param pulumi.Input[str] acks: The acks value of the Confluent Cloud topic
        :param pulumi.Input[str] api_key: The API key of the Confluent Cloud topic
        :param pulumi.Input[str] api_secret: The API secret of the Confluent Cloud topic
        :param pulumi.Input[str] bootstrap_server: The bootstrap server of the Confluent Cloud topic
        :param pulumi.Input[str] connection_string: The connection string of the Azure Service Bus
        :param pulumi.Input[str] key: The key of the Confluent Cloud topic
        :param pulumi.Input[str] project_id: The project ID of the Google Cloud Pub/Sub
        :param pulumi.Input[str] queue_url: The URL of the SQS queue
        :param pulumi.Input[str] region: The region of the SQS queue, SNS topic or EventBridge topic
        :param pulumi.Input[str] topic: The topic of the Google Cloud Pub/Sub or Confluent Cloud topic
        :param pulumi.Input[str] topic_arn: The ARN of the SNS topic
        :param pulumi.Input[str] uri: The URI of the EventGrid topic
        """
        pulumi.set(__self__, "type", type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if access_secret is not None:
            pulumi.set(__self__, "access_secret", access_secret)
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if acks is not None:
            pulumi.set(__self__, "acks", acks)
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if api_secret is not None:
            pulumi.set(__self__, "api_secret", api_secret)
        if bootstrap_server is not None:
            pulumi.set(__self__, "bootstrap_server", bootstrap_server)
        if connection_string is not None:
            pulumi.set(__self__, "connection_string", connection_string)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if queue_url is not None:
            pulumi.set(__self__, "queue_url", queue_url)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)
        if topic_arn is not None:
            pulumi.set(__self__, "topic_arn", topic_arn)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of the destination. See [Destination](https://docs.commercetools.com/api/projects/subscriptions#destination) for more information
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        The access key of the SQS queue, SNS topic or EventBridge topic
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="accessSecret")
    def access_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The access secret of the SQS queue, SNS topic or EventBridge topic
        """
        return pulumi.get(self, "access_secret")

    @access_secret.setter
    def access_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_secret", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AWS account ID of the SNS topic or EventBridge topic
        """
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def acks(self) -> Optional[pulumi.Input[str]]:
        """
        The acks value of the Confluent Cloud topic
        """
        return pulumi.get(self, "acks")

    @acks.setter
    def acks(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acks", value)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        """
        The API key of the Confluent Cloud topic
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The API secret of the Confluent Cloud topic
        """
        return pulumi.get(self, "api_secret")

    @api_secret.setter
    def api_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_secret", value)

    @property
    @pulumi.getter(name="bootstrapServer")
    def bootstrap_server(self) -> Optional[pulumi.Input[str]]:
        """
        The bootstrap server of the Confluent Cloud topic
        """
        return pulumi.get(self, "bootstrap_server")

    @bootstrap_server.setter
    def bootstrap_server(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bootstrap_server", value)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[pulumi.Input[str]]:
        """
        The connection string of the Azure Service Bus
        """
        return pulumi.get(self, "connection_string")

    @connection_string.setter
    def connection_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_string", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the Confluent Cloud topic
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The project ID of the Google Cloud Pub/Sub
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="queueUrl")
    def queue_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the SQS queue
        """
        return pulumi.get(self, "queue_url")

    @queue_url.setter
    def queue_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "queue_url", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        The region of the SQS queue, SNS topic or EventBridge topic
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[str]]:
        """
        The topic of the Google Cloud Pub/Sub or Confluent Cloud topic
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="topicArn")
    def topic_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the SNS topic
        """
        return pulumi.get(self, "topic_arn")

    @topic_arn.setter
    def topic_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic_arn", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        The URI of the EventGrid topic
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class SubscriptionFormatArgs:
    def __init__(__self__, *,
                 cloud_events_version: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] cloud_events_version: For CloudEvents
        """
        if cloud_events_version is not None:
            pulumi.set(__self__, "cloud_events_version", cloud_events_version)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cloudEventsVersion")
    def cloud_events_version(self) -> Optional[pulumi.Input[str]]:
        """
        For CloudEvents
        """
        return pulumi.get(self, "cloud_events_version")

    @cloud_events_version.setter
    def cloud_events_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_events_version", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SubscriptionMessageArgs:
    def __init__(__self__, *,
                 resource_type_id: pulumi.Input[str],
                 types: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] resource_type_id: [Resource Type ID](https://docs.commercetools.com/api/projects/subscriptions#changesubscription)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] types: types must contain valid message types for this resource, for example for resource type product the message type ProductPublished is valid. If no types of messages are given, the subscription is valid for all messages of this resource
        """
        pulumi.set(__self__, "resource_type_id", resource_type_id)
        pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter(name="resourceTypeId")
    def resource_type_id(self) -> pulumi.Input[str]:
        """
        [Resource Type ID](https://docs.commercetools.com/api/projects/subscriptions#changesubscription)
        """
        return pulumi.get(self, "resource_type_id")

    @resource_type_id.setter
    def resource_type_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_type_id", value)

    @property
    @pulumi.getter
    def types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        types must contain valid message types for this resource, for example for resource type product the message type ProductPublished is valid. If no types of messages are given, the subscription is valid for all messages of this resource
        """
        return pulumi.get(self, "types")

    @types.setter
    def types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "types", value)


@pulumi.input_type
class TaxCategoryRateSubRateArgs:
    def __init__(__self__, *,
                 amount: pulumi.Input[float],
                 name: pulumi.Input[str]):
        """
        :param pulumi.Input[float] amount: Number Percentage in the range of [0..1]
        """
        pulumi.set(__self__, "amount", amount)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def amount(self) -> pulumi.Input[float]:
        """
        Number Percentage in the range of [0..1]
        """
        return pulumi.get(self, "amount")

    @amount.setter
    def amount(self, value: pulumi.Input[float]):
        pulumi.set(self, "amount", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TypeFieldArgs:
    def __init__(__self__, *,
                 label: pulumi.Input[Mapping[str, Any]],
                 name: pulumi.Input[str],
                 type: pulumi.Input['TypeFieldTypeArgs'],
                 input_hint: Optional[pulumi.Input[str]] = None,
                 required: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[Mapping[str, Any]] label: A human-readable label for the field
        :param pulumi.Input[str] name: The name of the field.
               The name must be between two and 36 characters long and can contain the ASCII letters A to Z in lowercase or uppercase, digits, underscores (_) and the hyphen-minus (-).
               The name must be unique for a given resource type ID. In case there is a field with the same name in another type it has to have the same FieldType also
        :param pulumi.Input['TypeFieldTypeArgs'] type: Describes the [type](https://docs.commercetools.com/api/projects/types#fieldtype) of the field
        :param pulumi.Input[str] input_hint: [TextInputHint](https://docs.commercetools.com/api/projects/types#textinputhint) Provides a visual representation type for this field. It is only relevant for string-based field types like StringType and LocalizedStringType
        :param pulumi.Input[bool] required: Whether the field is required to have a value
        """
        pulumi.set(__self__, "label", label)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if input_hint is not None:
            pulumi.set(__self__, "input_hint", input_hint)
        if required is not None:
            pulumi.set(__self__, "required", required)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[Mapping[str, Any]]:
        """
        A human-readable label for the field
        """
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the field.
        The name must be between two and 36 characters long and can contain the ASCII letters A to Z in lowercase or uppercase, digits, underscores (_) and the hyphen-minus (-).
        The name must be unique for a given resource type ID. In case there is a field with the same name in another type it has to have the same FieldType also
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input['TypeFieldTypeArgs']:
        """
        Describes the [type](https://docs.commercetools.com/api/projects/types#fieldtype) of the field
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input['TypeFieldTypeArgs']):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="inputHint")
    def input_hint(self) -> Optional[pulumi.Input[str]]:
        """
        [TextInputHint](https://docs.commercetools.com/api/projects/types#textinputhint) Provides a visual representation type for this field. It is only relevant for string-based field types like StringType and LocalizedStringType
        """
        return pulumi.get(self, "input_hint")

    @input_hint.setter
    def input_hint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_hint", value)

    @property
    @pulumi.getter
    def required(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the field is required to have a value
        """
        return pulumi.get(self, "required")

    @required.setter
    def required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "required", value)


@pulumi.input_type
class TypeFieldTypeArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 element_type2: Optional[pulumi.Input['TypeFieldTypeElementType2Args']] = None,
                 localized_values: Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeLocalizedValueArgs']]]] = None,
                 reference_type_id: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeValueArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the field type. Some types require extra fields to be set. Note that changing the type after creating is not supported. You need to delete the attribute and re-add it.
        :param pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeLocalizedValueArgs']]] localized_values: Localized values for the `lenum` type.
        :param pulumi.Input[str] reference_type_id: Resource type the Custom Field can reference. Required when type is `Reference`
        :param pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeValueArgs']]] values: Values for the `enum` type.
        """
        pulumi.set(__self__, "name", name)
        if element_type2 is not None:
            pulumi.set(__self__, "element_type2", element_type2)
        if localized_values is not None:
            pulumi.set(__self__, "localized_values", localized_values)
        if reference_type_id is not None:
            pulumi.set(__self__, "reference_type_id", reference_type_id)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the field type. Some types require extra fields to be set. Note that changing the type after creating is not supported. You need to delete the attribute and re-add it.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="ElementType2")
    def element_type2(self) -> Optional[pulumi.Input['TypeFieldTypeElementType2Args']]:
        return pulumi.get(self, "element_type2")

    @element_type2.setter
    def element_type2(self, value: Optional[pulumi.Input['TypeFieldTypeElementType2Args']]):
        pulumi.set(self, "element_type2", value)

    @property
    @pulumi.getter(name="localizedValues")
    def localized_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeLocalizedValueArgs']]]]:
        """
        Localized values for the `lenum` type.
        """
        return pulumi.get(self, "localized_values")

    @localized_values.setter
    def localized_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeLocalizedValueArgs']]]]):
        pulumi.set(self, "localized_values", value)

    @property
    @pulumi.getter(name="referenceTypeId")
    def reference_type_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource type the Custom Field can reference. Required when type is `Reference`
        """
        return pulumi.get(self, "reference_type_id")

    @reference_type_id.setter
    def reference_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reference_type_id", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeValueArgs']]]]:
        """
        Values for the `enum` type.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeValueArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TypeFieldTypeElementType2Args:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 localized_values: Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeElementType2LocalizedValueArgs']]]] = None,
                 reference_type_id: Optional[pulumi.Input[str]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeElementType2ValueArgs']]]] = None):
        """
        :param pulumi.Input[str] name: Name of the field type. Some types require extra fields to be set. Note that changing the type after creating is not supported. You need to delete the attribute and re-add it.
        :param pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeElementType2LocalizedValueArgs']]] localized_values: Localized values for the `lenum` type.
        :param pulumi.Input[str] reference_type_id: Resource type the Custom Field can reference. Required when type is `Reference`
        :param pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeElementType2ValueArgs']]] values: Values for the `enum` type.
        """
        pulumi.set(__self__, "name", name)
        if localized_values is not None:
            pulumi.set(__self__, "localized_values", localized_values)
        if reference_type_id is not None:
            pulumi.set(__self__, "reference_type_id", reference_type_id)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the field type. Some types require extra fields to be set. Note that changing the type after creating is not supported. You need to delete the attribute and re-add it.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="localizedValues")
    def localized_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeElementType2LocalizedValueArgs']]]]:
        """
        Localized values for the `lenum` type.
        """
        return pulumi.get(self, "localized_values")

    @localized_values.setter
    def localized_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeElementType2LocalizedValueArgs']]]]):
        pulumi.set(self, "localized_values", value)

    @property
    @pulumi.getter(name="referenceTypeId")
    def reference_type_id(self) -> Optional[pulumi.Input[str]]:
        """
        Resource type the Custom Field can reference. Required when type is `Reference`
        """
        return pulumi.get(self, "reference_type_id")

    @reference_type_id.setter
    def reference_type_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reference_type_id", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeElementType2ValueArgs']]]]:
        """
        Values for the `enum` type.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TypeFieldTypeElementType2ValueArgs']]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class TypeFieldTypeElementType2LocalizedValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class TypeFieldTypeElementType2ValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class TypeFieldTypeLocalizedValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "label", value)


@pulumi.input_type
class TypeFieldTypeValueArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 label: pulumi.Input[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "label", label)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def label(self) -> pulumi.Input[str]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: pulumi.Input[str]):
        pulumi.set(self, "label", value)


