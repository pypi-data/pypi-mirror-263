# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AssociateRoleArgs', 'AssociateRole']

@pulumi.input_type
class AssociateRoleArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 permissions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 buyer_assignable: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AssociateRole resource.
        :param pulumi.Input[str] key: User-defined unique identifier of the AssociateRole.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] permissions: List of Permissions for the AssociateRole.
        :param pulumi.Input[bool] buyer_assignable: Whether the AssociateRole can be assigned to an Associate by a buyer. If false, the AssociateRole can only be assigned
               using the general endpoint.
        :param pulumi.Input[str] name: Name of the AssociateRole.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "permissions", permissions)
        if buyer_assignable is not None:
            pulumi.set(__self__, "buyer_assignable", buyer_assignable)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        User-defined unique identifier of the AssociateRole.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        List of Permissions for the AssociateRole.
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter(name="buyerAssignable")
    def buyer_assignable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the AssociateRole can be assigned to an Associate by a buyer. If false, the AssociateRole can only be assigned
        using the general endpoint.
        """
        return pulumi.get(self, "buyer_assignable")

    @buyer_assignable.setter
    def buyer_assignable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "buyer_assignable", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the AssociateRole.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _AssociateRoleState:
    def __init__(__self__, *,
                 buyer_assignable: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering AssociateRole resources.
        :param pulumi.Input[bool] buyer_assignable: Whether the AssociateRole can be assigned to an Associate by a buyer. If false, the AssociateRole can only be assigned
               using the general endpoint.
        :param pulumi.Input[str] key: User-defined unique identifier of the AssociateRole.
        :param pulumi.Input[str] name: Name of the AssociateRole.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] permissions: List of Permissions for the AssociateRole.
        :param pulumi.Input[int] version: Current version of the AssociateRole.
        """
        if buyer_assignable is not None:
            pulumi.set(__self__, "buyer_assignable", buyer_assignable)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="buyerAssignable")
    def buyer_assignable(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the AssociateRole can be assigned to an Associate by a buyer. If false, the AssociateRole can only be assigned
        using the general endpoint.
        """
        return pulumi.get(self, "buyer_assignable")

    @buyer_assignable.setter
    def buyer_assignable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "buyer_assignable", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        User-defined unique identifier of the AssociateRole.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the AssociateRole.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of Permissions for the AssociateRole.
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        Current version of the AssociateRole.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


class AssociateRole(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 buyer_assignable: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a AssociateRole resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] buyer_assignable: Whether the AssociateRole can be assigned to an Associate by a buyer. If false, the AssociateRole can only be assigned
               using the general endpoint.
        :param pulumi.Input[str] key: User-defined unique identifier of the AssociateRole.
        :param pulumi.Input[str] name: Name of the AssociateRole.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] permissions: List of Permissions for the AssociateRole.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AssociateRoleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a AssociateRole resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param AssociateRoleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AssociateRoleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 buyer_assignable: Optional[pulumi.Input[bool]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AssociateRoleArgs.__new__(AssociateRoleArgs)

            __props__.__dict__["buyer_assignable"] = buyer_assignable
            if key is None and not opts.urn:
                raise TypeError("Missing required property 'key'")
            __props__.__dict__["key"] = key
            __props__.__dict__["name"] = name
            if permissions is None and not opts.urn:
                raise TypeError("Missing required property 'permissions'")
            __props__.__dict__["permissions"] = permissions
            __props__.__dict__["version"] = None
        super(AssociateRole, __self__).__init__(
            'commercetools:index/associateRole:AssociateRole',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            buyer_assignable: Optional[pulumi.Input[bool]] = None,
            key: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            version: Optional[pulumi.Input[int]] = None) -> 'AssociateRole':
        """
        Get an existing AssociateRole resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] buyer_assignable: Whether the AssociateRole can be assigned to an Associate by a buyer. If false, the AssociateRole can only be assigned
               using the general endpoint.
        :param pulumi.Input[str] key: User-defined unique identifier of the AssociateRole.
        :param pulumi.Input[str] name: Name of the AssociateRole.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] permissions: List of Permissions for the AssociateRole.
        :param pulumi.Input[int] version: Current version of the AssociateRole.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AssociateRoleState.__new__(_AssociateRoleState)

        __props__.__dict__["buyer_assignable"] = buyer_assignable
        __props__.__dict__["key"] = key
        __props__.__dict__["name"] = name
        __props__.__dict__["permissions"] = permissions
        __props__.__dict__["version"] = version
        return AssociateRole(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="buyerAssignable")
    def buyer_assignable(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the AssociateRole can be assigned to an Associate by a buyer. If false, the AssociateRole can only be assigned
        using the general endpoint.
        """
        return pulumi.get(self, "buyer_assignable")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[str]:
        """
        User-defined unique identifier of the AssociateRole.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the AssociateRole.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Output[Sequence[str]]:
        """
        List of Permissions for the AssociateRole.
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[int]:
        """
        Current version of the AssociateRole.
        """
        return pulumi.get(self, "version")

