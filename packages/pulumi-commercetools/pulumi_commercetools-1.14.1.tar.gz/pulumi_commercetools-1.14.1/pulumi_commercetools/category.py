# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CategoryArgs', 'Category']

@pulumi.input_type
class CategoryArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[Mapping[str, Any]],
                 slug: pulumi.Input[Mapping[str, Any]],
                 assets: Optional[pulumi.Input[Sequence[pulumi.Input['CategoryAssetArgs']]]] = None,
                 custom: Optional[pulumi.Input['CategoryCustomArgs']] = None,
                 description: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 meta_description: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 meta_keywords: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 meta_title: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 order_hint: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Category resource.
        :param pulumi.Input[Mapping[str, Any]] slug: Human readable identifiers, needs to be unique
        :param pulumi.Input[Sequence[pulumi.Input['CategoryAssetArgs']]] assets: Can be used to store images, icons or movies related to this category
        :param pulumi.Input[str] key: Category-specific unique identifier. Must be unique across a project
        :param pulumi.Input[str] order_hint: An attribute as base for a custom category order in one level, filled with random value when left empty
        :param pulumi.Input[str] parent: A category that is the parent of this category in the category tree
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "slug", slug)
        if assets is not None:
            pulumi.set(__self__, "assets", assets)
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if meta_description is not None:
            pulumi.set(__self__, "meta_description", meta_description)
        if meta_keywords is not None:
            pulumi.set(__self__, "meta_keywords", meta_keywords)
        if meta_title is not None:
            pulumi.set(__self__, "meta_title", meta_title)
        if order_hint is not None:
            pulumi.set(__self__, "order_hint", order_hint)
        if parent is not None:
            pulumi.set(__self__, "parent", parent)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[Mapping[str, Any]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Input[Mapping[str, Any]]:
        """
        Human readable identifiers, needs to be unique
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: pulumi.Input[Mapping[str, Any]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def assets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CategoryAssetArgs']]]]:
        """
        Can be used to store images, icons or movies related to this category
        """
        return pulumi.get(self, "assets")

    @assets.setter
    def assets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CategoryAssetArgs']]]]):
        pulumi.set(self, "assets", value)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input['CategoryCustomArgs']]:
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input['CategoryCustomArgs']]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Category-specific unique identifier. Must be unique across a project
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="metaDescription")
    def meta_description(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "meta_description")

    @meta_description.setter
    def meta_description(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "meta_description", value)

    @property
    @pulumi.getter(name="metaKeywords")
    def meta_keywords(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "meta_keywords")

    @meta_keywords.setter
    def meta_keywords(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "meta_keywords", value)

    @property
    @pulumi.getter(name="metaTitle")
    def meta_title(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "meta_title")

    @meta_title.setter
    def meta_title(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "meta_title", value)

    @property
    @pulumi.getter(name="orderHint")
    def order_hint(self) -> Optional[pulumi.Input[str]]:
        """
        An attribute as base for a custom category order in one level, filled with random value when left empty
        """
        return pulumi.get(self, "order_hint")

    @order_hint.setter
    def order_hint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_hint", value)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        A category that is the parent of this category in the category tree
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)


@pulumi.input_type
class _CategoryState:
    def __init__(__self__, *,
                 assets: Optional[pulumi.Input[Sequence[pulumi.Input['CategoryAssetArgs']]]] = None,
                 custom: Optional[pulumi.Input['CategoryCustomArgs']] = None,
                 description: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 meta_description: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 meta_keywords: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 meta_title: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 name: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 order_hint: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Category resources.
        :param pulumi.Input[Sequence[pulumi.Input['CategoryAssetArgs']]] assets: Can be used to store images, icons or movies related to this category
        :param pulumi.Input[str] key: Category-specific unique identifier. Must be unique across a project
        :param pulumi.Input[str] order_hint: An attribute as base for a custom category order in one level, filled with random value when left empty
        :param pulumi.Input[str] parent: A category that is the parent of this category in the category tree
        :param pulumi.Input[Mapping[str, Any]] slug: Human readable identifiers, needs to be unique
        """
        if assets is not None:
            pulumi.set(__self__, "assets", assets)
        if custom is not None:
            pulumi.set(__self__, "custom", custom)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if external_id is not None:
            pulumi.set(__self__, "external_id", external_id)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if meta_description is not None:
            pulumi.set(__self__, "meta_description", meta_description)
        if meta_keywords is not None:
            pulumi.set(__self__, "meta_keywords", meta_keywords)
        if meta_title is not None:
            pulumi.set(__self__, "meta_title", meta_title)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if order_hint is not None:
            pulumi.set(__self__, "order_hint", order_hint)
        if parent is not None:
            pulumi.set(__self__, "parent", parent)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def assets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CategoryAssetArgs']]]]:
        """
        Can be used to store images, icons or movies related to this category
        """
        return pulumi.get(self, "assets")

    @assets.setter
    def assets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CategoryAssetArgs']]]]):
        pulumi.set(self, "assets", value)

    @property
    @pulumi.getter
    def custom(self) -> Optional[pulumi.Input['CategoryCustomArgs']]:
        return pulumi.get(self, "custom")

    @custom.setter
    def custom(self, value: Optional[pulumi.Input['CategoryCustomArgs']]):
        pulumi.set(self, "custom", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "external_id")

    @external_id.setter
    def external_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_id", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Category-specific unique identifier. Must be unique across a project
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="metaDescription")
    def meta_description(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "meta_description")

    @meta_description.setter
    def meta_description(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "meta_description", value)

    @property
    @pulumi.getter(name="metaKeywords")
    def meta_keywords(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "meta_keywords")

    @meta_keywords.setter
    def meta_keywords(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "meta_keywords", value)

    @property
    @pulumi.getter(name="metaTitle")
    def meta_title(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "meta_title")

    @meta_title.setter
    def meta_title(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "meta_title", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orderHint")
    def order_hint(self) -> Optional[pulumi.Input[str]]:
        """
        An attribute as base for a custom category order in one level, filled with random value when left empty
        """
        return pulumi.get(self, "order_hint")

    @order_hint.setter
    def order_hint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "order_hint", value)

    @property
    @pulumi.getter
    def parent(self) -> Optional[pulumi.Input[str]]:
        """
        A category that is the parent of this category in the category tree
        """
        return pulumi.get(self, "parent")

    @parent.setter
    def parent(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Human readable identifiers, needs to be unique
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


class Category(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CategoryAssetArgs']]]]] = None,
                 custom: Optional[pulumi.Input[pulumi.InputType['CategoryCustomArgs']]] = None,
                 description: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 meta_description: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 meta_keywords: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 meta_title: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 name: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 order_hint: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        """
        Create a Category resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CategoryAssetArgs']]]] assets: Can be used to store images, icons or movies related to this category
        :param pulumi.Input[str] key: Category-specific unique identifier. Must be unique across a project
        :param pulumi.Input[str] order_hint: An attribute as base for a custom category order in one level, filled with random value when left empty
        :param pulumi.Input[str] parent: A category that is the parent of this category in the category tree
        :param pulumi.Input[Mapping[str, Any]] slug: Human readable identifiers, needs to be unique
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CategoryArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Category resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param CategoryArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CategoryArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CategoryAssetArgs']]]]] = None,
                 custom: Optional[pulumi.Input[pulumi.InputType['CategoryCustomArgs']]] = None,
                 description: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 external_id: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 meta_description: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 meta_keywords: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 meta_title: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 name: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 order_hint: Optional[pulumi.Input[str]] = None,
                 parent: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CategoryArgs.__new__(CategoryArgs)

            __props__.__dict__["assets"] = assets
            __props__.__dict__["custom"] = custom
            __props__.__dict__["description"] = description
            __props__.__dict__["external_id"] = external_id
            __props__.__dict__["key"] = key
            __props__.__dict__["meta_description"] = meta_description
            __props__.__dict__["meta_keywords"] = meta_keywords
            __props__.__dict__["meta_title"] = meta_title
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["order_hint"] = order_hint
            __props__.__dict__["parent"] = parent
            if slug is None and not opts.urn:
                raise TypeError("Missing required property 'slug'")
            __props__.__dict__["slug"] = slug
            __props__.__dict__["version"] = None
        super(Category, __self__).__init__(
            'commercetools:index/category:Category',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            assets: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CategoryAssetArgs']]]]] = None,
            custom: Optional[pulumi.Input[pulumi.InputType['CategoryCustomArgs']]] = None,
            description: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            external_id: Optional[pulumi.Input[str]] = None,
            key: Optional[pulumi.Input[str]] = None,
            meta_description: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            meta_keywords: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            meta_title: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            name: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            order_hint: Optional[pulumi.Input[str]] = None,
            parent: Optional[pulumi.Input[str]] = None,
            slug: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            version: Optional[pulumi.Input[int]] = None) -> 'Category':
        """
        Get an existing Category resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CategoryAssetArgs']]]] assets: Can be used to store images, icons or movies related to this category
        :param pulumi.Input[str] key: Category-specific unique identifier. Must be unique across a project
        :param pulumi.Input[str] order_hint: An attribute as base for a custom category order in one level, filled with random value when left empty
        :param pulumi.Input[str] parent: A category that is the parent of this category in the category tree
        :param pulumi.Input[Mapping[str, Any]] slug: Human readable identifiers, needs to be unique
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CategoryState.__new__(_CategoryState)

        __props__.__dict__["assets"] = assets
        __props__.__dict__["custom"] = custom
        __props__.__dict__["description"] = description
        __props__.__dict__["external_id"] = external_id
        __props__.__dict__["key"] = key
        __props__.__dict__["meta_description"] = meta_description
        __props__.__dict__["meta_keywords"] = meta_keywords
        __props__.__dict__["meta_title"] = meta_title
        __props__.__dict__["name"] = name
        __props__.__dict__["order_hint"] = order_hint
        __props__.__dict__["parent"] = parent
        __props__.__dict__["slug"] = slug
        __props__.__dict__["version"] = version
        return Category(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def assets(self) -> pulumi.Output[Optional[Sequence['outputs.CategoryAsset']]]:
        """
        Can be used to store images, icons or movies related to this category
        """
        return pulumi.get(self, "assets")

    @property
    @pulumi.getter
    def custom(self) -> pulumi.Output[Optional['outputs.CategoryCustom']]:
        return pulumi.get(self, "custom")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="externalId")
    def external_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "external_id")

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[Optional[str]]:
        """
        Category-specific unique identifier. Must be unique across a project
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="metaDescription")
    def meta_description(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "meta_description")

    @property
    @pulumi.getter(name="metaKeywords")
    def meta_keywords(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "meta_keywords")

    @property
    @pulumi.getter(name="metaTitle")
    def meta_title(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        return pulumi.get(self, "meta_title")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Mapping[str, Any]]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orderHint")
    def order_hint(self) -> pulumi.Output[Optional[str]]:
        """
        An attribute as base for a custom category order in one level, filled with random value when left empty
        """
        return pulumi.get(self, "order_hint")

    @property
    @pulumi.getter
    def parent(self) -> pulumi.Output[Optional[str]]:
        """
        A category that is the parent of this category in the category tree
        """
        return pulumi.get(self, "parent")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[Mapping[str, Any]]:
        """
        Human readable identifiers, needs to be unique
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[int]:
        return pulumi.get(self, "version")

