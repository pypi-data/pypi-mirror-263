# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['StateTransitionsArgs', 'StateTransitions']

@pulumi.input_type
class StateTransitionsArgs:
    def __init__(__self__, *,
                 from_: pulumi.Input[str],
                 tos: pulumi.Input[Sequence[pulumi.Input[str]]]):
        """
        The set of arguments for constructing a StateTransitions resource.
        :param pulumi.Input[str] from_: ID of the state to transition from
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tos: Transitions are a way to describe possible transformations of the current state to other states of the same type (for
               example: Initial -> Shipped). When performing a transitionState update action and transitions is set, the currently
               referenced state must have a transition to the new state. If transitions is an empty list, it means the current state is
               a final state and no further transitions are allowed. If transitions is not set, the validation is turned off. When
               performing a transitionState update action, any other state of the same type can be transitioned to
        """
        pulumi.set(__self__, "from_", from_)
        pulumi.set(__self__, "tos", tos)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> pulumi.Input[str]:
        """
        ID of the state to transition from
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: pulumi.Input[str]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def tos(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Transitions are a way to describe possible transformations of the current state to other states of the same type (for
        example: Initial -> Shipped). When performing a transitionState update action and transitions is set, the currently
        referenced state must have a transition to the new state. If transitions is an empty list, it means the current state is
        a final state and no further transitions are allowed. If transitions is not set, the validation is turned off. When
        performing a transitionState update action, any other state of the same type can be transitioned to
        """
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "tos", value)


@pulumi.input_type
class _StateTransitionsState:
    def __init__(__self__, *,
                 from_: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering StateTransitions resources.
        :param pulumi.Input[str] from_: ID of the state to transition from
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tos: Transitions are a way to describe possible transformations of the current state to other states of the same type (for
               example: Initial -> Shipped). When performing a transitionState update action and transitions is set, the currently
               referenced state must have a transition to the new state. If transitions is an empty list, it means the current state is
               a final state and no further transitions are allowed. If transitions is not set, the validation is turned off. When
               performing a transitionState update action, any other state of the same type can be transitioned to
        """
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if tos is not None:
            pulumi.set(__self__, "tos", tos)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the state to transition from
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def tos(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Transitions are a way to describe possible transformations of the current state to other states of the same type (for
        example: Initial -> Shipped). When performing a transitionState update action and transitions is set, the currently
        referenced state must have a transition to the new state. If transitions is an empty list, it means the current state is
        a final state and no further transitions are allowed. If transitions is not set, the validation is turned off. When
        performing a transitionState update action, any other state of the same type can be transitioned to
        """
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tos", value)


class StateTransitions(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 from_: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a StateTransitions resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] from_: ID of the state to transition from
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tos: Transitions are a way to describe possible transformations of the current state to other states of the same type (for
               example: Initial -> Shipped). When performing a transitionState update action and transitions is set, the currently
               referenced state must have a transition to the new state. If transitions is an empty list, it means the current state is
               a final state and no further transitions are allowed. If transitions is not set, the validation is turned off. When
               performing a transitionState update action, any other state of the same type can be transitioned to
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StateTransitionsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a StateTransitions resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param StateTransitionsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StateTransitionsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 from_: Optional[pulumi.Input[str]] = None,
                 tos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StateTransitionsArgs.__new__(StateTransitionsArgs)

            if from_ is None and not opts.urn:
                raise TypeError("Missing required property 'from_'")
            __props__.__dict__["from_"] = from_
            if tos is None and not opts.urn:
                raise TypeError("Missing required property 'tos'")
            __props__.__dict__["tos"] = tos
        super(StateTransitions, __self__).__init__(
            'commercetools:index/stateTransitions:StateTransitions',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            from_: Optional[pulumi.Input[str]] = None,
            tos: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'StateTransitions':
        """
        Get an existing StateTransitions resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] from_: ID of the state to transition from
        :param pulumi.Input[Sequence[pulumi.Input[str]]] tos: Transitions are a way to describe possible transformations of the current state to other states of the same type (for
               example: Initial -> Shipped). When performing a transitionState update action and transitions is set, the currently
               referenced state must have a transition to the new state. If transitions is an empty list, it means the current state is
               a final state and no further transitions are allowed. If transitions is not set, the validation is turned off. When
               performing a transitionState update action, any other state of the same type can be transitioned to
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StateTransitionsState.__new__(_StateTransitionsState)

        __props__.__dict__["from_"] = from_
        __props__.__dict__["tos"] = tos
        return StateTransitions(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> pulumi.Output[str]:
        """
        ID of the state to transition from
        """
        return pulumi.get(self, "from_")

    @property
    @pulumi.getter
    def tos(self) -> pulumi.Output[Sequence[str]]:
        """
        Transitions are a way to describe possible transformations of the current state to other states of the same type (for
        example: Initial -> Shipped). When performing a transitionState update action and transitions is set, the currently
        referenced state must have a transition to the new state. If transitions is an empty list, it means the current state is
        a final state and no further transitions are allowed. If transitions is not set, the validation is turned off. When
        performing a transitionState update action, any other state of the same type can be transitioned to
        """
        return pulumi.get(self, "tos")

