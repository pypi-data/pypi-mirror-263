# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProductSelectionArgs', 'ProductSelection']

@pulumi.input_type
class ProductSelectionArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 key: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ProductSelection resource.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] name: Name of the ProductSelection.
        :param pulumi.Input[str] key: User-defined unique identifier of the ProductSelection.
        :param pulumi.Input[str] mode: Specifies in which way the Products are assigned to the ProductSelection.Currently, the only way of doing this is to
               specify each Product individually, either by including or excluding them explicitly.Default: Individual
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Name of the ProductSelection.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        User-defined unique identifier of the ProductSelection.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies in which way the Products are assigned to the ProductSelection.Currently, the only way of doing this is to
        specify each Product individually, either by including or excluding them explicitly.Default: Individual
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class _ProductSelectionState:
    def __init__(__self__, *,
                 key: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 version: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering ProductSelection resources.
        :param pulumi.Input[str] key: User-defined unique identifier of the ProductSelection.
        :param pulumi.Input[str] mode: Specifies in which way the Products are assigned to the ProductSelection.Currently, the only way of doing this is to
               specify each Product individually, either by including or excluding them explicitly.Default: Individual
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] name: Name of the ProductSelection.
        :param pulumi.Input[int] version: Current version of the ProductSelection.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        User-defined unique identifier of the ProductSelection.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies in which way the Products are assigned to the ProductSelection.Currently, the only way of doing this is to
        specify each Product individually, either by including or excluding them explicitly.Default: Individual
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Name of the ProductSelection.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[int]]:
        """
        Current version of the ProductSelection.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "version", value)


class ProductSelection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a ProductSelection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] key: User-defined unique identifier of the ProductSelection.
        :param pulumi.Input[str] mode: Specifies in which way the Products are assigned to the ProductSelection.Currently, the only way of doing this is to
               specify each Product individually, either by including or excluding them explicitly.Default: Individual
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] name: Name of the ProductSelection.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProductSelectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a ProductSelection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProductSelectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProductSelectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProductSelectionArgs.__new__(ProductSelectionArgs)

            __props__.__dict__["key"] = key
            __props__.__dict__["mode"] = mode
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["version"] = None
        super(ProductSelection, __self__).__init__(
            'commercetools:index/productSelection:ProductSelection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            key: Optional[pulumi.Input[str]] = None,
            mode: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            version: Optional[pulumi.Input[int]] = None) -> 'ProductSelection':
        """
        Get an existing ProductSelection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] key: User-defined unique identifier of the ProductSelection.
        :param pulumi.Input[str] mode: Specifies in which way the Products are assigned to the ProductSelection.Currently, the only way of doing this is to
               specify each Product individually, either by including or excluding them explicitly.Default: Individual
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] name: Name of the ProductSelection.
        :param pulumi.Input[int] version: Current version of the ProductSelection.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProductSelectionState.__new__(_ProductSelectionState)

        __props__.__dict__["key"] = key
        __props__.__dict__["mode"] = mode
        __props__.__dict__["name"] = name
        __props__.__dict__["version"] = version
        return ProductSelection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Output[Optional[str]]:
        """
        User-defined unique identifier of the ProductSelection.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Output[str]:
        """
        Specifies in which way the Products are assigned to the ProductSelection.Currently, the only way of doing this is to
        specify each Product individually, either by including or excluding them explicitly.Default: Individual
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Name of the ProductSelection.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> pulumi.Output[int]:
        """
        Current version of the ProductSelection.
        """
        return pulumi.get(self, "version")

