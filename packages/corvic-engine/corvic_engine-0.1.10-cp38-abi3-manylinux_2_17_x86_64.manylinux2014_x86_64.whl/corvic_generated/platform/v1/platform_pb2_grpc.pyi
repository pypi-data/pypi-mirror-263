"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import collections.abc
import corvic_generated.platform.v1.platform_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar('_T')

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta):
    ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore
    ...

class PlatformServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    GetOrg: grpc.UnaryUnaryMultiCallable[
        corvic_generated.platform.v1.platform_pb2.GetOrgRequest,
        corvic_generated.platform.v1.platform_pb2.GetOrgResponse,
    ]
    CreateOrg: grpc.UnaryUnaryMultiCallable[
        corvic_generated.platform.v1.platform_pb2.CreateOrgRequest,
        corvic_generated.platform.v1.platform_pb2.CreateOrgResponse,
    ]
    ListOrgs: grpc.UnaryUnaryMultiCallable[
        corvic_generated.platform.v1.platform_pb2.ListOrgsRequest,
        corvic_generated.platform.v1.platform_pb2.ListOrgsResponse,
    ]
    GetUser: grpc.UnaryUnaryMultiCallable[
        corvic_generated.platform.v1.platform_pb2.GetUserRequest,
        corvic_generated.platform.v1.platform_pb2.GetUserResponse,
    ]
    CreateUser: grpc.UnaryUnaryMultiCallable[
        corvic_generated.platform.v1.platform_pb2.CreateUserRequest,
        corvic_generated.platform.v1.platform_pb2.CreateUserResponse,
    ]
    ListOrgUsers: grpc.UnaryUnaryMultiCallable[
        corvic_generated.platform.v1.platform_pb2.ListOrgUsersRequest,
        corvic_generated.platform.v1.platform_pb2.ListOrgUsersResponse,
    ]

class PlatformServiceAsyncStub:
    GetOrg: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.platform.v1.platform_pb2.GetOrgRequest,
        corvic_generated.platform.v1.platform_pb2.GetOrgResponse,
    ]
    CreateOrg: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.platform.v1.platform_pb2.CreateOrgRequest,
        corvic_generated.platform.v1.platform_pb2.CreateOrgResponse,
    ]
    ListOrgs: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.platform.v1.platform_pb2.ListOrgsRequest,
        corvic_generated.platform.v1.platform_pb2.ListOrgsResponse,
    ]
    GetUser: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.platform.v1.platform_pb2.GetUserRequest,
        corvic_generated.platform.v1.platform_pb2.GetUserResponse,
    ]
    CreateUser: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.platform.v1.platform_pb2.CreateUserRequest,
        corvic_generated.platform.v1.platform_pb2.CreateUserResponse,
    ]
    ListOrgUsers: grpc.aio.UnaryUnaryMultiCallable[
        corvic_generated.platform.v1.platform_pb2.ListOrgUsersRequest,
        corvic_generated.platform.v1.platform_pb2.ListOrgUsersResponse,
    ]

class PlatformServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def GetOrg(
        self,
        request: corvic_generated.platform.v1.platform_pb2.GetOrgRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.platform.v1.platform_pb2.GetOrgResponse, collections.abc.Awaitable[corvic_generated.platform.v1.platform_pb2.GetOrgResponse]]: ...
    @abc.abstractmethod
    def CreateOrg(
        self,
        request: corvic_generated.platform.v1.platform_pb2.CreateOrgRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.platform.v1.platform_pb2.CreateOrgResponse, collections.abc.Awaitable[corvic_generated.platform.v1.platform_pb2.CreateOrgResponse]]: ...
    @abc.abstractmethod
    def ListOrgs(
        self,
        request: corvic_generated.platform.v1.platform_pb2.ListOrgsRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.platform.v1.platform_pb2.ListOrgsResponse, collections.abc.Awaitable[corvic_generated.platform.v1.platform_pb2.ListOrgsResponse]]: ...
    @abc.abstractmethod
    def GetUser(
        self,
        request: corvic_generated.platform.v1.platform_pb2.GetUserRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.platform.v1.platform_pb2.GetUserResponse, collections.abc.Awaitable[corvic_generated.platform.v1.platform_pb2.GetUserResponse]]: ...
    @abc.abstractmethod
    def CreateUser(
        self,
        request: corvic_generated.platform.v1.platform_pb2.CreateUserRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.platform.v1.platform_pb2.CreateUserResponse, collections.abc.Awaitable[corvic_generated.platform.v1.platform_pb2.CreateUserResponse]]: ...
    @abc.abstractmethod
    def ListOrgUsers(
        self,
        request: corvic_generated.platform.v1.platform_pb2.ListOrgUsersRequest,
        context: _ServicerContext,
    ) -> typing.Union[corvic_generated.platform.v1.platform_pb2.ListOrgUsersResponse, collections.abc.Awaitable[corvic_generated.platform.v1.platform_pb2.ListOrgUsersResponse]]: ...

def add_PlatformServiceServicer_to_server(servicer: PlatformServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
