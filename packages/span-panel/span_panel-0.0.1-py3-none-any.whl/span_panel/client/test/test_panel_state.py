"""
    Span

    Span Panel REST API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""

from __future__ import annotations

import unittest

from span_panel.client.models.panel_state import PanelState


class TestPanelState(unittest.TestCase):
    """PanelState unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PanelState:
        """Test PanelState
        include_option is a boolean, when False only required
        params are included, when True both required and
        optional params are included"""
        # uncomment below to create an instance of `PanelState`
        """
        model = PanelState()  # noqa: E501
        if include_optional:
            return PanelState(
                main_relay_state = 'UNKNOWN',
                main_meter_energy = span_panel.client.models.main_meter_energy.MainMeterEnergy(
                    produced_energy_wh = 1.337, 
                    consumed_energy_wh = 1.337, ),
                instant_grid_power_w = 1.337,
                feedthrough_power_w = 1.337,
                feedthrough_energy = span_panel.client.models.feedthrough_energy.FeedthroughEnergy(
                    produced_energy_wh = 1.337, 
                    consumed_energy_wh = 1.337, ),
                grid_sample_start_ms = 56,
                grid_sample_end_ms = 56,
                dsm_grid_state = '',
                dsm_state = '',
                current_run_config = '',
                branches = [
                    span_panel.client.models.branch.Branch(
                        id = 56, 
                        relay_state = 'UNKNOWN', 
                        instant_power_w = 1.337, 
                        imported_active_energy_wh = 1.337, 
                        exported_active_energy_wh = 1.337, 
                        measure_start_ts_ms = 56, 
                        measure_duration_ms = 56, 
                        is_measure_valid = True, )
                    ]
            )
        else:
            return PanelState(
                main_relay_state = 'UNKNOWN',
                main_meter_energy = span_panel.client.models.main_meter_energy.MainMeterEnergy(
                    produced_energy_wh = 1.337, 
                    consumed_energy_wh = 1.337, ),
                instant_grid_power_w = 1.337,
                feedthrough_power_w = 1.337,
                feedthrough_energy = span_panel.client.models.feedthrough_energy.FeedthroughEnergy(
                    produced_energy_wh = 1.337, 
                    consumed_energy_wh = 1.337, ),
                grid_sample_start_ms = 56,
                grid_sample_end_ms = 56,
                dsm_grid_state = '',
                dsm_state = '',
                current_run_config = '',
                branches = [
                    span_panel.client.models.branch.Branch(
                        id = 56, 
                        relay_state = 'UNKNOWN', 
                        instant_power_w = 1.337, 
                        imported_active_energy_wh = 1.337, 
                        exported_active_energy_wh = 1.337, 
                        measure_start_ts_ms = 56, 
                        measure_duration_ms = 56, 
                        is_measure_valid = True, )
                    ],
        )
        """

    def testPanelState(self):
        """Test PanelState"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == "__main__":
    unittest.main()
