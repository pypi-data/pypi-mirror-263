"""
    Span

    Span Panel REST API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Dict

from pydantic import BaseModel, Field

from span_panel.client.models.circuit import Circuit


class CircuitsOut(BaseModel):
    """
    CircuitsOut
    """

    circuits: Dict[str, Circuit] = Field(...)
    __properties = ["circuits"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CircuitsOut:
        """Create an instance of CircuitsOut from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in circuits (dict)
        _field_dict = {}
        if self.circuits:
            for _key in self.circuits:
                if self.circuits[_key]:
                    _field_dict[_key] = self.circuits[_key].to_dict()
            _dict["circuits"] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CircuitsOut:
        """Create an instance of CircuitsOut from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CircuitsOut.parse_obj(obj)

        _obj = CircuitsOut.parse_obj(
            {
                "circuits": (
                    dict(
                        (_k, Circuit.from_dict(_v))
                        for _k, _v in obj.get("circuits").items()
                    )
                    if obj.get("circuits") is not None
                    else None
                ),
            },
        )
        return _obj
