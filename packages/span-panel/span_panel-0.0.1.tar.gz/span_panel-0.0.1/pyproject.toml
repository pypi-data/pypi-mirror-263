[build-system]
requires = [
  "hatchling",
  "hatch-vcs",
  "wheel",
]
build-backend = "hatchling.build"

## core metadata
[project]
name = "span-panel"
description = "Unofficial SPAN Panel Python API and CLI"
readme = "README.md"
requires-python = ">=3.9"
authors = [
    {name="Christopher Bailey", email="cbailey@mort.is"},
]
maintainers = [
    {name="Christopher Bailey", email="cbailey@mort.is"},
]
license = {text="MIT"}
keywords = ["SPAN", "SPAN Panel", "Home Automation", "Home Assistant", "Python"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Build Tools",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12"
]
dynamic = ["version"]
dependencies = [
    "urllib3 >= 1.25.3",
    "python-dateutil",
    "aiohttp",
    "pydantic!=1.9.1,<2.0",
    "aenum",
]

[project.urls]
"Source Code" = "https://github.com/AngellusMortis/span-panel/"
"Documentation" = "https://angellusmortis.github.io/span-panel/latest/"
"Bug Reports" = "https://github.com/AngellusMortis/span-panel/issues/"
"Changelog" = "https://github.com/AngellusMortis/span-panel/releases/"

[project.optional-dependencies]
dev = [
    "base36",
    "black",
    "build",
    "coverage[toml]",
    "ipython",
    "isort",
    "mike",
    "mkdocs-git-revision-date-localized-plugin",
    "mkdocs-include-markdown-plugin",
    "mkdocs-material",
    "mkdocstrings[python]",
    "mypy",
    "pydocstyle",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-timeout>=1.2.1",
    "pytest-xdist[psutil]",
    "pytest",
    "ruff",
    "termcolor",
]

[project.scripts]
span-panel = "span_panel.__main__:start"

## build backend metadata
[tool.hatch]
[tool.hatch.version]
source = "vcs"

[tool.hatch.build]
include = ["span_panel"]
exclude = ["tests"]

[tool.hatch.metadata]
allow-direct-references = true

## linting metadata
[tool.black]
line-length = 88
target-version = ["py39", "py310", "py311", "py312"]
include = "\\.pyi?$"
exclude = "(/(\\.*|_build|buck-out|build|dist|migrations)/)"

[tool.ruff]
exclude = ["*migrations*", ".*", "/usr/local/lib", "dist", "venv"]
line-length = 88
target-version = "py39"

[tool.ruff.lint]
select = ["ALL"]
ignore = ["AIR", "ANN", "ARG", "C901", "CPY", "D106", "D202", "D203", "D213", "D417", "DJ", "E501", "FBT003", "FIX", "I", "NPY", "PD", "PERF203", "PLR0904", "PLR0913", "PLR1711", "PLR6301", "RUF012", "S", "TD002", "TD003", "W505"]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"**/*.py" = [
    "UP007",  # TODO: upgrade to pydantic v2
    # TODO
    "A003",
    "B008",
    "BLE001",
    "D",
    "EM",
    "FBT",
    "FBT001",
    "PLC0415",
    "PLR0911",
    "PLR0912",
    "PLR0917",
    "PLR2004",
    "PTH",
    "SLF001",
    "TCH",
    "TD",
    "TRY",
]
"span_panel/client/**/*.py" = ["ALL"]
"**/test_*.py" = ["FBT", "D", "SLF001", "PLR2004"]
"tests/**/*.py" = ["FBT", "D", "SLF001", "PLR2004"]

[tool.isort]
profile = "black"
line_length = 88
atomic = true
skip_glob = ["**/migrations/*"]
add_imports = ["from __future__ import annotations"]
group_by_package = true
force_sort_within_sections = true
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.mypy]
python_version = "3.10"
warn_unused_configs = true
disable_error_code = "no-redef"
exclude = ["dist", "/usr/local/lib", "codeql", "span_panel/client"]
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
no_implicit_reexport = true
strict_equality = true
implicit_reexport = true
plugins = "pydantic.mypy"

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false

[[tool.mypy.overrides]]
module = "pytest_benchmark.fixture"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "av.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "async_timeout.*"
ignore_missing_imports = true

## test metadata
[tool.coverage.run]
branch = true
omit = []
disable_warnings = ["no-data-collected", "couldnt-parse"]
plugins = []
relative_files = true
dynamic_context = "test_function"

[tool.coverage.report]
skip_covered = false
skip_empty = true
exclude_also = ["if TYPE_CHECKING:"]

[tool.coverage.html]
skip_covered = false
show_contexts = true

[tool.pytest.ini_options]
addopts = "--strict-markers -ra -Wd --ignore=.* --no-cov-on-fail --cov=span_panel --cov-append --maxfail=10 -n=auto"
filterwarnings = []
asyncio_mode = "strict"
testpaths = ["tests"]
timeout_func_only = false
