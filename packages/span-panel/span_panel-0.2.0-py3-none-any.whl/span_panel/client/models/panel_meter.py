# coding: utf-8

"""
    Span

    Span Panel REST API

    The version of the OpenAPI document: v1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import pprint
import re  # noqa: F401

import orjson as json
from pydantic import BaseModel, Field

from span_panel.client.models.feedthrough_energy import FeedthroughEnergy
from span_panel.client.models.main_meter_energy import MainMeterEnergy


class PanelMeter(BaseModel):
    """
    PanelMeter
    """

    main_meter: MainMeterEnergy = Field(..., alias="mainMeter")
    feedthrough: FeedthroughEnergy = Field(...)
    __properties = ["mainMeter", "feedthrough"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PanelMeter:
        """Create an instance of PanelMeter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of main_meter
        if self.main_meter:
            _dict["mainMeter"] = self.main_meter.to_dict()
        # override the default output from pydantic by calling `to_dict()` of feedthrough
        if self.feedthrough:
            _dict["feedthrough"] = self.feedthrough.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PanelMeter:
        """Create an instance of PanelMeter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PanelMeter.parse_obj(obj)

        _obj = PanelMeter.parse_obj(
            {
                "main_meter": (
                    MainMeterEnergy.from_dict(obj.get("mainMeter"))
                    if obj.get("mainMeter") is not None
                    else None
                ),
                "feedthrough": (
                    FeedthroughEnergy.from_dict(obj.get("feedthrough"))
                    if obj.get("feedthrough") is not None
                    else None
                ),
            }
        )
        return _obj
