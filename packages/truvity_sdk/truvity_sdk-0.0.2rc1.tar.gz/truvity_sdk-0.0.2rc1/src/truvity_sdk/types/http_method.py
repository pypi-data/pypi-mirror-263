# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class HttpMethod(str, enum.Enum):
    """
    HTTP Method (to report problems).
    """

    GET = "GET"
    HEAD = "HEAD"
    POST = "POST"
    PUT = "PUT"
    PATCH = "PATCH"
    DELETE = "DELETE"
    CONNECT = "CONNECT"
    OPTIONS = "OPTIONS"
    TRACE = "TRACE"

    def visit(
        self,
        get: typing.Callable[[], T_Result],
        head: typing.Callable[[], T_Result],
        post: typing.Callable[[], T_Result],
        put: typing.Callable[[], T_Result],
        patch: typing.Callable[[], T_Result],
        delete: typing.Callable[[], T_Result],
        connect: typing.Callable[[], T_Result],
        options: typing.Callable[[], T_Result],
        trace: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is HttpMethod.GET:
            return get()
        if self is HttpMethod.HEAD:
            return head()
        if self is HttpMethod.POST:
            return post()
        if self is HttpMethod.PUT:
            return put()
        if self is HttpMethod.PATCH:
            return patch()
        if self is HttpMethod.DELETE:
            return delete()
        if self is HttpMethod.CONNECT:
            return connect()
        if self is HttpMethod.OPTIONS:
            return options()
        if self is HttpMethod.TRACE:
            return trace()
