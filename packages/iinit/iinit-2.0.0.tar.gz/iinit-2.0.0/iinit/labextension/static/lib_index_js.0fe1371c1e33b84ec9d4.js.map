{"version":3,"file":"lib_index_js.0fe1371c1e33b84ec9d4.js","mappings":";;;;;;;;;;;;;;;AAU8B;AAE9B;;GAEG;AACH,MAAM,MAAM,GAAgC;IAC1C,EAAE,EAAE,cAAc;IAClB,WAAW,EAAE,2FAA2F;IACxG,SAAS,EAAE,IAAI;IACf,QAAQ,EAAE,CAAC,kEAAgB,CAAC;IAC5B,QAAQ,EAAE,CAAC,GAAoB,EAAE,eAAiC,EAAE,EAAE;QACpE,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;QACxD,qDAAqD;QACrD,eAAe,CAAC,WAAW,CAAC,OAAO,CAAC,GAAE,EAAE;YACtC,2CAA2C;YAC3C,iCAAiC;YACjC,IAAI,QAAQ,GAAG,GAAG,CAAC,KAAiB,CAAC;YACrC,IAAI,KAAK,GAAG,QAAQ,CAAC,aAA8B,CAAC;YACpD,gCAAgC;YAChC,MAAM,OAAO,GAAG,eAAe,CAAC,aAAa;YAC7C,IAAI,QAAQ,GAAG,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,OAAO,CAAC;YAChC,4BAA4B;YAC5B,IAAI,KAAK,EAAE;gBACT,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAE,EAAE;oBACtB,iCAAiC;oBACjC,6DAA6D;oBAC7D,KAAM,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,GAAE,EAAE;wBAC3C,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,OAAQ,CAAC,MAAO,CAAC,uBAAuB,CAAC,OAAO,CAAC,GAAE,EAAE;;4BAEhF,+EAA+E;4BAC/E,IAAI,KAAK,GAAG,cAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,KAAK,0CAAE,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;4BAC9D,OAAO,CAAC,GAAG,CAAC,yCAAyC,GAAG,KAAK,CAAC,CAAC;4BAE/D,IAAI,KAAK,KAAK,IAAI,EAAE;gCAClB,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,wBAAwB,CAAC,CAAC;6BAChD;iCAAM;gCACL,iDAAiD;gCACjD,IAAI,QAAQ,GAAG,WAAK,CAAC,OAAO,CAAC,KAAK,0CAAE,KAAK,CAAC;gCAC1C,mDAAmD;gCACnD,0CAA0C;gCAC1C,6DAA6D;gCAC7D,IAAI,CAAC,GAAG,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,MAAM,CAAC,CAAC,iDAAiD;gCAC3E,8CAA8C;gCAC9C,IAAI,CAAC,EAAE;oCACL,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;wCAC1B,0EAA0E;wCAC1E,IAAI,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,OAAO,CAAC,EAAE;4CACzC,+BAA+B;4CAC/B,IAAI,QAAQ,EAAE;gDACZ,kBAAkB;gDAClB,QAAQ,CAAC,eAAe,GAAG,CAAC,CAAC;gDAC7B,4BAA4B;gDAC5B,+DAA+D;gDAC/D,oDAAoD;gDACpD,uBAAuB;gDACvB,yCAAyC;gDACzC,4DAA4D;gDAC5D,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;6CAC3C;yCACF;qCACF;iCACF;6BACF;wBAEH,CAAC,CAAC,CAAC;oBACL,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;IAEL,CAAC;CACF,CAAC;AAEF,iEAAe,MAAM,EAAC","sources":["webpack://iinit/./src/index.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin,\n  LabShell\n} from '@jupyterlab/application';\n\nimport {\n  INotebookTracker,\n  NotebookPanel,\n  // NotebookActions,\n} from '@jupyterlab/notebook';\n\n/**\n * Initialization data for the iinit extension.\n */\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'iinit:plugin',\n  description: 'A jupyter lab/notebook front-end extension for running/executing cells on kernel start-up',\n  autoStart: true,\n  requires: [INotebookTracker],\n  activate: (app: JupyterFrontEnd, notebookTracker: INotebookTracker) => {\n    console.log('JupyterLab extension iinit is activated!');\n    // Detect whether a new notebook file has been opened\n    notebookTracker.widgetAdded.connect(()=>{\n      // console.log(\"New Notebook File Opened\");\n      // get the current notebook panel\n      let labShell = app.shell as LabShell;\n      let panel = labShell.currentWidget as NotebookPanel;\n      // get the current/open notebook\n      const current = notebookTracker.currentWidget\n      let notebook = current?.content;\n      // check if panel is defined\n      if (panel) {\n        panel.revealed.then(()=>{\n          // console.log(\"Panel Revealed\");\n          // detect whether kernel has been loaded in jupyter shell lab\n          panel!.context.sessionContext.ready.then(()=>{\n            panel.context.sessionContext.session!.kernel!.connectionStatusChanged.connect(()=>{\n\n              // if notebook metadata is set as \"iinit:\": true, then run all cells at startup\n              let iinit = notebook?.model?.sharedModel.getMetadata(\"iinit\");\n              console.log(\"run all cells (notebook metadata iinit)\" + iinit);\n\n              if (iinit === true) {\n                app.commands.execute('notebook:run-all-cells');\n              } else {\n                // retrieve all the cells from the notebook panel\n                let cellList = panel.content.model?.cells;\n                // iterate over all the cells in the notebook panel\n                // check for cells having metadata \"iinit\"\n                // if so, execute the cell source at startup, otherwise don't\n                let l = cellList?.length; // store the number of cells (at notebook reveal)\n                // check if length is defined before iterating\n                if (l) {\n                  for (let i = 0; i < l; i++) {\n                    // if cell contains the iinit metadata then run the source code at startup\n                    if (cellList?.get(i).getMetadata(\"iinit\")) {\n                      // check if notebook is defined\n                      if (notebook) {\n                        // set active cell\n                        notebook.activeCellIndex = i;\n                        // get source code from cell\n                        // let source = notebook?.activeCell?.model.sharedModel.source;\n                        // console.log(\"metadata found at cell index \" + i);\n                        // console.log(source);\n                        // run the currently active/selected cell\n                        // app.commands.execute('notebook:run-cell-and-select-next')\n                        app.commands.execute('notebook:run-cell');\n                      }\n                    }\n                  }\n                }\n              }\n\n            });\n          });\n        });\n      }      \n    });\n\n  }\n};\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}