# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from shakenfist import etcd_pb2 as etcd__pb2


class KVStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Compact = channel.unary_unary(
                '/etcdserverpb.KV/Compact',
                request_serializer=etcd__pb2.CompactionRequest.SerializeToString,
                response_deserializer=etcd__pb2.CompactionResponse.FromString,
                )


class KVServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Compact(self, request, context):
        """Compact compacts the event history in the etcd key-value store. The key-value
        store should be periodically compacted or the event history will continue to grow
        indefinitely.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KVServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Compact': grpc.unary_unary_rpc_method_handler(
                    servicer.Compact,
                    request_deserializer=etcd__pb2.CompactionRequest.FromString,
                    response_serializer=etcd__pb2.CompactionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'etcdserverpb.KV', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class KV(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Compact(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/etcdserverpb.KV/Compact',
            etcd__pb2.CompactionRequest.SerializeToString,
            etcd__pb2.CompactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MaintenanceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Defragment = channel.unary_unary(
                '/etcdserverpb.Maintenance/Defragment',
                request_serializer=etcd__pb2.DefragmentRequest.SerializeToString,
                response_deserializer=etcd__pb2.DefragmentResponse.FromString,
                )


class MaintenanceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Defragment(self, request, context):
        """/ Defragment defragments a member's backend database to recover storage space.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MaintenanceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Defragment': grpc.unary_unary_rpc_method_handler(
                    servicer.Defragment,
                    request_deserializer=etcd__pb2.DefragmentRequest.FromString,
                    response_serializer=etcd__pb2.DefragmentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'etcdserverpb.Maintenance', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Maintenance(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Defragment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/etcdserverpb.Maintenance/Defragment',
            etcd__pb2.DefragmentRequest.SerializeToString,
            etcd__pb2.DefragmentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
