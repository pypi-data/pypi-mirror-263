# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2024.2.2
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conint, conlist
from authentik_client.models.auth_mode_enum import AuthModeEnum
from authentik_client.models.protocol_enum import ProtocolEnum
from authentik_client.models.rac_provider import RACProvider

class Endpoint(BaseModel):
    """
    Endpoint Serializer  # noqa: E501
    """
    pk: StrictStr = Field(...)
    name: StrictStr = Field(...)
    provider: StrictInt = Field(...)
    provider_obj: RACProvider = Field(...)
    protocol: ProtocolEnum = Field(...)
    host: StrictStr = Field(...)
    settings: Optional[Any] = None
    property_mappings: Optional[conlist(StrictStr)] = None
    auth_mode: AuthModeEnum = Field(...)
    launch_url: Optional[StrictStr] = Field(..., description="Build actual launch URL (the provider itself does not have one, just individual endpoints)")
    maximum_connections: Optional[conint(strict=True, le=2147483647, ge=-2147483648)] = None
    __properties = ["pk", "name", "provider", "provider_obj", "protocol", "host", "settings", "property_mappings", "auth_mode", "launch_url", "maximum_connections"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Endpoint:
        """Create an instance of Endpoint from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "pk",
                            "provider_obj",
                            "launch_url",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of provider_obj
        if self.provider_obj:
            _dict['provider_obj'] = self.provider_obj.to_dict()
        # set to None if settings (nullable) is None
        # and __fields_set__ contains the field
        if self.settings is None and "settings" in self.__fields_set__:
            _dict['settings'] = None

        # set to None if launch_url (nullable) is None
        # and __fields_set__ contains the field
        if self.launch_url is None and "launch_url" in self.__fields_set__:
            _dict['launch_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Endpoint:
        """Create an instance of Endpoint from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Endpoint.parse_obj(obj)

        _obj = Endpoint.parse_obj({
            "pk": obj.get("pk"),
            "name": obj.get("name"),
            "provider": obj.get("provider"),
            "provider_obj": RACProvider.from_dict(obj.get("provider_obj")) if obj.get("provider_obj") is not None else None,
            "protocol": obj.get("protocol"),
            "host": obj.get("host"),
            "settings": obj.get("settings"),
            "property_mappings": obj.get("property_mappings"),
            "auth_mode": obj.get("auth_mode"),
            "launch_url": obj.get("launch_url"),
            "maximum_connections": obj.get("maximum_connections")
        })
        return _obj


