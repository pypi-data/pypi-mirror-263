# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2024.2.2
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from authentik_client.models.application_request import ApplicationRequest
from authentik_client.models.model_request import ModelRequest
from authentik_client.models.provider_model_enum import ProviderModelEnum

class TransactionApplicationRequest(BaseModel):
    """
    Serializer for creating a provider and an application in one transaction  # noqa: E501
    """
    app: ApplicationRequest = Field(...)
    provider_model: ProviderModelEnum = Field(...)
    provider: ModelRequest = Field(...)
    __properties = ["app", "provider_model", "provider"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TransactionApplicationRequest:
        """Create an instance of TransactionApplicationRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of app
        if self.app:
            _dict['app'] = self.app.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provider
        if self.provider:
            _dict['provider'] = self.provider.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TransactionApplicationRequest:
        """Create an instance of TransactionApplicationRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TransactionApplicationRequest.parse_obj(obj)

        _obj = TransactionApplicationRequest.parse_obj({
            "app": ApplicationRequest.from_dict(obj.get("app")) if obj.get("app") is not None else None,
            "provider_model": obj.get("provider_model"),
            "provider": ModelRequest.from_dict(obj.get("provider")) if obj.get("provider") is not None else None
        })
        return _obj


