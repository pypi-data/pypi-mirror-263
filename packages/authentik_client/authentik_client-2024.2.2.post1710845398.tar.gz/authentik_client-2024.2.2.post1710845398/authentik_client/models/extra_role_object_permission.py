# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2024.2.2
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class ExtraRoleObjectPermission(BaseModel):
    """
    User permission with additional object-related data  # noqa: E501
    """
    id: StrictInt = Field(...)
    codename: StrictStr = Field(...)
    model: StrictStr = Field(...)
    app_label: StrictStr = Field(...)
    object_pk: StrictStr = Field(...)
    name: StrictStr = Field(...)
    app_label_verbose: StrictStr = Field(..., description="Get app label from permission's model")
    model_verbose: StrictStr = Field(..., description="Get model label from permission's model")
    object_description: Optional[StrictStr] = Field(..., description="Get model description from attached model. This operation takes at least one additional query, and the description is only shown if the user/role has the view_ permission on the object")
    __properties = ["id", "codename", "model", "app_label", "object_pk", "name", "app_label_verbose", "model_verbose", "object_description"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExtraRoleObjectPermission:
        """Create an instance of ExtraRoleObjectPermission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "id",
                            "codename",
                            "model",
                            "app_label",
                            "object_pk",
                            "name",
                            "app_label_verbose",
                            "model_verbose",
                            "object_description",
                          },
                          exclude_none=True)
        # set to None if object_description (nullable) is None
        # and __fields_set__ contains the field
        if self.object_description is None and "object_description" in self.__fields_set__:
            _dict['object_description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExtraRoleObjectPermission:
        """Create an instance of ExtraRoleObjectPermission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExtraRoleObjectPermission.parse_obj(obj)

        _obj = ExtraRoleObjectPermission.parse_obj({
            "id": obj.get("id"),
            "codename": obj.get("codename"),
            "model": obj.get("model"),
            "app_label": obj.get("app_label"),
            "object_pk": obj.get("object_pk"),
            "name": obj.get("name"),
            "app_label_verbose": obj.get("app_label_verbose"),
            "model_verbose": obj.get("model_verbose"),
            "object_description": obj.get("object_description")
        })
        return _obj


