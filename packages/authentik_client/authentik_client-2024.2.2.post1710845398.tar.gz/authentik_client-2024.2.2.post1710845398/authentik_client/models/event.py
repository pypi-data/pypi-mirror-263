# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2024.2.2
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, Optional
from pydantic import BaseModel, Field, StrictStr
from authentik_client.models.event_actions import EventActions

class Event(BaseModel):
    """
    Event Serializer  # noqa: E501
    """
    pk: StrictStr = Field(...)
    user: Optional[Any] = None
    action: EventActions = Field(...)
    app: StrictStr = Field(...)
    context: Optional[Any] = None
    client_ip: Optional[StrictStr] = None
    created: datetime = Field(...)
    expires: Optional[datetime] = None
    brand: Optional[Any] = None
    __properties = ["pk", "user", "action", "app", "context", "client_ip", "created", "expires", "brand"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Event:
        """Create an instance of Event from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "pk",
                            "created",
                          },
                          exclude_none=True)
        # set to None if user (nullable) is None
        # and __fields_set__ contains the field
        if self.user is None and "user" in self.__fields_set__:
            _dict['user'] = None

        # set to None if context (nullable) is None
        # and __fields_set__ contains the field
        if self.context is None and "context" in self.__fields_set__:
            _dict['context'] = None

        # set to None if client_ip (nullable) is None
        # and __fields_set__ contains the field
        if self.client_ip is None and "client_ip" in self.__fields_set__:
            _dict['client_ip'] = None

        # set to None if brand (nullable) is None
        # and __fields_set__ contains the field
        if self.brand is None and "brand" in self.__fields_set__:
            _dict['brand'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Event:
        """Create an instance of Event from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Event.parse_obj(obj)

        _obj = Event.parse_obj({
            "pk": obj.get("pk"),
            "user": obj.get("user"),
            "action": obj.get("action"),
            "app": obj.get("app"),
            "context": obj.get("context"),
            "client_ip": obj.get("client_ip"),
            "created": obj.get("created"),
            "expires": obj.get("expires"),
            "brand": obj.get("brand")
        })
        return _obj


