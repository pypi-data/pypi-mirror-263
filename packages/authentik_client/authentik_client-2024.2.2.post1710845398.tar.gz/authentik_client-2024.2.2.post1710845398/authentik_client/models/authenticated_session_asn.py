# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2024.2.2
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class AuthenticatedSessionAsn(BaseModel):
    """
    Get ASN Data  # noqa: E501
    """
    asn: StrictInt = Field(...)
    as_org: Optional[StrictStr] = Field(...)
    network: Optional[StrictStr] = Field(...)
    __properties = ["asn", "as_org", "network"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuthenticatedSessionAsn:
        """Create an instance of AuthenticatedSessionAsn from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if as_org (nullable) is None
        # and __fields_set__ contains the field
        if self.as_org is None and "as_org" in self.__fields_set__:
            _dict['as_org'] = None

        # set to None if network (nullable) is None
        # and __fields_set__ contains the field
        if self.network is None and "network" in self.__fields_set__:
            _dict['network'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuthenticatedSessionAsn:
        """Create an instance of AuthenticatedSessionAsn from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AuthenticatedSessionAsn.parse_obj(obj)

        _obj = AuthenticatedSessionAsn.parse_obj({
            "asn": obj.get("asn"),
            "as_org": obj.get("as_org"),
            "network": obj.get("network")
        })
        return _obj


