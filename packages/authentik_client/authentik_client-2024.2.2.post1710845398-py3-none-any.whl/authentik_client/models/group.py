# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2024.2.2
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist, constr
from authentik_client.models.group_member import GroupMember
from authentik_client.models.role import Role

class Group(BaseModel):
    """
    Group Serializer  # noqa: E501
    """
    pk: StrictStr = Field(...)
    num_pk: StrictInt = Field(...)
    name: constr(strict=True, max_length=80) = Field(...)
    is_superuser: Optional[StrictBool] = Field(None, description="Users added to this group will be superusers.")
    parent: Optional[StrictStr] = None
    parent_name: Optional[StrictStr] = Field(...)
    users: Optional[conlist(StrictInt)] = None
    users_obj: conlist(GroupMember) = Field(...)
    attributes: Optional[Dict[str, Any]] = None
    roles: Optional[conlist(StrictStr)] = None
    roles_obj: conlist(Role) = Field(...)
    __properties = ["pk", "num_pk", "name", "is_superuser", "parent", "parent_name", "users", "users_obj", "attributes", "roles", "roles_obj"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Group:
        """Create an instance of Group from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "pk",
                            "num_pk",
                            "parent_name",
                            "users_obj",
                            "roles_obj",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in users_obj (list)
        _items = []
        if self.users_obj:
            for _item in self.users_obj:
                if _item:
                    _items.append(_item.to_dict())
            _dict['users_obj'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in roles_obj (list)
        _items = []
        if self.roles_obj:
            for _item in self.roles_obj:
                if _item:
                    _items.append(_item.to_dict())
            _dict['roles_obj'] = _items
        # set to None if parent (nullable) is None
        # and __fields_set__ contains the field
        if self.parent is None and "parent" in self.__fields_set__:
            _dict['parent'] = None

        # set to None if parent_name (nullable) is None
        # and __fields_set__ contains the field
        if self.parent_name is None and "parent_name" in self.__fields_set__:
            _dict['parent_name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Group:
        """Create an instance of Group from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Group.parse_obj(obj)

        _obj = Group.parse_obj({
            "pk": obj.get("pk"),
            "num_pk": obj.get("num_pk"),
            "name": obj.get("name"),
            "is_superuser": obj.get("is_superuser"),
            "parent": obj.get("parent"),
            "parent_name": obj.get("parent_name"),
            "users": obj.get("users"),
            "users_obj": [GroupMember.from_dict(_item) for _item in obj.get("users_obj")] if obj.get("users_obj") is not None else None,
            "attributes": obj.get("attributes"),
            "roles": obj.get("roles"),
            "roles_obj": [Role.from_dict(_item) for _item in obj.get("roles_obj")] if obj.get("roles_obj") is not None else None
        })
        return _obj


