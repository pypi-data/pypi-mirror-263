# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2024.2.2
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from authentik_client.models.endpoint import Endpoint
from authentik_client.models.group_member import GroupMember
from authentik_client.models.rac_provider import RACProvider

class ConnectionToken(BaseModel):
    """
    ConnectionToken Serializer  # noqa: E501
    """
    pk: Optional[StrictStr] = None
    provider: StrictInt = Field(...)
    provider_obj: RACProvider = Field(...)
    endpoint: StrictStr = Field(...)
    endpoint_obj: Endpoint = Field(...)
    user: GroupMember = Field(...)
    __properties = ["pk", "provider", "provider_obj", "endpoint", "endpoint_obj", "user"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConnectionToken:
        """Create an instance of ConnectionToken from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "provider_obj",
                            "endpoint_obj",
                            "user",
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of provider_obj
        if self.provider_obj:
            _dict['provider_obj'] = self.provider_obj.to_dict()
        # override the default output from pydantic by calling `to_dict()` of endpoint_obj
        if self.endpoint_obj:
            _dict['endpoint_obj'] = self.endpoint_obj.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user:
            _dict['user'] = self.user.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConnectionToken:
        """Create an instance of ConnectionToken from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ConnectionToken.parse_obj(obj)

        _obj = ConnectionToken.parse_obj({
            "pk": obj.get("pk"),
            "provider": obj.get("provider"),
            "provider_obj": RACProvider.from_dict(obj.get("provider_obj")) if obj.get("provider_obj") is not None else None,
            "endpoint": obj.get("endpoint"),
            "endpoint_obj": Endpoint.from_dict(obj.get("endpoint_obj")) if obj.get("endpoint_obj") is not None else None,
            "user": GroupMember.from_dict(obj.get("user")) if obj.get("user") is not None else None
        })
        return _obj


