# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2024.2.2
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictBool, constr

class PatchedTenantRequest(BaseModel):
    """
    Tenant Serializer  # noqa: E501
    """
    schema_name: Optional[constr(strict=True, max_length=63, min_length=1)] = None
    name: Optional[constr(strict=True, min_length=1)] = None
    ready: Optional[StrictBool] = None
    __properties = ["schema_name", "name", "ready"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PatchedTenantRequest:
        """Create an instance of PatchedTenantRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PatchedTenantRequest:
        """Create an instance of PatchedTenantRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PatchedTenantRequest.parse_obj(obj)

        _obj = PatchedTenantRequest.parse_obj({
            "schema_name": obj.get("schema_name"),
            "name": obj.get("name"),
            "ready": obj.get("ready")
        })
        return _obj


