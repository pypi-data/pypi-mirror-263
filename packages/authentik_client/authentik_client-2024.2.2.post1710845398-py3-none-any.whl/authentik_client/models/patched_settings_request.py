# coding: utf-8

"""
    authentik

    Making authentication simple.

    The version of the OpenAPI document: 2024.2.2
    Contact: hello@goauthentik.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional
from pydantic import BaseModel, Field, StrictBool, constr

class PatchedSettingsRequest(BaseModel):
    """
    Settings Serializer  # noqa: E501
    """
    avatars: Optional[constr(strict=True, min_length=1)] = Field(None, description="Configure how authentik should show avatars for users.")
    default_user_change_name: Optional[StrictBool] = Field(None, description="Enable the ability for users to change their name.")
    default_user_change_email: Optional[StrictBool] = Field(None, description="Enable the ability for users to change their email address.")
    default_user_change_username: Optional[StrictBool] = Field(None, description="Enable the ability for users to change their username.")
    event_retention: Optional[constr(strict=True, min_length=1)] = Field(None, description="Events will be deleted after this duration.(Format: weeks=3;days=2;hours=3,seconds=2).")
    footer_links: Optional[Any] = Field(None, description="The option configures the footer links on the flow executor pages.")
    gdpr_compliance: Optional[StrictBool] = Field(None, description="When enabled, all the events caused by a user will be deleted upon the user's deletion.")
    impersonation: Optional[StrictBool] = Field(None, description="Globally enable/disable impersonation.")
    __properties = ["avatars", "default_user_change_name", "default_user_change_email", "default_user_change_username", "event_retention", "footer_links", "gdpr_compliance", "impersonation"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PatchedSettingsRequest:
        """Create an instance of PatchedSettingsRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if footer_links (nullable) is None
        # and __fields_set__ contains the field
        if self.footer_links is None and "footer_links" in self.__fields_set__:
            _dict['footer_links'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PatchedSettingsRequest:
        """Create an instance of PatchedSettingsRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PatchedSettingsRequest.parse_obj(obj)

        _obj = PatchedSettingsRequest.parse_obj({
            "avatars": obj.get("avatars"),
            "default_user_change_name": obj.get("default_user_change_name"),
            "default_user_change_email": obj.get("default_user_change_email"),
            "default_user_change_username": obj.get("default_user_change_username"),
            "event_retention": obj.get("event_retention"),
            "footer_links": obj.get("footer_links"),
            "gdpr_compliance": obj.get("gdpr_compliance"),
            "impersonation": obj.get("impersonation")
        })
        return _obj


