{"version":3,"file":"lib_index_js.e16bb6d1e36f319eceaa.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACsH;AAC7B;AACzF,8BAA8B,mFAA2B,CAAC,wGAAqC;AAC/F;AACA,gNAAgN,qBAAqB,KAAK,OAAO,oFAAoF,KAAK,KAAK,UAAU,gMAAgM,qBAAqB,KAAK,mBAAmB;AACtkB;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;;ACPvC;AACsH;AAC7B;AACW;AACpG,8BAA8B,mFAA2B,CAAC,wGAAqC;AAC/F,0BAA0B,qFAAiC;AAC3D;AACA,mDAAmD,kEAAkE;AACrH;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;;;;ACTO;AAC9C;AACO,0BAA0B,wDAAM;AACvC;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,qCAAqC;AAC5C;AACA;AACA,6BAA6B,wBAAwB,mBAAmB;AACxE;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,kBAAkB,wDAAM,YAAY,aAAa,GAAG,wDAAM,gBAAgB,iBAAiB;AAC3F,KAAK;AACL;AACO;AACP;AACA;AACA;AACA;AACA,kBAAkB,wDAAM,YAAY,aAAa;AACjD,KAAK;AACL;AACO;AACP;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7EmD;AACqB;AACxE,YAAY,SAAS;AAC0D;AACzB;AACR;AACN;AACJ;AACpC;AACO;AACP,IAAI,gEAAU;AACd;AACA,kBAAkB,+CAAS;AAC3B;AACA,kBAAkB,wDAAM,YAAY,aAAa;AACjD,KAAK;AACL;AACO;AACP,IAAI,yDAAW;AACf;AACA,YAAY,8DAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gEAAU;AAClB;AACA,sBAAsB,oDAAc;AACpC;AACA,sBAAsB,wDAAM,YAAY,aAAa;AACrD,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA;AACA;AACA,oBAAoB,sDAAQ;AAC5B;AACA,6BAA6B,6DAAU;AACvC,gDAAgD,6DAAU;AAC1D;AACA;AACA;AACA;AACA;AACA,QAAQ,iDAAO;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,8DAAY,2CAA2C,iBAAiB;AAC5F;AACA;AACA;AACA;AACA,gBAAgB,8DAAY,2CAA2C,iBAAiB;AACxF;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP,YAAY,WAAW;AACvB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,uDAAgB;AACvD,YAAY,qDAAW;AACvB,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,0BAA0B,uCAAuC;AACjE;AACA;AACA;AACA,wBAAwB,6DAAU;AAClC,iDAAO;AACP;AACA;AACA;AACA;AACA,CAAC;AACM;AACP,sBAAsB;AACtB;AACA,8BAA8B,qEAAuB;AACrD;AACA,YAAY,8DAAY;AACxB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,SAAS;AACT;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;ACtIA;AACA;AACA;AACO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS,SAAS;AAClB,KAAK;AACL;AACO;AACP;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9CuD;AACO;AACb;AACF;AAC4B;AACrC;AACc;AACxB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe;AAC9B,eAAe,2DAAS;AACxB;AACA;AACA;AACA,QAAQ,+CAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,gDAAQ;AACpB;AACA,KAAK;AACL,sBAAsB,wCAAwC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,qDAAa;AAC7B;AACA,SAAS;AACT,0BAA0B,yCAAyC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,wEAAmB,EAAE,yDAAQ;AAC7D;AACA,cAAc,2DAAuB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,iEAAmB;AAC5C;AACA,0BAA0B,iEAAmB;AAC7C;AACA;AACA,iEAAe,6EAA6E,EAAC;;;;;;;;;;;;;;;;ACzFtF;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,8CAA8C;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;;;;ACrEyC;AAC4B;AAC3B;AACnC,+BAA+B,mDAAM;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAe;AACvB;AACA;AACA;AACA;AACA;AACA,kHAAkH,eAAe;AACjI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,2DAAS;AAC7B,iBAAiB;AACjB;AACA;AACA,YAAY,gEAAU;AACtB;AACA,0BAA0B,mDAAM,GAAG,YAAY;AAC/C;AACA,0BAA0B,wDAAM,YAAY,aAAa;AACzD,aAAa;AACb,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AC/EyC;AACL;AACe;AACP;AACQ;AAC7C,wBAAwB,mDAAM;AACrC;AACA;AACA;AACA;AACA,QAAQ,iDAAO,QAAQ,6DAAU;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,gBAAgB,YAAY;AAC5B;AACA;AACO,6BAA6B,mDAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACO;AACP;AACA,QAAQ,yDAAW;AACnB;AACA;AACA,gBAAgB,8DAAY;AAC5B;AACA;AACA;AACA;AACA,iCAAiC,6DAAU;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;;;;;;;;;;;;;;;;;AChEyF;AACzF,YAAuF;;AAEvF;;AAEA;AACA;;AAEA,aAAa,0GAAG,CAAC,sFAAO;;;;AAIxB,iEAAe,sFAAO,aAAa","sources":["webpack://maap-user-workspace-management-jupyter-extension/./style/base.css","webpack://maap-user-workspace-management-jupyter-extension/./style/index.css","webpack://maap-user-workspace-management-jupyter-extension/./lib/dialogs.js","webpack://maap-user-workspace-management-jupyter-extension/./lib/funcs.js","webpack://maap-user-workspace-management-jupyter-extension/./lib/getKeycloak.js","webpack://maap-user-workspace-management-jupyter-extension/./lib/index.js","webpack://maap-user-workspace-management-jupyter-extension/./lib/request.js","webpack://maap-user-workspace-management-jupyter-extension/./lib/selector.js","webpack://maap-user-workspace-management-jupyter-extension/./lib/widgets.js","webpack://maap-user-workspace-management-jupyter-extension/./style/index.css?0140"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/*\\n    See the JupyterLab Developer Guide for useful CSS Patterns:\\n\\n    https://jupyterlab.readthedocs.io/en/stable/developer/css.html\\n*/\\n.Toastify__toast-body {\\n    overflow: auto;\\n  }\", \"\",{\"version\":3,\"sources\":[\"webpack://./style/base.css\"],\"names\":[],\"mappings\":\"AAAA;;;;CAIC;AACD;IACI,cAAc;EAChB\",\"sourcesContent\":[\"/*\\n    See the JupyterLab Developer Guide for useful CSS Patterns:\\n\\n    https://jupyterlab.readthedocs.io/en/stable/developer/css.html\\n*/\\n.Toastify__toast-body {\\n    overflow: auto;\\n  }\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../node_modules/css-loader/dist/cjs.js!./base.css\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import { Dialog } from '@jupyterlab/apputils';\nconst notImplemented = [];\nexport class DialogEnter extends Dialog {\n    /**\n     * Create a dialog panel instance.\n     *\n     * @param options - The dialog setup options.\n     */\n    constructor(options = {}) {\n        super(options);\n    }\n    handleEvent(event) {\n        switch (event.type) {\n            case 'keydown':\n                this._evtKeydown(event);\n                break;\n            case 'click':\n                this._evtClick(event);\n                break;\n            case 'focus':\n                this._evtFocus(event);\n                break;\n            case 'contextmenu':\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n            default:\n                break;\n        }\n    }\n    _evtKeydown(event) {\n        // Check for escape key\n        switch (event.keyCode) {\n            case 13: // Enter.\n                //event.stopPropagation();\n                //event.preventDefault();\n                //this.resolve();\n                break;\n            default:\n                super._evtKeydown(event);\n                break;\n        }\n    }\n}\nexport function showDialogEnter(options = {}) {\n    let dialog = new DialogEnter(options);\n    dialog.launch();\n    // setTimeout(function(){console.log('go away'); dialog.resolve(0);}, 3000);\n    return;\n}\nexport function popup(b) {\n    if (!(notImplemented.includes(b.req))) {\n        popupTitle(b, b.popupTitle);\n    }\n    else {\n        console.log(\"not implemented yet\");\n        popupResult(\"Not Implemented yet\", \"Not Implemented yet\");\n    }\n}\nexport function popupTitle(b, popupTitle) {\n    showDialogEnter({\n        title: popupTitle,\n        body: b,\n        focusNodeSelector: 'input',\n        buttons: [Dialog.okButton({ label: 'Ok' }), Dialog.cancelButton({ label: 'Cancel' })]\n    });\n}\nexport function popupResult(b, popupTitle) {\n    showDialogEnter({\n        title: popupTitle,\n        body: b,\n        focusNodeSelector: 'input',\n        buttons: [Dialog.okButton({ label: 'Ok' })]\n    });\n}\nexport function isEmpty(obj) {\n    return Object.keys(obj).length === 0;\n}\n","import { PageConfig } from \"@jupyterlab/coreutils\";\nimport { Dialog, showDialog, Notification } from \"@jupyterlab/apputils\";\n// import { Widget } from \"@lumino/widgets\";\nimport { getToken, getUserInfo, getUserInfoAsyncWrapper } from \"./getKeycloak\";\nimport { SshWidget, UserInfoWidget } from './widgets';\nimport { DropdownSelector } from './selector';\nimport { popupResult } from './dialogs';\nimport { request } from './request';\nconst profileId = 'maapsec-extension:IMaapProfile';\nexport async function checkSSH() {\n    showDialog({\n        title: 'SSH Info:',\n        body: new SshWidget(),\n        focusNodeSelector: 'input',\n        buttons: [Dialog.okButton({ label: 'Ok' })]\n    });\n}\nexport function checkUserInfo() {\n    getUserInfo(function (profile) {\n        if (profile['cas:username'] === undefined) {\n            Notification.error(\"Get user profile failed.\");\n            return;\n        }\n        let username = profile['cas:username'];\n        let email = profile['cas:email'];\n        let org = profile['organization'];\n        // popup info\n        showDialog({\n            title: 'User Information:',\n            body: new UserInfoWidget(username, email, org),\n            focusNodeSelector: 'input',\n            buttons: [Dialog.okButton({ label: 'Ok' })]\n        });\n    });\n}\nexport async function getPresignedUrl(state, key, duration) {\n    const profile = await getUsernameToken(state);\n    return new Promise(async (resolve, reject) => {\n        let presignedUrl = '';\n        let token = getToken();\n        //var getUrl = new URL(PageConfig.getBaseUrl() + 'show_ssh_info/getSigneds3Url');\n        var getUrl = new URL(PageConfig.getBaseUrl() + 'jupyter-server-extension/uwm/getSignedS3Url');\n        getUrl.searchParams.append('home_path', PageConfig.getOption('serverRoot'));\n        getUrl.searchParams.append('key', key);\n        getUrl.searchParams.append('username', profile.uname);\n        getUrl.searchParams.append('token', token);\n        getUrl.searchParams.append('proxy-ticket', profile.ticket);\n        getUrl.searchParams.append('duration', duration);\n        request('get', getUrl.href).then((res) => {\n            if (res.ok) {\n                let data = JSON.parse(res.data);\n                console.log(data);\n                if (data.status_code == 200) {\n                    presignedUrl = data.url;\n                    resolve(presignedUrl);\n                }\n                else if (data.status_code == 404) {\n                    resolve(data.message);\n                }\n                else {\n                    Notification.error('Failed to get presigned s3 url', { autoClose: 3000 });\n                    resolve(data.url);\n                }\n            }\n            else {\n                Notification.error('Failed to get presigned s3 url', { autoClose: 3000 });\n                resolve(presignedUrl);\n            }\n        });\n    });\n}\nexport function activateGetPresignedUrl(app, palette, factory, state) {\n    const { commands } = app;\n    const { tracker } = factory;\n    // matches all filebrowser items\n    const selectorItem = '.jp-DirListing-item[data-isdir]';\n    const open_command = 'sshinfo:s3url';\n    commands.addCommand(open_command, {\n        execute: () => {\n            const widget = tracker.currentWidget;\n            if (!widget) {\n                return;\n            }\n            const item = widget.selectedItems().next();\n            if (!item) {\n                return;\n            }\n            let path = item.path;\n            let expirationOptions = ['86400 (24 hours)', '604800 (1 week)', '2592000 (30 days)'];\n            let dropdownSelector = new DropdownSelector(expirationOptions, '86400 (24 hours)', state, path);\n            popupResult(dropdownSelector, 'Select an Expiration Duration');\n        },\n        isVisible: () => !!(tracker.currentWidget && tracker.currentWidget.selectedItems().next !== undefined),\n        iconClass: 'jp-MaterialIcon jp-LinkIcon',\n        label: 'Get Presigned S3 Url'\n    });\n    app.contextMenu.addItem({\n        command: open_command,\n        selector: selectorItem,\n        rank: 11\n    });\n    // not adding to palette, since nothing to provide path\n    // if (palette) {\n    //   palette.addItem({command:open_command, category: 'User'});\n    // }\n}\nlet ade_server = '';\nvar valuesUrl = new URL(PageConfig.getBaseUrl() + 'jupyter-server-extension/getConfig');\nrequest('get', valuesUrl.href).then((res) => {\n    if (res.ok) {\n        let environment = JSON.parse(res.data);\n        ade_server = environment['ade_server'];\n    }\n});\nexport async function getUsernameToken(state) {\n    let defResult = { uname: 'anonymous', ticket: '' };\n    if (\"https://\" + ade_server === document.location.origin) {\n        let kcProfile = await getUserInfoAsyncWrapper();\n        if (kcProfile['cas:username'] === undefined) {\n            Notification.error(\"Get profile failed.\");\n            return defResult;\n        }\n        else {\n            return { uname: kcProfile['cas:username'], ticket: kcProfile['proxyGrantingTicket'] };\n        }\n    }\n    else {\n        return state.fetch(profileId).then((profile) => {\n            let profileObj = JSON.parse(JSON.stringify(profile));\n            return { uname: profileObj.preferred_username, ticket: profileObj.proxyGrantingTicket };\n        }).catch((error) => {\n            return defResult;\n        });\n    }\n}\n","/*\n* Race condition was causing error, so if loadUserInfo fails, make sure that keycloak token is updated\n*/\nexport var getUserInfo = function (callback, firstTry = true) {\n    window.parent._keycloak.loadUserInfo().success(function (profile) {\n        callback(profile);\n    }).error(async function (err) {\n        if (firstTry) {\n            console.log('Failed to load profile, trying to update token before retrying', err);\n            await updateKeycloakToken(300); // try to update token\n            // tested that callback function propagates back to initiator with profile\n            getUserInfo(callback, false);\n        }\n        else {\n            console.log('Failed to load profile.', err);\n            callback(\"error\");\n        }\n    });\n};\nfunction waitTwoSeconds() {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve();\n        }, 2000); // 2000 milliseconds = 2 seconds\n    });\n}\nexport async function getUserInfoAsyncWrapper() {\n    return new Promise((resolve) => {\n        getUserInfo((callback) => {\n            resolve(callback);\n        });\n    });\n}\nexport var getToken = function () {\n    return window.parent._keycloak.idToken;\n};\nexport var updateKeycloakToken = async function (seconds, retries = 20) {\n    try {\n        return await window.parent._keycloak.updateToken(seconds);\n    }\n    catch (error) {\n        if (retries > 0) {\n            await waitTwoSeconds();\n            await updateKeycloakToken(seconds, retries - 1);\n        }\n    }\n};\n","import { ICommandPalette } from '@jupyterlab/apputils';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { IStateDB } from '@jupyterlab/statedb';\nimport { checkUserInfo, checkSSH, activateGetPresignedUrl } from './funcs';\nimport { InjectSSH } from './widgets';\nimport { updateKeycloakToken } from \"./getKeycloak\";\nimport '../style/index.css';\n///////////////////////////////////////////////////////////////\n//\n// Display/inject ssh info extension\n//\n///////////////////////////////////////////////////////////////\nconst extensionSsh = {\n    id: 'display_ssh_info',\n    autoStart: true,\n    requires: [ICommandPalette],\n    optional: [ILauncher],\n    activate: activateSSH\n};\nfunction activateSSH(app, palette) {\n    new InjectSSH();\n    // Add an application command\n    const open_command = 'sshinfo:open';\n    app.commands.addCommand(open_command, {\n        label: 'Display SSH Info',\n        isEnabled: () => true,\n        execute: args => {\n            checkSSH();\n        }\n    });\n    palette.addItem({ command: open_command, category: 'SSH' });\n    console.log('JupyterLab user-workspace-management extension is activated!');\n}\n;\n///////////////////////////////////////////////////////////////\n//\n// Display user info extension\n//\n///////////////////////////////////////////////////////////////\nconst extensionUser = {\n    id: 'display_user_info',\n    autoStart: true,\n    requires: [ICommandPalette],\n    activate: (app, palette) => {\n        const open_command = 'sshinfo:user';\n        app.commands.addCommand(open_command, {\n            label: 'Display User Info',\n            isEnabled: () => true,\n            execute: args => {\n                checkUserInfo();\n            }\n        });\n        palette.addItem({ command: open_command, category: 'User' });\n        console.log('User Workspace Management extension activated!');\n    }\n};\n///////////////////////////////////////////////////////////////\n//\n// Presigned URL extension\n//\n///////////////////////////////////////////////////////////////\nconst extensionPreSigneds3Url = {\n    id: 'share-s3-url',\n    requires: [ICommandPalette, IFileBrowserFactory, IStateDB],\n    autoStart: true,\n    activate: activateGetPresignedUrl\n};\n///////////////////////////////////////////////////////////////\n//\n// Refresh token extension\n//\n// This plugin refreshes the users keycloak token on set time interval\n// to extend the time a user can functionally use a workspace before\n// having to manually refresh the page\n//\n///////////////////////////////////////////////////////////////\nconst extensionRefreshToken = {\n    id: 'refresh_token',\n    autoStart: true,\n    requires: [],\n    optional: [],\n    activate: () => {\n        // just called once at the beginning \n        setTimeout(() => updateKeycloakToken(300), 2000);\n        // Refresh just under every 5 min, make token last for 5 min\n        setInterval(() => updateKeycloakToken(300), 299000);\n    }\n};\nexport default [extensionSsh, extensionUser, extensionPreSigneds3Url, extensionRefreshToken];\n","export const DEFAULT_REQUEST_OPTIONS = {\n    ignoreCache: false,\n    headers: {\n        Accept: 'application/json, text/javascript, text/plain'\n    },\n    timeout: 5000,\n};\nfunction queryParams(params = {}) {\n    return Object.keys(params)\n        .map(k => encodeURIComponent(k) + '=' + encodeURIComponent(params[k]))\n        .join('&');\n}\nfunction withQuery(url, params = {}) {\n    const queryString = queryParams(params);\n    return queryString ? url + (url.indexOf('?') === -1 ? '?' : '&') + queryString : url;\n}\nfunction parseXHRResult(xhr) {\n    return {\n        ok: xhr.status >= 200 && xhr.status < 300,\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: xhr.getAllResponseHeaders(),\n        data: xhr.responseText,\n        json: () => JSON.parse(xhr.responseText),\n        url: xhr.responseURL\n    };\n}\nfunction errorResponse(xhr, message = null) {\n    return {\n        ok: false,\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: xhr.getAllResponseHeaders(),\n        data: message || xhr.statusText,\n        json: () => JSON.parse(message || xhr.statusText),\n        url: xhr.responseURL\n    };\n}\nexport function request(method, url, queryParams = {}, body = null, options = DEFAULT_REQUEST_OPTIONS) {\n    const ignoreCache = options.ignoreCache || DEFAULT_REQUEST_OPTIONS.ignoreCache;\n    const headers = options.headers || DEFAULT_REQUEST_OPTIONS.headers;\n    const timeout = options.timeout || DEFAULT_REQUEST_OPTIONS.timeout;\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.open(method, withQuery(url, queryParams));\n        if (headers) {\n            Object.keys(headers).forEach(key => xhr.setRequestHeader(key, headers[key]));\n        }\n        if (ignoreCache) {\n            xhr.setRequestHeader('Cache-Control', 'no-cache');\n        }\n        xhr.timeout = timeout;\n        xhr.onload = evt => {\n            resolve(parseXHRResult(xhr));\n        };\n        xhr.onerror = evt => {\n            resolve(errorResponse(xhr, 'Failed to make request.'));\n        };\n        xhr.ontimeout = evt => {\n            resolve(errorResponse(xhr, 'Request took longer than expected.'));\n        };\n        if (method === 'post' && body) {\n            xhr.setRequestHeader('Content-Type', 'application/json');\n            xhr.send(JSON.stringify(body));\n        }\n        else {\n            xhr.send();\n        }\n    });\n}\n","import { Widget } from \"@lumino/widgets\";\nimport { Clipboard, Dialog, showDialog } from \"@jupyterlab/apputils\";\nimport { getPresignedUrl } from './funcs';\nexport class DropdownSelector extends Widget {\n    constructor(options, defaultOption, state, path) {\n        super();\n        this.defaultOption = defaultOption;\n        this.state = state;\n        this.path = path;\n        this._dropdown = document.createElement(\"SELECT\");\n        if (!defaultOption) {\n            this.defaultOption = '';\n        }\n        let opt;\n        for (let option of options) {\n            opt = document.createElement(\"option\");\n            if (this.defaultOption === option) {\n                opt.setAttribute(\"selected\", \"selected\");\n            }\n            opt.setAttribute(\"id\", option);\n            opt.setAttribute(\"label\", option);\n            opt.appendChild(document.createTextNode(option));\n            this._dropdown.appendChild(opt);\n        }\n        this.node.appendChild(this._dropdown);\n    }\n    getValue() {\n        this.selected = this._dropdown.value;\n        let ind = this.selected.indexOf('(');\n        if (ind > -1) {\n            this.selected = this.selected.substr(0, ind).trim();\n        }\n        // guarantee default value\n        if (this.selected == null || this.selected == '') {\n            this.selected = this.defaultOption;\n            console.log('no option selected, using ' + this.defaultOption);\n        }\n        console.log(this.selected);\n        // send request to get url\n        getPresignedUrl(this.state, this.path, this.selected).then((url) => {\n            let display = url;\n            let validUrl = false;\n            if (url.substring(0, 5) == 'https') {\n                validUrl = true;\n                display = 'Link will expire in ' + this._dropdown.value + '<br>';\n                display = display + '<a href=' + url + ' target=\"_blank\" style=\"border-bottom: 1px solid #0000ff; color: #0000ff;\">' + url + '</a>';\n            }\n            else {\n                display = url;\n            }\n            let body = document.createElement('div');\n            body.style.display = 'flex';\n            body.style.flexDirection = 'column';\n            let textarea = document.createElement(\"div\");\n            textarea.id = 'result-text';\n            textarea.style.display = 'flex';\n            textarea.style.flexDirection = 'column';\n            textarea.innerHTML = \"<pre>\" + display + \"</pre>\";\n            body.appendChild(textarea);\n            // Copy URL to clipboard button if url created\n            if (validUrl) {\n                let copyBtn = document.createElement('button');\n                copyBtn.id = 's3-link-copy-button';\n                copyBtn.className = 'jupyter-button';\n                copyBtn.innerHTML = 'Copy Link';\n                copyBtn.style.width = \"200px\";\n                copyBtn.addEventListener('click', function () {\n                    Clipboard.copyToSystem(url);\n                }, false);\n                body.appendChild(copyBtn);\n            }\n            showDialog({\n                title: 'Presigned Url',\n                body: new Widget({ node: body }),\n                focusNodeSelector: 'input',\n                buttons: [Dialog.okButton({ label: 'Ok' })]\n            });\n        });\n    }\n}\n","import { Widget } from \"@lumino/widgets\";\nimport { request } from \"./request\";\nimport { PageConfig } from \"@jupyterlab/coreutils\";\nimport { getUserInfo } from \"./getKeycloak\";\nimport { Notification } from \"@jupyterlab/apputils\";\nexport class SshWidget extends Widget {\n    constructor() {\n        let body = document.createElement('div');\n        body.style.display = 'flex';\n        body.style.flexDirection = 'column';\n        request('get', PageConfig.getBaseUrl() + \"jupyter-server-extension/uwm/getSSHInfo\").then((res) => {\n            if (res.ok) {\n                let json_results = res.json();\n                let ip = json_results['ip'];\n                let port = json_results['port'];\n                let message = \"ssh root@\" + ip + \" -p \" + port;\n                // let message = \"ssh -i <path_to_your_key> root@\" + ip + \" -p \" + port;\n                let contents = document.createTextNode(message);\n                body.appendChild(contents);\n            }\n        });\n        super({ node: body });\n    }\n}\nexport class UserInfoWidget extends Widget {\n    constructor(username, email, org) {\n        let body = document.createElement('div');\n        body.style.display = 'flex';\n        body.style.flexDirection = 'column';\n        let user_node = document.createTextNode('Username: ' + username);\n        body.appendChild(user_node);\n        body.appendChild(document.createElement('br'));\n        let email_node = document.createTextNode('Email: ' + email);\n        body.appendChild(email_node);\n        body.appendChild(document.createElement('br'));\n        let org_node = document.createTextNode('Organization: ' + org);\n        body.appendChild(org_node);\n        super({ node: body });\n    }\n}\nexport class InjectSSH {\n    constructor() {\n        getUserInfo(function (profile) {\n            let key = '';\n            if (profile['public_ssh_keys'] === undefined) {\n                Notification.warning(\"User's SSH Key undefined. SSH service unavailable.\");\n            }\n            else {\n                key = profile['public_ssh_keys'];\n            }\n            let getUrl = new URL(PageConfig.getBaseUrl() + \"jupyter-server-extension/uwm/injectPublicKey\");\n            getUrl.searchParams.append(\"key\", key);\n            if (profile['proxyGrantingTicket'] !== undefined) {\n                getUrl.searchParams.append(\"proxyGrantingTicket\", profile['proxyGrantingTicket']);\n            }\n            // Make call to back end\n            let xhr = new XMLHttpRequest();\n            xhr.onload = function () {\n                console.log(\"Checked for/injected user's public key and PGT\");\n            };\n            xhr.open(\"GET\", getUrl.href, true);\n            xhr.send(null);\n        });\n    }\n}\n","import api from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../node_modules/css-loader/dist/cjs.js!./index.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};"],"names":[],"sourceRoot":""}