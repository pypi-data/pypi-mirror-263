{"version":3,"file":"lib_index_js.df422f06fa7463096c4d.js","mappings":"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","sources":["webpack://jupyterlab-broccoli-extension/./src/icons.ts","webpack://jupyterlab-broccoli-extension/./src/index.ts"],"sourcesContent":["import { LabIcon } from '@jupyterlab/ui-components';\n\nimport blockly_logo from '/style/icons/blockly_logo.svg';\n\nexport const blockly_icon = new LabIcon({\n  name: 'blockly:icon/logo',\n  svgstr: blockly_logo\n});\n","import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin,\n  ILayoutRestorer\n} from '@jupyterlab/application';\nimport { jsonIcon } from '@jupyterlab/ui-components';\nimport { WidgetTracker, ICommandPalette } from '@jupyterlab/apputils';\nimport { IRenderMimeRegistry } from '@jupyterlab/rendermime';\nimport { IEditorServices } from '@jupyterlab/codeeditor';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { ISettingRegistry } from '@jupyterlab/settingregistry';\n//import { MainMenu } from '@jupyterlab/mainmenu';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { SessionContextDialogs } from '@jupyterlab/apputils';\nimport { IJupyterWidgetRegistry } from '@jupyter-widgets/base';\n\nimport { BlocklyEditorFactory } from 'jupyterlab-broccoli';\nimport { BlocklyEditor } from 'jupyterlab-broccoli';\nimport { IBlocklyRegistry } from 'jupyterlab-broccoli';\nimport { JlbTools } from 'jupyterlab-broccoli';\n\nimport { blockly_icon } from './icons';\n\n\n/**\n * The name of the factory that creates the editor widgets.\n */\nconst FACTORY = 'Blockly editor';\n\nconst PALETTE_CATEGORY = 'Blockly editor';\n\nnamespace CommandIDs {\n  export const createNew = 'blockly:create-new-blockly-file';\n  //\n  export const interruptKernel = 'blockly:interrupt-to-kernel';\n  export const restartKernel = 'blockly:restart-Kernel';\n  export const restartKernelAndClear = 'blockly:restart-and-clear';\n  //export const clearAllOutputs = 'blockly:clear-all-cell-outputs';\n  //export const restartClear = 'blockly:restart-clear-output';\n  //export const restartRunAll = 'blockly:restart-run-all';\n  export const reconnectToKernel = 'blockly:reconnect-kernel';\n  //\n  export const copyBlocklyToClipboard = 'blockly:copy-to-clipboard';\n  //export const copyNotebookToClipboard = 'notebook:copy-to-clipboard';\n}\n\n/**\n * The id of the translation plugin.\n */\nconst PLUGIN_ID = '@jupyterlab/translation-extension:plugin';\n\n/**\n * Initialization data for the jupyterlab-broccoli extension.\n */\nconst plugin: JupyterFrontEndPlugin<IBlocklyRegistry> = {\n  id: 'jupyterlab-broccoli:plugin',\n  autoStart: true,\n  requires: [\n    ILayoutRestorer,\n    IRenderMimeRegistry,\n    IEditorServices,\n    IFileBrowserFactory,\n    ISettingRegistry,\n    ITranslator,\n  ],\n  optional: [ILauncher, ICommandPalette, IMainMenu, IJupyterWidgetRegistry],\n  provides: IBlocklyRegistry,\n  activate: (\n    app: JupyterFrontEnd,\n    restorer: ILayoutRestorer,\n    rendermime: IRenderMimeRegistry,\n    editorServices: IEditorServices,\n    browserFactory: IFileBrowserFactory,\n    settings: ISettingRegistry,\n    translator: ITranslator,\n    launcher: ILauncher | null,\n    palette: ICommandPalette | null,\n    mainMenu: IMainMenu | null,\n    widgetRegistry: IJupyterWidgetRegistry | null\n  ): IBlocklyRegistry => {\n    console.log('JupyterLab extension jupyterlab-broccoli is activated!');\n\n    // Namespace for the tracker\n    const namespace = 'jupyterlab-broccoli';\n\n    // Creating the tracker for the document\n    const tracker = new WidgetTracker<BlocklyEditor>({ namespace });\n\n    // Handle state restoration.\n    if (restorer) {\n      // When restoring the app, if the document was open, reopen it\n      restorer.restore(tracker, {\n        command: 'docmanager:open',\n        args: widget => ({ path: widget.context.path, factory: FACTORY }),\n        name: widget => widget.context.path\n      });\n    }\n\n    const trans = translator.load('jupyterlab');\n    const { commands, shell } = app;\n\n    const isEnabled = (): boolean => {\n      return JlbTools.isEnabled(shell, tracker);\n    };\n\n    // Creating the widget factory to register it so the document manager knows about\n    // our new DocumentWidget\n    const widgetFactory = new BlocklyEditorFactory(app, tracker, {\n      name: FACTORY,\n      modelName: 'text',\n      fileTypes: ['blockly'],\n      defaultFor: ['blockly'],\n\n      // Kernel options, in this case we need to execute the code generated\n      // in the blockly editor. The best way would be to use kernels, for\n      // that reason, we tell the widget factory to start a kernel session\n      // when opening the editor, and close the session when closing the editor.\n      canStartKernel: true,\n      preferKernel: false,\n      shutdownOnClose: true,\n\n      // The rendermime instance, necessary to render the outputs\n      // after a code execution. And the mimeType service to get the\n      // mimeType from the kernel language\n      rendermime: rendermime,\n      mimetypeService: editorServices.mimeTypeService,\n\n      // The translator instance, used for the internalization of the plugin.\n      translator: translator\n    });\n\n    // Add the widget to the tracker when it's created\n    widgetFactory.widgetCreated.connect((sender, widget) => {\n      // Adding the Blockly icon for the widget so it appears next to the file name.\n      widget.title.icon = blockly_icon;\n\n      // Notify the instance tracker if restore data needs to update.\n      widget.context.pathChanged.connect(() => {\n        tracker.save(widget);\n      });\n      tracker.add(widget);\n    });\n    // Registering the file type\n    app.docRegistry.addFileType({\n      name: 'blockly',\n      displayName: 'Blockly',\n      contentType: 'file',\n      fileFormat: 'json',\n      extensions: ['.jpblockly'],\n      mimeTypes: ['application/json'],\n      icon: jsonIcon,\n      iconLabel: 'JupyterLab-Blockly'\n    });\n    // Registering the widget factory\n    app.docRegistry.addWidgetFactory(widgetFactory);\n\n    function getSetting(setting: ISettingRegistry.ISettings): string {\n      // Read the settings and convert to the correct type\n      const currentLocale: string = setting.get('locale').composite as string;\n      return currentLocale;\n    }\n\n    // Wait for the application to be restored and\n    // for the settings for this plugin to be loaded\n    settings.load(PLUGIN_ID).then(setting => {\n      // Read the settings\n      const currentLocale = getSetting(setting);\n\n      // Listen for our plugin setting changes using Signal\n      setting.changed.connect(getSetting);\n\n      // Get new language and call the function that modifies the language name accordingly.\n      // Also, make the transformation to have the name of the language package as in Blockly.\n      const language =\n        currentLocale[currentLocale.length - 2].toUpperCase() +\n        currentLocale[currentLocale.length - 1].toLowerCase();\n      console.log(`Current Language : '${language}'`);\n\n      // Transmitting the current language to the manager.\n      widgetFactory.registry.setlanguage(language);\n    });\n\n    //\n    commands.addCommand(CommandIDs.createNew, {\n      label: args => args['isPalette'] ? 'New Blockly Editor' : 'Blockly Editor',\n      caption: 'Create a new Blockly Editor',\n      icon: args => (args['isPalette'] ? null : blockly_icon),\n      execute: async args => {\n        // Get the directory in which the Blockly file must be created;\n        // otherwise take the current filebrowser directory\n        const cwd = args['cwd'] || browserFactory.tracker.currentWidget.model.path;\n\n        // Create a new untitled Blockly file\n        const model = await commands.execute('docmanager:new-untitled', {\n          path: cwd,\n          type: 'file',\n          ext: '.jpblockly'\n        });\n\n        // Open the newly created file with the 'Editor'\n        return commands.execute('docmanager:open', {\n          path: model.path,\n          factory: FACTORY\n        });\n      }\n    });\n\n    // Add the command to the launcher\n    if (launcher) {\n      launcher.add({\n        command: CommandIDs.createNew,\n        category: trans.__('Other'),\n        rank: 1\n      });\n    }\n\n    // Add the command to the palette\n    if (palette) {\n      palette.addItem({\n        command: CommandIDs.createNew,\n        args: { isPalette: true },\n        category: PALETTE_CATEGORY\n      });\n    }\n\n    //\n    // Context Menu\n    commands.addCommand(CommandIDs.copyBlocklyToClipboard, {\n      label: trans.__('Copy Blockly Output View to Clipboard'),\n      execute: args => {\n        const current = JlbTools.getCurrentWidget(shell, tracker, args);\n        if (current) {\n          const outputAreaAreas = current.cell.outputArea.node.getElementsByClassName('jp-OutputArea-output');\n          if (outputAreaAreas &&  outputAreaAreas.length > 0) {\n            let element = outputAreaAreas[0];\n            for (let i=1; i<outputAreaAreas.length; i++) {\n              element.appendChild(outputAreaAreas[i]);\n            }\n            JlbTools.copyElement(element as HTMLElement);\n          }\n        }\n      },\n      isEnabled\n    });\n\n    // app.contextMenu : ContextMenuSvg\n    // app.contextMenu.menu : MenuSvg\n    app.contextMenu.addItem({\n      command: CommandIDs.copyBlocklyToClipboard,\n      selector: '.jp-OutputArea-child',\n      rank: 0,\n    });\n\n\n    //\n    // Main Menu\n    commands.addCommand(CommandIDs.interruptKernel, {\n      label: trans.__('Interrupt Kernel'),\n      caption: trans.__('Interrupt the kernel'),\n      execute: args => { \n        const current = JlbTools.getCurrentWidget(shell, tracker, args);\n        if (!current) return;\n        const kernel = current.context.sessionContext.session?.kernel;\n        if (kernel) return kernel.interrupt();\n      },\n      isEnabled\n      //isEnabled: args => (args.toolbar ? true : isEnabled()),\n      //icon: args => (args.toolbar ? stopIcon : undefined)\n    });\n\n    commands.addCommand(CommandIDs.restartKernel, {\n      label: trans.__('Restart Kernel…'),\n      caption: trans.__('Restart the kernel'),\n      execute: args => { \n        const current = JlbTools.getCurrentWidget(shell, tracker, args);\n        if (current) {\n          const sessionDialogs = new  SessionContextDialogs({translator});\n          return sessionDialogs.restart(current.context.sessionContext);\n        }\n      },\n      isEnabled\n    });\n\n    commands.addCommand(CommandIDs.restartKernelAndClear, {\n      label: trans.__('Clear…'),\n      caption: trans.__('Restart the kernel and clear output view'),\n      execute: args => { \n        const current = JlbTools.getCurrentWidget(shell, tracker, args);\n        if (current) {\n          current.blayout?.clearOutputArea();\n        }\n      },\n      isEnabled\n    });\n\n    commands.addCommand(CommandIDs.reconnectToKernel, {\n      label: trans.__('Reconnect to Kernel'),\n      caption: trans.__('Reconnect to the kernel'),\n      execute: args => { \n        const current = JlbTools.getCurrentWidget(shell, tracker, args);\n        if (!current) return;\n        const kernel = current.context.sessionContext.session?.kernel;\n        if (kernel) return kernel.reconnect();\n      },\n      isEnabled: args => (args.toolbar ? true : isEnabled())\n    });\n\n    // Add the command to the main menu\n    if (mainMenu) {\n      mainMenu.kernelMenu.kernelUsers.interruptKernel.add({\n        id: CommandIDs.interruptKernel,\n        isEnabled\n      });\n\n      mainMenu.kernelMenu.kernelUsers.restartKernel.add({\n        id: CommandIDs.restartKernel,\n        isEnabled\n      });\n\n      mainMenu.kernelMenu.kernelUsers.clearWidget.add({\n        id: CommandIDs.restartKernelAndClear,\n        isEnabled\n      });\n\n      mainMenu.kernelMenu.kernelUsers.reconnectToKernel.add({\n        id: CommandIDs.reconnectToKernel,\n        isEnabled\n      });\n    }\n\n/*\n    if (widgetRegistry) {\n      tracker.forEach(panel => {\n        registerWidgetManager(\n          panel.context as any,\n          panel.content.rendermime,\n          widgetRenderers([panel.content.cell])\n        );\n      });\n\n      tracker.widgetAdded.connect((sender, panel) => {\n        const kernel = panel.context.sessionContext.session?.kernel;\n        if (kernel) {\n          registerWidgetManager(\n            panel.context as any,\n            panel.content.rendermime,\n            widgetRenderers([panel.content.cell])\n          );\n        }\n      });\n    }\n*/\n    return widgetFactory.registry;\n  }\n};\n\n\n/*\nfunction* widgetRenderers(cells: CodeCell[]): IterableIterator<WidgetRenderer> {\n  for (const w of cells) {\n    if (w instanceof WidgetRenderer) {\n      yield w;\n    }\n  }\n}\n*/\n\n\n//\nconst plugins: JupyterFrontEndPlugin<any>[] = [\n  plugin,\n];\nexport default plugins;\n\n"],"names":[],"sourceRoot":""}