#!/usr/bin/env ipython
# coding: utf-8
'''
Copyright (C) 2014 Ömer Özak
This program defines functions that are useful for working with GIS data
Usage:

import georasters as gr

======================================================
Author:  Ömer Özak, 2013--2014 (ozak at smu.edu)
Website: http://omerozak.com
GitHub:  https://github.com/ozak/
======================================================

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''

from __future__ import division
import georasters as gr
import hmi
import geopandas as gp
import geostats
import hmi
import os

# Change dir
%cd CulturalDistance
pathcntrycyl = '../../data/GIS/GMI/cyl/'

# Load raster data
A = gr.from_file(hmi.path+'/HMI10.tif')
print(A.datatype)
print(A.geot)
print(A.projection)
A.plot(cmap='Reds')

# Load country geometries
shp = gp.read_file(pathcntrycyl+'DCW_countriescyl.shp')

# Choose one country (COL)
col = shp.loc[shp.ISO_A3 == 'COL']

# Clip raster to geometry
df = A.clip(col, keep=True)
print(df)

# Select clipped raster
colraster = df.GeoRaster[0]
colraster.plot(cmap='Reds')

# Compute Global autocorrelation stats
colraster.pysal_G()
colraster.pysal_Gamma()
colraster.pysal_Geary()
colraster.pysal_Join_Counts()

# Path CSI data
pathtestdata = gr.__path__[0]+'/../tests/data/'
# Load raster data
B = gr.from_file(pathtestdata+'pre1500.tif')
# Load country geometries
col2 = gp.read_file(pathtestdata+'COL.shp')
#df2 = B.clip(col2.to_crs(crs=hmi.cea), keep=True)
df2 = B.clip(col2, keep=True)
print(df2)

# Select clipped raster
colraster2 = df2.GeoRaster[0]
colraster2.plot(cmap='Reds')

# Compute Global autocorrelation stats
colraster2.pysal_G()
colraster2.pysal_Gamma()
colraster2.pysal_Geary()
colraster2.pysal_Join_Counts()

# CSI
C = gr.from_file(geostats.pathmeasures['CSI']+'post1500AverageCalories0cyl.tif')
df3 = C.clip(col2.to_crs(crs=hmi.cea), keep=True)
print(df3)

# Select clipped raster
colraster3 = df3.GeoRaster[0]
colraster3.plot(cmap='Reds')

# Compute Global autocorrelation stats
colraster3.pysal_G()
colraster3.pysal_Gamma()
colraster3.pysal_Geary()
colraster3.pysal_Join_Counts()

# CSI
C = gr.from_file(geostats.pathmeasures['CSI']+'pre1500AverageCalories0cyl.tif')
df4 = C.clip(col2.to_crs(crs=hmi.cea), keep=True)
print(df4)

# Select clipped raster
colraster4 = df4.GeoRaster[0]
colraster4.plot(cmap='Reds')

# Compute Global autocorrelation stats
colraster4.pysal_G()
colraster4.pysal_Gamma()
colraster4.pysal_Geary()
colraster4.pysal_Join_Counts()

C = gr.from_file(geostats.pathmeasures['CSI']+'../updated/pre1500en0cyl.tif')
df4 = C.clip(col2.to_crs(crs=hmi.cea), keep=True)
print(df4)

# Select clipped raster
colraster5 = df4.GeoRaster[0]
colraster5.plot(cmap='Reds')

C = gr.from_file(geostats.pathmeasures['CSI']+'americasenmean.tif')
df4 = C.clip(col2, keep=True)
print(df4)
# Select clipped raster
colraster6 = df4.GeoRaster[0]
colraster6.plot(cmap='Reds')

# Bogota
colraster6.extract(-74.075833,4.598056,1)
colraster6.map_pixel(-74.075833,4.598056)
