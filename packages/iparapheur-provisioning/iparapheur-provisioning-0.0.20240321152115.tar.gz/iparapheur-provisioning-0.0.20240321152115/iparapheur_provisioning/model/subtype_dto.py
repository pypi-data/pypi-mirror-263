# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic.   # noqa: E501

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iparapheur_provisioning import schemas  # noqa: F401


class SubtypeDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 2
                    regex=[{
                        'pattern': r'^[^\r\nÂ ]*$',  # noqa: E501
                    }]
            id = schemas.StrSchema
            
            
            class description(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 3
            
            
            class creationWorkflowId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'creationWorkflowId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            validationWorkflowId = schemas.StrSchema
            
            
            class workflowSelectionScript(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 65535
                    min_length = 0
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'workflowSelectionScript':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            annotationsAllowed = schemas.BoolSchema
            externalSignatureAutomatic = schemas.BoolSchema
            
            
            class secureMailServerId(
                schemas.Int64Base,
                schemas.IntBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                class MetaOapg:
                    format = 'int64'
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, decimal.Decimal, int, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'secureMailServerId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class sealCertificateId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sealCertificateId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def sealCertificate() -> typing.Type['SealCertificateRepresentation']:
                return SealCertificateRepresentation
            
            
            class subtypeMetadataList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SubtypeMetadataDto']:
                        return SubtypeMetadataDto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SubtypeMetadataDto'], typing.List['SubtypeMetadataDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subtypeMetadataList':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SubtypeMetadataDto':
                    return super().__getitem__(i)
            
            
            class subtypeLayers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SubtypeLayerDto']:
                        return SubtypeLayerDto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SubtypeLayerDto'], typing.List['SubtypeLayerDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subtypeLayers':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SubtypeLayerDto':
                    return super().__getitem__(i)
            
            
            class externalSignatureConfigId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'externalSignatureConfigId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def externalSignatureConfig() -> typing.Type['ExternalSignatureConfigRepresentation']:
                return ExternalSignatureConfigRepresentation
            
            
            class creationPermittedDeskIds(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'creationPermittedDeskIds':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class creationPermittedDesks(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeskRepresentation']:
                        return DeskRepresentation
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'creationPermittedDesks':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class filterableByDeskIds(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'filterableByDeskIds':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class filterableByDesks(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeskRepresentation']:
                        return DeskRepresentation
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'filterableByDesks':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            maxMainDocuments = schemas.Int32Schema
            sealAutomatic = schemas.BoolSchema
            readingMandatory = schemas.BoolSchema
            digitalSignatureMandatory = schemas.BoolSchema
            annexeIncluded = schemas.BoolSchema
            multiDocuments = schemas.BoolSchema
            __annotations__ = {
                "name": name,
                "id": id,
                "description": description,
                "creationWorkflowId": creationWorkflowId,
                "validationWorkflowId": validationWorkflowId,
                "workflowSelectionScript": workflowSelectionScript,
                "annotationsAllowed": annotationsAllowed,
                "externalSignatureAutomatic": externalSignatureAutomatic,
                "secureMailServerId": secureMailServerId,
                "sealCertificateId": sealCertificateId,
                "sealCertificate": sealCertificate,
                "subtypeMetadataList": subtypeMetadataList,
                "subtypeLayers": subtypeLayers,
                "externalSignatureConfigId": externalSignatureConfigId,
                "externalSignatureConfig": externalSignatureConfig,
                "creationPermittedDeskIds": creationPermittedDeskIds,
                "creationPermittedDesks": creationPermittedDesks,
                "filterableByDeskIds": filterableByDeskIds,
                "filterableByDesks": filterableByDesks,
                "maxMainDocuments": maxMainDocuments,
                "sealAutomatic": sealAutomatic,
                "readingMandatory": readingMandatory,
                "digitalSignatureMandatory": digitalSignatureMandatory,
                "annexeIncluded": annexeIncluded,
                "multiDocuments": multiDocuments,
            }
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creationWorkflowId"]) -> MetaOapg.properties.creationWorkflowId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validationWorkflowId"]) -> MetaOapg.properties.validationWorkflowId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workflowSelectionScript"]) -> MetaOapg.properties.workflowSelectionScript: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annotationsAllowed"]) -> MetaOapg.properties.annotationsAllowed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalSignatureAutomatic"]) -> MetaOapg.properties.externalSignatureAutomatic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secureMailServerId"]) -> MetaOapg.properties.secureMailServerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sealCertificateId"]) -> MetaOapg.properties.sealCertificateId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sealCertificate"]) -> 'SealCertificateRepresentation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtypeMetadataList"]) -> MetaOapg.properties.subtypeMetadataList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subtypeLayers"]) -> MetaOapg.properties.subtypeLayers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalSignatureConfigId"]) -> MetaOapg.properties.externalSignatureConfigId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalSignatureConfig"]) -> 'ExternalSignatureConfigRepresentation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creationPermittedDeskIds"]) -> MetaOapg.properties.creationPermittedDeskIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creationPermittedDesks"]) -> MetaOapg.properties.creationPermittedDesks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterableByDeskIds"]) -> MetaOapg.properties.filterableByDeskIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterableByDesks"]) -> MetaOapg.properties.filterableByDesks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxMainDocuments"]) -> MetaOapg.properties.maxMainDocuments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sealAutomatic"]) -> MetaOapg.properties.sealAutomatic: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readingMandatory"]) -> MetaOapg.properties.readingMandatory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["digitalSignatureMandatory"]) -> MetaOapg.properties.digitalSignatureMandatory: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annexeIncluded"]) -> MetaOapg.properties.annexeIncluded: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["multiDocuments"]) -> MetaOapg.properties.multiDocuments: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "id", "description", "creationWorkflowId", "validationWorkflowId", "workflowSelectionScript", "annotationsAllowed", "externalSignatureAutomatic", "secureMailServerId", "sealCertificateId", "sealCertificate", "subtypeMetadataList", "subtypeLayers", "externalSignatureConfigId", "externalSignatureConfig", "creationPermittedDeskIds", "creationPermittedDesks", "filterableByDeskIds", "filterableByDesks", "maxMainDocuments", "sealAutomatic", "readingMandatory", "digitalSignatureMandatory", "annexeIncluded", "multiDocuments", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creationWorkflowId"]) -> typing.Union[MetaOapg.properties.creationWorkflowId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validationWorkflowId"]) -> typing.Union[MetaOapg.properties.validationWorkflowId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workflowSelectionScript"]) -> typing.Union[MetaOapg.properties.workflowSelectionScript, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annotationsAllowed"]) -> typing.Union[MetaOapg.properties.annotationsAllowed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalSignatureAutomatic"]) -> typing.Union[MetaOapg.properties.externalSignatureAutomatic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secureMailServerId"]) -> typing.Union[MetaOapg.properties.secureMailServerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sealCertificateId"]) -> typing.Union[MetaOapg.properties.sealCertificateId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sealCertificate"]) -> typing.Union['SealCertificateRepresentation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtypeMetadataList"]) -> typing.Union[MetaOapg.properties.subtypeMetadataList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subtypeLayers"]) -> typing.Union[MetaOapg.properties.subtypeLayers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalSignatureConfigId"]) -> typing.Union[MetaOapg.properties.externalSignatureConfigId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalSignatureConfig"]) -> typing.Union['ExternalSignatureConfigRepresentation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creationPermittedDeskIds"]) -> typing.Union[MetaOapg.properties.creationPermittedDeskIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creationPermittedDesks"]) -> typing.Union[MetaOapg.properties.creationPermittedDesks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterableByDeskIds"]) -> typing.Union[MetaOapg.properties.filterableByDeskIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterableByDesks"]) -> typing.Union[MetaOapg.properties.filterableByDesks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxMainDocuments"]) -> typing.Union[MetaOapg.properties.maxMainDocuments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sealAutomatic"]) -> typing.Union[MetaOapg.properties.sealAutomatic, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readingMandatory"]) -> typing.Union[MetaOapg.properties.readingMandatory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["digitalSignatureMandatory"]) -> typing.Union[MetaOapg.properties.digitalSignatureMandatory, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annexeIncluded"]) -> typing.Union[MetaOapg.properties.annexeIncluded, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["multiDocuments"]) -> typing.Union[MetaOapg.properties.multiDocuments, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "id", "description", "creationWorkflowId", "validationWorkflowId", "workflowSelectionScript", "annotationsAllowed", "externalSignatureAutomatic", "secureMailServerId", "sealCertificateId", "sealCertificate", "subtypeMetadataList", "subtypeLayers", "externalSignatureConfigId", "externalSignatureConfig", "creationPermittedDeskIds", "creationPermittedDesks", "filterableByDeskIds", "filterableByDesks", "maxMainDocuments", "sealAutomatic", "readingMandatory", "digitalSignatureMandatory", "annexeIncluded", "multiDocuments", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        creationWorkflowId: typing.Union[MetaOapg.properties.creationWorkflowId, None, str, schemas.Unset] = schemas.unset,
        validationWorkflowId: typing.Union[MetaOapg.properties.validationWorkflowId, str, schemas.Unset] = schemas.unset,
        workflowSelectionScript: typing.Union[MetaOapg.properties.workflowSelectionScript, None, str, schemas.Unset] = schemas.unset,
        annotationsAllowed: typing.Union[MetaOapg.properties.annotationsAllowed, bool, schemas.Unset] = schemas.unset,
        externalSignatureAutomatic: typing.Union[MetaOapg.properties.externalSignatureAutomatic, bool, schemas.Unset] = schemas.unset,
        secureMailServerId: typing.Union[MetaOapg.properties.secureMailServerId, None, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sealCertificateId: typing.Union[MetaOapg.properties.sealCertificateId, None, str, schemas.Unset] = schemas.unset,
        sealCertificate: typing.Union['SealCertificateRepresentation', schemas.Unset] = schemas.unset,
        subtypeMetadataList: typing.Union[MetaOapg.properties.subtypeMetadataList, list, tuple, schemas.Unset] = schemas.unset,
        subtypeLayers: typing.Union[MetaOapg.properties.subtypeLayers, list, tuple, schemas.Unset] = schemas.unset,
        externalSignatureConfigId: typing.Union[MetaOapg.properties.externalSignatureConfigId, None, str, schemas.Unset] = schemas.unset,
        externalSignatureConfig: typing.Union['ExternalSignatureConfigRepresentation', schemas.Unset] = schemas.unset,
        creationPermittedDeskIds: typing.Union[MetaOapg.properties.creationPermittedDeskIds, list, tuple, None, schemas.Unset] = schemas.unset,
        creationPermittedDesks: typing.Union[MetaOapg.properties.creationPermittedDesks, list, tuple, None, schemas.Unset] = schemas.unset,
        filterableByDeskIds: typing.Union[MetaOapg.properties.filterableByDeskIds, list, tuple, None, schemas.Unset] = schemas.unset,
        filterableByDesks: typing.Union[MetaOapg.properties.filterableByDesks, list, tuple, None, schemas.Unset] = schemas.unset,
        maxMainDocuments: typing.Union[MetaOapg.properties.maxMainDocuments, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        sealAutomatic: typing.Union[MetaOapg.properties.sealAutomatic, bool, schemas.Unset] = schemas.unset,
        readingMandatory: typing.Union[MetaOapg.properties.readingMandatory, bool, schemas.Unset] = schemas.unset,
        digitalSignatureMandatory: typing.Union[MetaOapg.properties.digitalSignatureMandatory, bool, schemas.Unset] = schemas.unset,
        annexeIncluded: typing.Union[MetaOapg.properties.annexeIncluded, bool, schemas.Unset] = schemas.unset,
        multiDocuments: typing.Union[MetaOapg.properties.multiDocuments, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SubtypeDto':
        return super().__new__(
            cls,
            *_args,
            name=name,
            id=id,
            description=description,
            creationWorkflowId=creationWorkflowId,
            validationWorkflowId=validationWorkflowId,
            workflowSelectionScript=workflowSelectionScript,
            annotationsAllowed=annotationsAllowed,
            externalSignatureAutomatic=externalSignatureAutomatic,
            secureMailServerId=secureMailServerId,
            sealCertificateId=sealCertificateId,
            sealCertificate=sealCertificate,
            subtypeMetadataList=subtypeMetadataList,
            subtypeLayers=subtypeLayers,
            externalSignatureConfigId=externalSignatureConfigId,
            externalSignatureConfig=externalSignatureConfig,
            creationPermittedDeskIds=creationPermittedDeskIds,
            creationPermittedDesks=creationPermittedDesks,
            filterableByDeskIds=filterableByDeskIds,
            filterableByDesks=filterableByDesks,
            maxMainDocuments=maxMainDocuments,
            sealAutomatic=sealAutomatic,
            readingMandatory=readingMandatory,
            digitalSignatureMandatory=digitalSignatureMandatory,
            annexeIncluded=annexeIncluded,
            multiDocuments=multiDocuments,
            _configuration=_configuration,
            **kwargs,
        )

from iparapheur_provisioning.model.desk_representation import DeskRepresentation
from iparapheur_provisioning.model.external_signature_config_representation import ExternalSignatureConfigRepresentation
from iparapheur_provisioning.model.seal_certificate_representation import SealCertificateRepresentation
from iparapheur_provisioning.model.subtype_layer_dto import SubtypeLayerDto
from iparapheur_provisioning.model.subtype_metadata_dto import SubtypeMetadataDto
