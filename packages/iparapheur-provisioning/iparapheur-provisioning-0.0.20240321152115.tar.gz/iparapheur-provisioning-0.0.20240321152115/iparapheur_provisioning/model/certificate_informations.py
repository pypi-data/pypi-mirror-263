# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic.   # noqa: E501

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iparapheur_provisioning import schemas  # noqa: F401


class CertificateInformations(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            title = schemas.StrSchema
            emailAddress = schemas.StrSchema
            commonName = schemas.StrSchema
            organizationalUnit = schemas.StrSchema
            organization = schemas.StrSchema
            locality = schemas.StrSchema
            stateOrProvince = schemas.StrSchema
            country = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "emailAddress": emailAddress,
                "commonName": commonName,
                "organizationalUnit": organizationalUnit,
                "organization": organization,
                "locality": locality,
                "stateOrProvince": stateOrProvince,
                "country": country,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["emailAddress"]) -> MetaOapg.properties.emailAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commonName"]) -> MetaOapg.properties.commonName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organizationalUnit"]) -> MetaOapg.properties.organizationalUnit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["organization"]) -> MetaOapg.properties.organization: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locality"]) -> MetaOapg.properties.locality: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateOrProvince"]) -> MetaOapg.properties.stateOrProvince: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "emailAddress", "commonName", "organizationalUnit", "organization", "locality", "stateOrProvince", "country", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["emailAddress"]) -> typing.Union[MetaOapg.properties.emailAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commonName"]) -> typing.Union[MetaOapg.properties.commonName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organizationalUnit"]) -> typing.Union[MetaOapg.properties.organizationalUnit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["organization"]) -> typing.Union[MetaOapg.properties.organization, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locality"]) -> typing.Union[MetaOapg.properties.locality, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateOrProvince"]) -> typing.Union[MetaOapg.properties.stateOrProvince, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> typing.Union[MetaOapg.properties.country, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "emailAddress", "commonName", "organizationalUnit", "organization", "locality", "stateOrProvince", "country", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, None, ],
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        emailAddress: typing.Union[MetaOapg.properties.emailAddress, str, schemas.Unset] = schemas.unset,
        commonName: typing.Union[MetaOapg.properties.commonName, str, schemas.Unset] = schemas.unset,
        organizationalUnit: typing.Union[MetaOapg.properties.organizationalUnit, str, schemas.Unset] = schemas.unset,
        organization: typing.Union[MetaOapg.properties.organization, str, schemas.Unset] = schemas.unset,
        locality: typing.Union[MetaOapg.properties.locality, str, schemas.Unset] = schemas.unset,
        stateOrProvince: typing.Union[MetaOapg.properties.stateOrProvince, str, schemas.Unset] = schemas.unset,
        country: typing.Union[MetaOapg.properties.country, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CertificateInformations':
        return super().__new__(
            cls,
            *_args,
            title=title,
            emailAddress=emailAddress,
            commonName=commonName,
            organizationalUnit=organizationalUnit,
            organization=organization,
            locality=locality,
            stateOrProvince=stateOrProvince,
            country=country,
            _configuration=_configuration,
            **kwargs,
        )
