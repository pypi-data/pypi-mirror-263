# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic.   # noqa: E501

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iparapheur_provisioning import schemas  # noqa: F401


class DeskDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    body
    """


    class MetaOapg:
        required = {
            "ownerIds",
            "delegationManagerIds",
            "supervisorIds",
            "name",
            "associatedDeskIds",
            "filterableMetadataIds",
            "shortName",
        }
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 2
                    regex=[{
                        'pattern': r'^[^\r\nÂ ]*$',  # noqa: E501
                    }]
            
            
            class shortName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 2
            
            
            class ownerIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 250
                    min_items = 0
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ownerIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class associatedDeskIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 250
                    min_items = 0
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'associatedDeskIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class filterableMetadataIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 250
                    min_items = 0
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'filterableMetadataIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class supervisorIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 50
                    min_items = 0
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'supervisorIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class delegationManagerIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    max_items = 50
                    min_items = 0
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'delegationManagerIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            id = schemas.StrSchema
            tenantId = schemas.StrSchema
            description = schemas.StrSchema
            folderCreationAllowed = schemas.BoolSchema
            actionAllowed = schemas.BoolSchema
            archivingAllowed = schemas.BoolSchema
            chainAllowed = schemas.BoolSchema
            parentDeskId = schemas.StrSchema
        
            @staticmethod
            def parentDesk() -> typing.Type['DeskRepresentation']:
                return DeskRepresentation
            
            
            class owners(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['UserRepresentation']:
                        return UserRepresentation
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['UserRepresentation'], typing.List['UserRepresentation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'owners':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UserRepresentation':
                    return super().__getitem__(i)
            
            
            class associatedDesks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeskRepresentation']:
                        return DeskRepresentation
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeskRepresentation'], typing.List['DeskRepresentation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'associatedDesks':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeskRepresentation':
                    return super().__getitem__(i)
            
            
            class filterableMetadata(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MetadataRepresentation']:
                        return MetadataRepresentation
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['MetadataRepresentation'], typing.List['MetadataRepresentation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'filterableMetadata':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MetadataRepresentation':
                    return super().__getitem__(i)
            
            
            class supervisors(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['UserRepresentation']:
                        return UserRepresentation
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['UserRepresentation'], typing.List['UserRepresentation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'supervisors':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UserRepresentation':
                    return super().__getitem__(i)
            
            
            class delegationManagers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['UserRepresentation']:
                        return UserRepresentation
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['UserRepresentation'], typing.List['UserRepresentation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'delegationManagers':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'UserRepresentation':
                    return super().__getitem__(i)
            __annotations__ = {
                "name": name,
                "shortName": shortName,
                "ownerIds": ownerIds,
                "associatedDeskIds": associatedDeskIds,
                "filterableMetadataIds": filterableMetadataIds,
                "supervisorIds": supervisorIds,
                "delegationManagerIds": delegationManagerIds,
                "id": id,
                "tenantId": tenantId,
                "description": description,
                "folderCreationAllowed": folderCreationAllowed,
                "actionAllowed": actionAllowed,
                "archivingAllowed": archivingAllowed,
                "chainAllowed": chainAllowed,
                "parentDeskId": parentDeskId,
                "parentDesk": parentDesk,
                "owners": owners,
                "associatedDesks": associatedDesks,
                "filterableMetadata": filterableMetadata,
                "supervisors": supervisors,
                "delegationManagers": delegationManagers,
            }
    
    ownerIds: MetaOapg.properties.ownerIds
    delegationManagerIds: MetaOapg.properties.delegationManagerIds
    supervisorIds: MetaOapg.properties.supervisorIds
    name: MetaOapg.properties.name
    associatedDeskIds: MetaOapg.properties.associatedDeskIds
    filterableMetadataIds: MetaOapg.properties.filterableMetadataIds
    shortName: MetaOapg.properties.shortName
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shortName"]) -> MetaOapg.properties.shortName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ownerIds"]) -> MetaOapg.properties.ownerIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["associatedDeskIds"]) -> MetaOapg.properties.associatedDeskIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterableMetadataIds"]) -> MetaOapg.properties.filterableMetadataIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisorIds"]) -> MetaOapg.properties.supervisorIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delegationManagerIds"]) -> MetaOapg.properties.delegationManagerIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tenantId"]) -> MetaOapg.properties.tenantId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["folderCreationAllowed"]) -> MetaOapg.properties.folderCreationAllowed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["actionAllowed"]) -> MetaOapg.properties.actionAllowed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archivingAllowed"]) -> MetaOapg.properties.archivingAllowed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chainAllowed"]) -> MetaOapg.properties.chainAllowed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentDeskId"]) -> MetaOapg.properties.parentDeskId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parentDesk"]) -> 'DeskRepresentation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owners"]) -> MetaOapg.properties.owners: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["associatedDesks"]) -> MetaOapg.properties.associatedDesks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filterableMetadata"]) -> MetaOapg.properties.filterableMetadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisors"]) -> MetaOapg.properties.supervisors: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delegationManagers"]) -> MetaOapg.properties.delegationManagers: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "shortName", "ownerIds", "associatedDeskIds", "filterableMetadataIds", "supervisorIds", "delegationManagerIds", "id", "tenantId", "description", "folderCreationAllowed", "actionAllowed", "archivingAllowed", "chainAllowed", "parentDeskId", "parentDesk", "owners", "associatedDesks", "filterableMetadata", "supervisors", "delegationManagers", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shortName"]) -> MetaOapg.properties.shortName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ownerIds"]) -> MetaOapg.properties.ownerIds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["associatedDeskIds"]) -> MetaOapg.properties.associatedDeskIds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterableMetadataIds"]) -> MetaOapg.properties.filterableMetadataIds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisorIds"]) -> MetaOapg.properties.supervisorIds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delegationManagerIds"]) -> MetaOapg.properties.delegationManagerIds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tenantId"]) -> typing.Union[MetaOapg.properties.tenantId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["folderCreationAllowed"]) -> typing.Union[MetaOapg.properties.folderCreationAllowed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["actionAllowed"]) -> typing.Union[MetaOapg.properties.actionAllowed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archivingAllowed"]) -> typing.Union[MetaOapg.properties.archivingAllowed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chainAllowed"]) -> typing.Union[MetaOapg.properties.chainAllowed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentDeskId"]) -> typing.Union[MetaOapg.properties.parentDeskId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parentDesk"]) -> typing.Union['DeskRepresentation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owners"]) -> typing.Union[MetaOapg.properties.owners, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["associatedDesks"]) -> typing.Union[MetaOapg.properties.associatedDesks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filterableMetadata"]) -> typing.Union[MetaOapg.properties.filterableMetadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisors"]) -> typing.Union[MetaOapg.properties.supervisors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delegationManagers"]) -> typing.Union[MetaOapg.properties.delegationManagers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "shortName", "ownerIds", "associatedDeskIds", "filterableMetadataIds", "supervisorIds", "delegationManagerIds", "id", "tenantId", "description", "folderCreationAllowed", "actionAllowed", "archivingAllowed", "chainAllowed", "parentDeskId", "parentDesk", "owners", "associatedDesks", "filterableMetadata", "supervisors", "delegationManagers", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ownerIds: typing.Union[MetaOapg.properties.ownerIds, list, tuple, ],
        delegationManagerIds: typing.Union[MetaOapg.properties.delegationManagerIds, list, tuple, ],
        supervisorIds: typing.Union[MetaOapg.properties.supervisorIds, list, tuple, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        associatedDeskIds: typing.Union[MetaOapg.properties.associatedDeskIds, list, tuple, ],
        filterableMetadataIds: typing.Union[MetaOapg.properties.filterableMetadataIds, list, tuple, ],
        shortName: typing.Union[MetaOapg.properties.shortName, str, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        tenantId: typing.Union[MetaOapg.properties.tenantId, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        folderCreationAllowed: typing.Union[MetaOapg.properties.folderCreationAllowed, bool, schemas.Unset] = schemas.unset,
        actionAllowed: typing.Union[MetaOapg.properties.actionAllowed, bool, schemas.Unset] = schemas.unset,
        archivingAllowed: typing.Union[MetaOapg.properties.archivingAllowed, bool, schemas.Unset] = schemas.unset,
        chainAllowed: typing.Union[MetaOapg.properties.chainAllowed, bool, schemas.Unset] = schemas.unset,
        parentDeskId: typing.Union[MetaOapg.properties.parentDeskId, str, schemas.Unset] = schemas.unset,
        parentDesk: typing.Union['DeskRepresentation', schemas.Unset] = schemas.unset,
        owners: typing.Union[MetaOapg.properties.owners, list, tuple, schemas.Unset] = schemas.unset,
        associatedDesks: typing.Union[MetaOapg.properties.associatedDesks, list, tuple, schemas.Unset] = schemas.unset,
        filterableMetadata: typing.Union[MetaOapg.properties.filterableMetadata, list, tuple, schemas.Unset] = schemas.unset,
        supervisors: typing.Union[MetaOapg.properties.supervisors, list, tuple, schemas.Unset] = schemas.unset,
        delegationManagers: typing.Union[MetaOapg.properties.delegationManagers, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DeskDto':
        return super().__new__(
            cls,
            *_args,
            ownerIds=ownerIds,
            delegationManagerIds=delegationManagerIds,
            supervisorIds=supervisorIds,
            name=name,
            associatedDeskIds=associatedDeskIds,
            filterableMetadataIds=filterableMetadataIds,
            shortName=shortName,
            id=id,
            tenantId=tenantId,
            description=description,
            folderCreationAllowed=folderCreationAllowed,
            actionAllowed=actionAllowed,
            archivingAllowed=archivingAllowed,
            chainAllowed=chainAllowed,
            parentDeskId=parentDeskId,
            parentDesk=parentDesk,
            owners=owners,
            associatedDesks=associatedDesks,
            filterableMetadata=filterableMetadata,
            supervisors=supervisors,
            delegationManagers=delegationManagers,
            _configuration=_configuration,
            **kwargs,
        )

from iparapheur_provisioning.model.desk_representation import DeskRepresentation
from iparapheur_provisioning.model.metadata_representation import MetadataRepresentation
from iparapheur_provisioning.model.user_representation import UserRepresentation
