# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic.   # noqa: E501

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iparapheur_provisioning import schemas  # noqa: F401


class SealCertificateDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Seal certificate
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            
            
            class name(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 2
                    regex=[{
                        'pattern': r'^[^\r\nÂ ]*$',  # noqa: E501
                    }]
            id = schemas.StrSchema
            expirationDate = schemas.DateTimeSchema
            usageCount = schemas.Int64Schema
            
            
            class signatureImageContentId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'signatureImageContentId':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class password(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'password':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def issuer() -> typing.Type['CertificateInformations']:
                return CertificateInformations
        
            @staticmethod
            def subject() -> typing.Type['CertificateInformations']:
                return CertificateInformations
            __annotations__ = {
                "name": name,
                "id": id,
                "expirationDate": expirationDate,
                "usageCount": usageCount,
                "signatureImageContentId": signatureImageContentId,
                "password": password,
                "issuer": issuer,
                "subject": subject,
            }
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expirationDate"]) -> MetaOapg.properties.expirationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["usageCount"]) -> MetaOapg.properties.usageCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["signatureImageContentId"]) -> MetaOapg.properties.signatureImageContentId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["issuer"]) -> 'CertificateInformations': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subject"]) -> 'CertificateInformations': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "id", "expirationDate", "usageCount", "signatureImageContentId", "password", "issuer", "subject", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expirationDate"]) -> typing.Union[MetaOapg.properties.expirationDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["usageCount"]) -> typing.Union[MetaOapg.properties.usageCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["signatureImageContentId"]) -> typing.Union[MetaOapg.properties.signatureImageContentId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union[MetaOapg.properties.password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["issuer"]) -> typing.Union['CertificateInformations', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subject"]) -> typing.Union['CertificateInformations', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "id", "expirationDate", "usageCount", "signatureImageContentId", "password", "issuer", "subject", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        expirationDate: typing.Union[MetaOapg.properties.expirationDate, str, datetime, schemas.Unset] = schemas.unset,
        usageCount: typing.Union[MetaOapg.properties.usageCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        signatureImageContentId: typing.Union[MetaOapg.properties.signatureImageContentId, None, str, schemas.Unset] = schemas.unset,
        password: typing.Union[MetaOapg.properties.password, None, str, schemas.Unset] = schemas.unset,
        issuer: typing.Union['CertificateInformations', schemas.Unset] = schemas.unset,
        subject: typing.Union['CertificateInformations', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SealCertificateDto':
        return super().__new__(
            cls,
            *_args,
            name=name,
            id=id,
            expirationDate=expirationDate,
            usageCount=usageCount,
            signatureImageContentId=signatureImageContentId,
            password=password,
            issuer=issuer,
            subject=subject,
            _configuration=_configuration,
            **kwargs,
        )

from iparapheur_provisioning.model.certificate_informations import CertificateInformations
