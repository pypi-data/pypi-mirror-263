# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic.   # noqa: E501

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iparapheur_provisioning import schemas  # noqa: F401


class UserDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Every field is mandatory
    """


    class MetaOapg:
        required = {
            "firstName",
            "lastName",
            "privilege",
            "userName",
            "email",
        }
        
        class properties:
            
            
            class userName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 128
                    min_length = 1
            
            
            class firstName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 128
                    min_length = 0
            
            
            class lastName(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 128
                    min_length = 0
            email = schemas.StrSchema
        
            @staticmethod
            def privilege() -> typing.Type['UserPrivilege']:
                return UserPrivilege
            id = schemas.StrSchema
            isLdapSynchronized = schemas.BoolSchema
            
            
            class associatedTenants(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TenantRepresentation']:
                        return TenantRepresentation
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TenantRepresentation'], typing.List['TenantRepresentation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'associatedTenants':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TenantRepresentation':
                    return super().__getitem__(i)
            
            
            class associatedTenantIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'associatedTenantIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class administeredTenants(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TenantRepresentation']:
                        return TenantRepresentation
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['TenantRepresentation'], typing.List['TenantRepresentation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'administeredTenants':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TenantRepresentation':
                    return super().__getitem__(i)
            
            
            class administeredTenantIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'administeredTenantIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class administeredDesks(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeskRepresentation']:
                        return DeskRepresentation
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'administeredDesks':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class administeredDeskIds(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'administeredDeskIds':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class associatedDesks(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeskRepresentation']:
                        return DeskRepresentation
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'associatedDesks':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class associatedDeskIds(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'associatedDeskIds':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class supervisedDesks(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeskRepresentation']:
                        return DeskRepresentation
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'supervisedDesks':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class supervisedDeskIds(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'supervisedDeskIds':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class delegationManagedDesks(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeskRepresentation']:
                        return DeskRepresentation
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'delegationManagedDesks':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class delegationManagedDeskIds(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                            )
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'delegationManagedDeskIds':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class complementaryField(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 255
                    min_length = 0
            resetPasswordRequired = schemas.BoolSchema
            password = schemas.StrSchema
            __annotations__ = {
                "userName": userName,
                "firstName": firstName,
                "lastName": lastName,
                "email": email,
                "privilege": privilege,
                "id": id,
                "isLdapSynchronized": isLdapSynchronized,
                "associatedTenants": associatedTenants,
                "associatedTenantIds": associatedTenantIds,
                "administeredTenants": administeredTenants,
                "administeredTenantIds": administeredTenantIds,
                "administeredDesks": administeredDesks,
                "administeredDeskIds": administeredDeskIds,
                "associatedDesks": associatedDesks,
                "associatedDeskIds": associatedDeskIds,
                "supervisedDesks": supervisedDesks,
                "supervisedDeskIds": supervisedDeskIds,
                "delegationManagedDesks": delegationManagedDesks,
                "delegationManagedDeskIds": delegationManagedDeskIds,
                "complementaryField": complementaryField,
                "resetPasswordRequired": resetPasswordRequired,
                "password": password,
            }
    
    firstName: MetaOapg.properties.firstName
    lastName: MetaOapg.properties.lastName
    privilege: 'UserPrivilege'
    userName: MetaOapg.properties.userName
    email: MetaOapg.properties.email
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privilege"]) -> 'UserPrivilege': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isLdapSynchronized"]) -> MetaOapg.properties.isLdapSynchronized: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["associatedTenants"]) -> MetaOapg.properties.associatedTenants: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["associatedTenantIds"]) -> MetaOapg.properties.associatedTenantIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["administeredTenants"]) -> MetaOapg.properties.administeredTenants: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["administeredTenantIds"]) -> MetaOapg.properties.administeredTenantIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["administeredDesks"]) -> MetaOapg.properties.administeredDesks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["administeredDeskIds"]) -> MetaOapg.properties.administeredDeskIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["associatedDesks"]) -> MetaOapg.properties.associatedDesks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["associatedDeskIds"]) -> MetaOapg.properties.associatedDeskIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisedDesks"]) -> MetaOapg.properties.supervisedDesks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supervisedDeskIds"]) -> MetaOapg.properties.supervisedDeskIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delegationManagedDesks"]) -> MetaOapg.properties.delegationManagedDesks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delegationManagedDeskIds"]) -> MetaOapg.properties.delegationManagedDeskIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["complementaryField"]) -> MetaOapg.properties.complementaryField: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resetPasswordRequired"]) -> MetaOapg.properties.resetPasswordRequired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["userName", "firstName", "lastName", "email", "privilege", "id", "isLdapSynchronized", "associatedTenants", "associatedTenantIds", "administeredTenants", "administeredTenantIds", "administeredDesks", "administeredDeskIds", "associatedDesks", "associatedDeskIds", "supervisedDesks", "supervisedDeskIds", "delegationManagedDesks", "delegationManagedDeskIds", "complementaryField", "resetPasswordRequired", "password", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userName"]) -> MetaOapg.properties.userName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privilege"]) -> 'UserPrivilege': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isLdapSynchronized"]) -> typing.Union[MetaOapg.properties.isLdapSynchronized, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["associatedTenants"]) -> typing.Union[MetaOapg.properties.associatedTenants, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["associatedTenantIds"]) -> typing.Union[MetaOapg.properties.associatedTenantIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["administeredTenants"]) -> typing.Union[MetaOapg.properties.administeredTenants, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["administeredTenantIds"]) -> typing.Union[MetaOapg.properties.administeredTenantIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["administeredDesks"]) -> typing.Union[MetaOapg.properties.administeredDesks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["administeredDeskIds"]) -> typing.Union[MetaOapg.properties.administeredDeskIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["associatedDesks"]) -> typing.Union[MetaOapg.properties.associatedDesks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["associatedDeskIds"]) -> typing.Union[MetaOapg.properties.associatedDeskIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisedDesks"]) -> typing.Union[MetaOapg.properties.supervisedDesks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supervisedDeskIds"]) -> typing.Union[MetaOapg.properties.supervisedDeskIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delegationManagedDesks"]) -> typing.Union[MetaOapg.properties.delegationManagedDesks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delegationManagedDeskIds"]) -> typing.Union[MetaOapg.properties.delegationManagedDeskIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["complementaryField"]) -> typing.Union[MetaOapg.properties.complementaryField, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resetPasswordRequired"]) -> typing.Union[MetaOapg.properties.resetPasswordRequired, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union[MetaOapg.properties.password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["userName", "firstName", "lastName", "email", "privilege", "id", "isLdapSynchronized", "associatedTenants", "associatedTenantIds", "administeredTenants", "administeredTenantIds", "administeredDesks", "administeredDeskIds", "associatedDesks", "associatedDeskIds", "supervisedDesks", "supervisedDeskIds", "delegationManagedDesks", "delegationManagedDeskIds", "complementaryField", "resetPasswordRequired", "password", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        firstName: typing.Union[MetaOapg.properties.firstName, str, ],
        lastName: typing.Union[MetaOapg.properties.lastName, str, ],
        privilege: 'UserPrivilege',
        userName: typing.Union[MetaOapg.properties.userName, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        isLdapSynchronized: typing.Union[MetaOapg.properties.isLdapSynchronized, bool, schemas.Unset] = schemas.unset,
        associatedTenants: typing.Union[MetaOapg.properties.associatedTenants, list, tuple, schemas.Unset] = schemas.unset,
        associatedTenantIds: typing.Union[MetaOapg.properties.associatedTenantIds, list, tuple, schemas.Unset] = schemas.unset,
        administeredTenants: typing.Union[MetaOapg.properties.administeredTenants, list, tuple, schemas.Unset] = schemas.unset,
        administeredTenantIds: typing.Union[MetaOapg.properties.administeredTenantIds, list, tuple, schemas.Unset] = schemas.unset,
        administeredDesks: typing.Union[MetaOapg.properties.administeredDesks, list, tuple, None, schemas.Unset] = schemas.unset,
        administeredDeskIds: typing.Union[MetaOapg.properties.administeredDeskIds, list, tuple, None, schemas.Unset] = schemas.unset,
        associatedDesks: typing.Union[MetaOapg.properties.associatedDesks, list, tuple, None, schemas.Unset] = schemas.unset,
        associatedDeskIds: typing.Union[MetaOapg.properties.associatedDeskIds, list, tuple, None, schemas.Unset] = schemas.unset,
        supervisedDesks: typing.Union[MetaOapg.properties.supervisedDesks, list, tuple, None, schemas.Unset] = schemas.unset,
        supervisedDeskIds: typing.Union[MetaOapg.properties.supervisedDeskIds, list, tuple, None, schemas.Unset] = schemas.unset,
        delegationManagedDesks: typing.Union[MetaOapg.properties.delegationManagedDesks, list, tuple, None, schemas.Unset] = schemas.unset,
        delegationManagedDeskIds: typing.Union[MetaOapg.properties.delegationManagedDeskIds, list, tuple, None, schemas.Unset] = schemas.unset,
        complementaryField: typing.Union[MetaOapg.properties.complementaryField, str, schemas.Unset] = schemas.unset,
        resetPasswordRequired: typing.Union[MetaOapg.properties.resetPasswordRequired, bool, schemas.Unset] = schemas.unset,
        password: typing.Union[MetaOapg.properties.password, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UserDto':
        return super().__new__(
            cls,
            *_args,
            firstName=firstName,
            lastName=lastName,
            privilege=privilege,
            userName=userName,
            email=email,
            id=id,
            isLdapSynchronized=isLdapSynchronized,
            associatedTenants=associatedTenants,
            associatedTenantIds=associatedTenantIds,
            administeredTenants=administeredTenants,
            administeredTenantIds=administeredTenantIds,
            administeredDesks=administeredDesks,
            administeredDeskIds=administeredDeskIds,
            associatedDesks=associatedDesks,
            associatedDeskIds=associatedDeskIds,
            supervisedDesks=supervisedDesks,
            supervisedDeskIds=supervisedDeskIds,
            delegationManagedDesks=delegationManagedDesks,
            delegationManagedDeskIds=delegationManagedDeskIds,
            complementaryField=complementaryField,
            resetPasswordRequired=resetPasswordRequired,
            password=password,
            _configuration=_configuration,
            **kwargs,
        )

from iparapheur_provisioning.model.desk_representation import DeskRepresentation
from iparapheur_provisioning.model.tenant_representation import TenantRepresentation
from iparapheur_provisioning.model.user_privilege import UserPrivilege
