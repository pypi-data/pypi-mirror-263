# coding: utf-8

"""
    iparapheur

    iparapheur v5.x main core application.  The main link between every sub-services, integrating business code logic.   # noqa: E501

    The version of the OpenAPI document: DEVELOP
    Contact: iparapheur@libriciel.coop
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from iparapheur_provisioning import schemas  # noqa: F401


class StepDefinitionDto(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def type() -> typing.Type['StepDefinitionType']:
                return StepDefinitionType
            
            
            class validatingDeskIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'validatingDeskIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class validatingDesks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeskRepresentation']:
                        return DeskRepresentation
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeskRepresentation'], typing.List['DeskRepresentation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'validatingDesks':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeskRepresentation':
                    return super().__getitem__(i)
            
            
            class notifiedDeskIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'notifiedDeskIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class notifiedDesks(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DeskRepresentation']:
                        return DeskRepresentation
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DeskRepresentation'], typing.List['DeskRepresentation']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'notifiedDesks':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DeskRepresentation':
                    return super().__getitem__(i)
            
            
            class mandatoryValidationMetadataIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mandatoryValidationMetadataIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class mandatoryValidationMetadata(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MetadataDto']:
                        return MetadataDto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['MetadataDto'], typing.List['MetadataDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mandatoryValidationMetadata':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MetadataDto':
                    return super().__getitem__(i)
            
            
            class mandatoryRejectionMetadataIds(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mandatoryRejectionMetadataIds':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class mandatoryRejectionMetadata(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MetadataDto']:
                        return MetadataDto
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['MetadataDto'], typing.List['MetadataDto']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mandatoryRejectionMetadata':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MetadataDto':
                    return super().__getitem__(i)
        
            @staticmethod
            def parallelType() -> typing.Type['StepDefinitionParallelType']:
                return StepDefinitionParallelType
            __annotations__ = {
                "type": type,
                "validatingDeskIds": validatingDeskIds,
                "validatingDesks": validatingDesks,
                "notifiedDeskIds": notifiedDeskIds,
                "notifiedDesks": notifiedDesks,
                "mandatoryValidationMetadataIds": mandatoryValidationMetadataIds,
                "mandatoryValidationMetadata": mandatoryValidationMetadata,
                "mandatoryRejectionMetadataIds": mandatoryRejectionMetadataIds,
                "mandatoryRejectionMetadata": mandatoryRejectionMetadata,
                "parallelType": parallelType,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'StepDefinitionType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validatingDeskIds"]) -> MetaOapg.properties.validatingDeskIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validatingDesks"]) -> MetaOapg.properties.validatingDesks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notifiedDeskIds"]) -> MetaOapg.properties.notifiedDeskIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notifiedDesks"]) -> MetaOapg.properties.notifiedDesks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mandatoryValidationMetadataIds"]) -> MetaOapg.properties.mandatoryValidationMetadataIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mandatoryValidationMetadata"]) -> MetaOapg.properties.mandatoryValidationMetadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mandatoryRejectionMetadataIds"]) -> MetaOapg.properties.mandatoryRejectionMetadataIds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mandatoryRejectionMetadata"]) -> MetaOapg.properties.mandatoryRejectionMetadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parallelType"]) -> 'StepDefinitionParallelType': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "validatingDeskIds", "validatingDesks", "notifiedDeskIds", "notifiedDesks", "mandatoryValidationMetadataIds", "mandatoryValidationMetadata", "mandatoryRejectionMetadataIds", "mandatoryRejectionMetadata", "parallelType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['StepDefinitionType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validatingDeskIds"]) -> typing.Union[MetaOapg.properties.validatingDeskIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validatingDesks"]) -> typing.Union[MetaOapg.properties.validatingDesks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notifiedDeskIds"]) -> typing.Union[MetaOapg.properties.notifiedDeskIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notifiedDesks"]) -> typing.Union[MetaOapg.properties.notifiedDesks, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mandatoryValidationMetadataIds"]) -> typing.Union[MetaOapg.properties.mandatoryValidationMetadataIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mandatoryValidationMetadata"]) -> typing.Union[MetaOapg.properties.mandatoryValidationMetadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mandatoryRejectionMetadataIds"]) -> typing.Union[MetaOapg.properties.mandatoryRejectionMetadataIds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mandatoryRejectionMetadata"]) -> typing.Union[MetaOapg.properties.mandatoryRejectionMetadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parallelType"]) -> typing.Union['StepDefinitionParallelType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "validatingDeskIds", "validatingDesks", "notifiedDeskIds", "notifiedDesks", "mandatoryValidationMetadataIds", "mandatoryValidationMetadata", "mandatoryRejectionMetadataIds", "mandatoryRejectionMetadata", "parallelType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union['StepDefinitionType', schemas.Unset] = schemas.unset,
        validatingDeskIds: typing.Union[MetaOapg.properties.validatingDeskIds, list, tuple, schemas.Unset] = schemas.unset,
        validatingDesks: typing.Union[MetaOapg.properties.validatingDesks, list, tuple, schemas.Unset] = schemas.unset,
        notifiedDeskIds: typing.Union[MetaOapg.properties.notifiedDeskIds, list, tuple, schemas.Unset] = schemas.unset,
        notifiedDesks: typing.Union[MetaOapg.properties.notifiedDesks, list, tuple, schemas.Unset] = schemas.unset,
        mandatoryValidationMetadataIds: typing.Union[MetaOapg.properties.mandatoryValidationMetadataIds, list, tuple, schemas.Unset] = schemas.unset,
        mandatoryValidationMetadata: typing.Union[MetaOapg.properties.mandatoryValidationMetadata, list, tuple, schemas.Unset] = schemas.unset,
        mandatoryRejectionMetadataIds: typing.Union[MetaOapg.properties.mandatoryRejectionMetadataIds, list, tuple, schemas.Unset] = schemas.unset,
        mandatoryRejectionMetadata: typing.Union[MetaOapg.properties.mandatoryRejectionMetadata, list, tuple, schemas.Unset] = schemas.unset,
        parallelType: typing.Union['StepDefinitionParallelType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'StepDefinitionDto':
        return super().__new__(
            cls,
            *_args,
            type=type,
            validatingDeskIds=validatingDeskIds,
            validatingDesks=validatingDesks,
            notifiedDeskIds=notifiedDeskIds,
            notifiedDesks=notifiedDesks,
            mandatoryValidationMetadataIds=mandatoryValidationMetadataIds,
            mandatoryValidationMetadata=mandatoryValidationMetadata,
            mandatoryRejectionMetadataIds=mandatoryRejectionMetadataIds,
            mandatoryRejectionMetadata=mandatoryRejectionMetadata,
            parallelType=parallelType,
            _configuration=_configuration,
            **kwargs,
        )

from iparapheur_provisioning.model.desk_representation import DeskRepresentation
from iparapheur_provisioning.model.metadata_dto import MetadataDto
from iparapheur_provisioning.model.step_definition_parallel_type import StepDefinitionParallelType
from iparapheur_provisioning.model.step_definition_type import StepDefinitionType
