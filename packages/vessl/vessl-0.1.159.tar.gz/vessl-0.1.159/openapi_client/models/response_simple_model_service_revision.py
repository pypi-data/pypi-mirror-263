# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ResponseSimpleModelServiceRevision(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'autoscaler_config': 'OrmAutoscalerConfig',
        'available_replicas': 'int',
        'created_by': 'ResponseUser',
        'created_dt': 'datetime',
        'id': 'int',
        'message': 'str',
        'model_service_name': 'str',
        'number': 'int',
        'ports': 'OrmWorkloadPorts',
        'status': 'str'
    }

    attribute_map = {
        'autoscaler_config': 'autoscaler_config',
        'available_replicas': 'available_replicas',
        'created_by': 'created_by',
        'created_dt': 'created_dt',
        'id': 'id',
        'message': 'message',
        'model_service_name': 'model_service_name',
        'number': 'number',
        'ports': 'ports',
        'status': 'status'
    }

    def __init__(self, autoscaler_config=None, available_replicas=None, created_by=None, created_dt=None, id=None, message=None, model_service_name=None, number=None, ports=None, status=None, local_vars_configuration=None):  # noqa: E501
        """ResponseSimpleModelServiceRevision - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._autoscaler_config = None
        self._available_replicas = None
        self._created_by = None
        self._created_dt = None
        self._id = None
        self._message = None
        self._model_service_name = None
        self._number = None
        self._ports = None
        self._status = None
        self.discriminator = None

        if autoscaler_config is not None:
            self.autoscaler_config = autoscaler_config
        self.available_replicas = available_replicas
        self.created_by = created_by
        self.created_dt = created_dt
        self.id = id
        self.message = message
        self.model_service_name = model_service_name
        self.number = number
        self.ports = ports
        self.status = status

    @property
    def autoscaler_config(self):
        """Gets the autoscaler_config of this ResponseSimpleModelServiceRevision.  # noqa: E501


        :return: The autoscaler_config of this ResponseSimpleModelServiceRevision.  # noqa: E501
        :rtype: OrmAutoscalerConfig
        """
        return self._autoscaler_config

    @autoscaler_config.setter
    def autoscaler_config(self, autoscaler_config):
        """Sets the autoscaler_config of this ResponseSimpleModelServiceRevision.


        :param autoscaler_config: The autoscaler_config of this ResponseSimpleModelServiceRevision.  # noqa: E501
        :type autoscaler_config: OrmAutoscalerConfig
        """

        self._autoscaler_config = autoscaler_config

    @property
    def available_replicas(self):
        """Gets the available_replicas of this ResponseSimpleModelServiceRevision.  # noqa: E501


        :return: The available_replicas of this ResponseSimpleModelServiceRevision.  # noqa: E501
        :rtype: int
        """
        return self._available_replicas

    @available_replicas.setter
    def available_replicas(self, available_replicas):
        """Sets the available_replicas of this ResponseSimpleModelServiceRevision.


        :param available_replicas: The available_replicas of this ResponseSimpleModelServiceRevision.  # noqa: E501
        :type available_replicas: int
        """
        if self.local_vars_configuration.client_side_validation and available_replicas is None:  # noqa: E501
            raise ValueError("Invalid value for `available_replicas`, must not be `None`")  # noqa: E501

        self._available_replicas = available_replicas

    @property
    def created_by(self):
        """Gets the created_by of this ResponseSimpleModelServiceRevision.  # noqa: E501


        :return: The created_by of this ResponseSimpleModelServiceRevision.  # noqa: E501
        :rtype: ResponseUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ResponseSimpleModelServiceRevision.


        :param created_by: The created_by of this ResponseSimpleModelServiceRevision.  # noqa: E501
        :type created_by: ResponseUser
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_dt(self):
        """Gets the created_dt of this ResponseSimpleModelServiceRevision.  # noqa: E501


        :return: The created_dt of this ResponseSimpleModelServiceRevision.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ResponseSimpleModelServiceRevision.


        :param created_dt: The created_dt of this ResponseSimpleModelServiceRevision.  # noqa: E501
        :type created_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `created_dt`, must not be `None`")  # noqa: E501

        self._created_dt = created_dt

    @property
    def id(self):
        """Gets the id of this ResponseSimpleModelServiceRevision.  # noqa: E501


        :return: The id of this ResponseSimpleModelServiceRevision.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseSimpleModelServiceRevision.


        :param id: The id of this ResponseSimpleModelServiceRevision.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def message(self):
        """Gets the message of this ResponseSimpleModelServiceRevision.  # noqa: E501


        :return: The message of this ResponseSimpleModelServiceRevision.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ResponseSimpleModelServiceRevision.


        :param message: The message of this ResponseSimpleModelServiceRevision.  # noqa: E501
        :type message: str
        """
        if self.local_vars_configuration.client_side_validation and message is None:  # noqa: E501
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def model_service_name(self):
        """Gets the model_service_name of this ResponseSimpleModelServiceRevision.  # noqa: E501


        :return: The model_service_name of this ResponseSimpleModelServiceRevision.  # noqa: E501
        :rtype: str
        """
        return self._model_service_name

    @model_service_name.setter
    def model_service_name(self, model_service_name):
        """Sets the model_service_name of this ResponseSimpleModelServiceRevision.


        :param model_service_name: The model_service_name of this ResponseSimpleModelServiceRevision.  # noqa: E501
        :type model_service_name: str
        """
        if self.local_vars_configuration.client_side_validation and model_service_name is None:  # noqa: E501
            raise ValueError("Invalid value for `model_service_name`, must not be `None`")  # noqa: E501

        self._model_service_name = model_service_name

    @property
    def number(self):
        """Gets the number of this ResponseSimpleModelServiceRevision.  # noqa: E501


        :return: The number of this ResponseSimpleModelServiceRevision.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ResponseSimpleModelServiceRevision.


        :param number: The number of this ResponseSimpleModelServiceRevision.  # noqa: E501
        :type number: int
        """
        if self.local_vars_configuration.client_side_validation and number is None:  # noqa: E501
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def ports(self):
        """Gets the ports of this ResponseSimpleModelServiceRevision.  # noqa: E501


        :return: The ports of this ResponseSimpleModelServiceRevision.  # noqa: E501
        :rtype: OrmWorkloadPorts
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this ResponseSimpleModelServiceRevision.


        :param ports: The ports of this ResponseSimpleModelServiceRevision.  # noqa: E501
        :type ports: OrmWorkloadPorts
        """
        if self.local_vars_configuration.client_side_validation and ports is None:  # noqa: E501
            raise ValueError("Invalid value for `ports`, must not be `None`")  # noqa: E501

        self._ports = ports

    @property
    def status(self):
        """Gets the status of this ResponseSimpleModelServiceRevision.  # noqa: E501


        :return: The status of this ResponseSimpleModelServiceRevision.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponseSimpleModelServiceRevision.


        :param status: The status of this ResponseSimpleModelServiceRevision.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseSimpleModelServiceRevision):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseSimpleModelServiceRevision):
            return True

        return self.to_dict() != other.to_dict()
