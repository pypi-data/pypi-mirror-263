# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class OrmModelServiceRolloutStepWrapper(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'create_new_revision': 'OrmModelServiceRolloutStepCreateNewRevision',
        'send_notification': 'OrmModelServiceRolloutStepSendNotification',
        'step_type': 'str',
        'update_endpoint': 'OrmModelServiceRolloutStepUpdateEndpoint',
        'update_revisions': 'OrmModelServiceRolloutStepUpdateRevisions',
        'wait': 'OrmModelServiceRolloutStepWait'
    }

    attribute_map = {
        'create_new_revision': 'create_new_revision',
        'send_notification': 'send_notification',
        'step_type': 'step_type',
        'update_endpoint': 'update_endpoint',
        'update_revisions': 'update_revisions',
        'wait': 'wait'
    }

    def __init__(self, create_new_revision=None, send_notification=None, step_type=None, update_endpoint=None, update_revisions=None, wait=None, local_vars_configuration=None):  # noqa: E501
        """OrmModelServiceRolloutStepWrapper - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._create_new_revision = None
        self._send_notification = None
        self._step_type = None
        self._update_endpoint = None
        self._update_revisions = None
        self._wait = None
        self.discriminator = None

        if create_new_revision is not None:
            self.create_new_revision = create_new_revision
        if send_notification is not None:
            self.send_notification = send_notification
        if step_type is not None:
            self.step_type = step_type
        if update_endpoint is not None:
            self.update_endpoint = update_endpoint
        if update_revisions is not None:
            self.update_revisions = update_revisions
        if wait is not None:
            self.wait = wait

    @property
    def create_new_revision(self):
        """Gets the create_new_revision of this OrmModelServiceRolloutStepWrapper.  # noqa: E501


        :return: The create_new_revision of this OrmModelServiceRolloutStepWrapper.  # noqa: E501
        :rtype: OrmModelServiceRolloutStepCreateNewRevision
        """
        return self._create_new_revision

    @create_new_revision.setter
    def create_new_revision(self, create_new_revision):
        """Sets the create_new_revision of this OrmModelServiceRolloutStepWrapper.


        :param create_new_revision: The create_new_revision of this OrmModelServiceRolloutStepWrapper.  # noqa: E501
        :type create_new_revision: OrmModelServiceRolloutStepCreateNewRevision
        """

        self._create_new_revision = create_new_revision

    @property
    def send_notification(self):
        """Gets the send_notification of this OrmModelServiceRolloutStepWrapper.  # noqa: E501


        :return: The send_notification of this OrmModelServiceRolloutStepWrapper.  # noqa: E501
        :rtype: OrmModelServiceRolloutStepSendNotification
        """
        return self._send_notification

    @send_notification.setter
    def send_notification(self, send_notification):
        """Sets the send_notification of this OrmModelServiceRolloutStepWrapper.


        :param send_notification: The send_notification of this OrmModelServiceRolloutStepWrapper.  # noqa: E501
        :type send_notification: OrmModelServiceRolloutStepSendNotification
        """

        self._send_notification = send_notification

    @property
    def step_type(self):
        """Gets the step_type of this OrmModelServiceRolloutStepWrapper.  # noqa: E501


        :return: The step_type of this OrmModelServiceRolloutStepWrapper.  # noqa: E501
        :rtype: str
        """
        return self._step_type

    @step_type.setter
    def step_type(self, step_type):
        """Sets the step_type of this OrmModelServiceRolloutStepWrapper.


        :param step_type: The step_type of this OrmModelServiceRolloutStepWrapper.  # noqa: E501
        :type step_type: str
        """
        allowed_values = ["create_new_revision", "update_revisions", "update_endpoint", "wait", "send_notification"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and step_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `step_type` ({0}), must be one of {1}"  # noqa: E501
                .format(step_type, allowed_values)
            )

        self._step_type = step_type

    @property
    def update_endpoint(self):
        """Gets the update_endpoint of this OrmModelServiceRolloutStepWrapper.  # noqa: E501


        :return: The update_endpoint of this OrmModelServiceRolloutStepWrapper.  # noqa: E501
        :rtype: OrmModelServiceRolloutStepUpdateEndpoint
        """
        return self._update_endpoint

    @update_endpoint.setter
    def update_endpoint(self, update_endpoint):
        """Sets the update_endpoint of this OrmModelServiceRolloutStepWrapper.


        :param update_endpoint: The update_endpoint of this OrmModelServiceRolloutStepWrapper.  # noqa: E501
        :type update_endpoint: OrmModelServiceRolloutStepUpdateEndpoint
        """

        self._update_endpoint = update_endpoint

    @property
    def update_revisions(self):
        """Gets the update_revisions of this OrmModelServiceRolloutStepWrapper.  # noqa: E501


        :return: The update_revisions of this OrmModelServiceRolloutStepWrapper.  # noqa: E501
        :rtype: OrmModelServiceRolloutStepUpdateRevisions
        """
        return self._update_revisions

    @update_revisions.setter
    def update_revisions(self, update_revisions):
        """Sets the update_revisions of this OrmModelServiceRolloutStepWrapper.


        :param update_revisions: The update_revisions of this OrmModelServiceRolloutStepWrapper.  # noqa: E501
        :type update_revisions: OrmModelServiceRolloutStepUpdateRevisions
        """

        self._update_revisions = update_revisions

    @property
    def wait(self):
        """Gets the wait of this OrmModelServiceRolloutStepWrapper.  # noqa: E501


        :return: The wait of this OrmModelServiceRolloutStepWrapper.  # noqa: E501
        :rtype: OrmModelServiceRolloutStepWait
        """
        return self._wait

    @wait.setter
    def wait(self, wait):
        """Sets the wait of this OrmModelServiceRolloutStepWrapper.


        :param wait: The wait of this OrmModelServiceRolloutStepWrapper.  # noqa: E501
        :type wait: OrmModelServiceRolloutStepWait
        """

        self._wait = wait

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmModelServiceRolloutStepWrapper):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmModelServiceRolloutStepWrapper):
            return True

        return self.to_dict() != other.to_dict()
