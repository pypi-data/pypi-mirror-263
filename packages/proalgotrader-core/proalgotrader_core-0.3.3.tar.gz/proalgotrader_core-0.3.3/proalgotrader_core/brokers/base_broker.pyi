from proalgotrader_core.algo_session import AlgoSession as AlgoSession
from proalgotrader_core.api import Api as Api
from proalgotrader_core.base_symbol import BaseSymbol as BaseSymbol
from proalgotrader_core.broker_symbol import BrokerSymbol as BrokerSymbol
from proalgotrader_core.data_manager import DataManager as DataManager
from proalgotrader_core.order import Order as Order
from proalgotrader_core.position import Position as Position
from proalgotrader_core.trade import Trade as Trade

__test__: dict

class BaseBroker:
    def __init__(self, *args, **kwargs) -> None: ...
    def add_equity(self, *args, **kwargs): ...
    def add_future(self, *args, **kwargs): ...
    def add_option(self, *args, **kwargs): ...
    def enter_position(self, *args, **kwargs): ...
    def exit_position(self, *args, **kwargs): ...
    def get_enter_position_info(self, *args, **kwargs): ...
    def get_exit_position_info(self, *args, **kwargs): ...
    def get_order_info(self, *args, **kwargs): ...
    def get_order_types(self, *args, **kwargs): ...
    def get_position_info(self, *args, **kwargs): ...
    def get_position_types(self, *args, **kwargs): ...
    def get_positions(self, *args, **kwargs): ...
    def get_product_types(self, *args, **kwargs): ...
    def get_symbol(self, *args, **kwargs): ...
    def get_trade_info(self, *args, **kwargs): ...
    def get_trades(self, *args, **kwargs): ...
    def initialize(self, *args, **kwargs): ...
    def manage_position(self, *args, **kwargs): ...
    def next(self, *args, **kwargs): ...
    def on_after_market_closed(self, *args, **kwargs): ...
    def place_order(self, *args, **kwargs): ...
    def set_capital(self, *args, **kwargs): ...
    def set_orders(self, *args, **kwargs): ...
    def set_positions(self, *args, **kwargs): ...
    def set_token_manager(self, *args, **kwargs): ...
    def set_trades(self, *args, **kwargs): ...
