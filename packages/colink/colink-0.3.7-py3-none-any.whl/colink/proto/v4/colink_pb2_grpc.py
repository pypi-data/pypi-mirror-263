# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import colink.proto.colink_pb2 as colink__pb2


class CoLinkStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateToken = channel.unary_unary(
                '/colink.CoLink/GenerateToken',
                request_serializer=colink__pb2.GenerateTokenRequest.SerializeToString,
                response_deserializer=colink__pb2.Jwt.FromString,
                )
        self.ImportUser = channel.unary_unary(
                '/colink.CoLink/ImportUser',
                request_serializer=colink__pb2.UserConsent.SerializeToString,
                response_deserializer=colink__pb2.Jwt.FromString,
                )
        self.CreateEntry = channel.unary_unary(
                '/colink.CoLink/CreateEntry',
                request_serializer=colink__pb2.StorageEntry.SerializeToString,
                response_deserializer=colink__pb2.StorageEntry.FromString,
                )
        self.ReadEntries = channel.unary_unary(
                '/colink.CoLink/ReadEntries',
                request_serializer=colink__pb2.StorageEntries.SerializeToString,
                response_deserializer=colink__pb2.StorageEntries.FromString,
                )
        self.UpdateEntry = channel.unary_unary(
                '/colink.CoLink/UpdateEntry',
                request_serializer=colink__pb2.StorageEntry.SerializeToString,
                response_deserializer=colink__pb2.StorageEntry.FromString,
                )
        self.DeleteEntry = channel.unary_unary(
                '/colink.CoLink/DeleteEntry',
                request_serializer=colink__pb2.StorageEntry.SerializeToString,
                response_deserializer=colink__pb2.StorageEntry.FromString,
                )
        self.ReadKeys = channel.unary_unary(
                '/colink.CoLink/ReadKeys',
                request_serializer=colink__pb2.ReadKeysRequest.SerializeToString,
                response_deserializer=colink__pb2.StorageEntries.FromString,
                )
        self.CreateTask = channel.unary_unary(
                '/colink.CoLink/CreateTask',
                request_serializer=colink__pb2.Task.SerializeToString,
                response_deserializer=colink__pb2.Task.FromString,
                )
        self.ConfirmTask = channel.unary_unary(
                '/colink.CoLink/ConfirmTask',
                request_serializer=colink__pb2.ConfirmTaskRequest.SerializeToString,
                response_deserializer=colink__pb2.Empty.FromString,
                )
        self.FinishTask = channel.unary_unary(
                '/colink.CoLink/FinishTask',
                request_serializer=colink__pb2.Task.SerializeToString,
                response_deserializer=colink__pb2.Empty.FromString,
                )
        self.RequestInfo = channel.unary_unary(
                '/colink.CoLink/RequestInfo',
                request_serializer=colink__pb2.Empty.SerializeToString,
                response_deserializer=colink__pb2.RequestInfoResponse.FromString,
                )
        self.Subscribe = channel.unary_unary(
                '/colink.CoLink/Subscribe',
                request_serializer=colink__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=colink__pb2.MQQueueName.FromString,
                )
        self.Unsubscribe = channel.unary_unary(
                '/colink.CoLink/Unsubscribe',
                request_serializer=colink__pb2.MQQueueName.SerializeToString,
                response_deserializer=colink__pb2.Empty.FromString,
                )
        self.StartProtocolOperator = channel.unary_unary(
                '/colink.CoLink/StartProtocolOperator',
                request_serializer=colink__pb2.StartProtocolOperatorRequest.SerializeToString,
                response_deserializer=colink__pb2.ProtocolOperatorInstanceId.FromString,
                )
        self.StopProtocolOperator = channel.unary_unary(
                '/colink.CoLink/StopProtocolOperator',
                request_serializer=colink__pb2.ProtocolOperatorInstanceId.SerializeToString,
                response_deserializer=colink__pb2.Empty.FromString,
                )
        self.InterCoreSyncTask = channel.unary_unary(
                '/colink.CoLink/InterCoreSyncTask',
                request_serializer=colink__pb2.Task.SerializeToString,
                response_deserializer=colink__pb2.Empty.FromString,
                )
        self.InterCoreSyncTaskWithReverseConnection = channel.unary_stream(
                '/colink.CoLink/InterCoreSyncTaskWithReverseConnection',
                request_serializer=colink__pb2.Task.SerializeToString,
                response_deserializer=colink__pb2.Task.FromString,
                )


class CoLinkServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GenerateToken(self, request, context):
        """Given a valid JWT or valid signature and an expiration timestamp, generates a new JWT with the expiration time set to the input timestamp.
        Requires user jwt or user consent with signature.
        You cannot refresh a host JWT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImportUser(self, request, context):
        """Generates a JWT from a user with a public/secret key pair.
        The generated JWT specifies the user's privilege as a user, contains their user_id, which is a base64 encoding of the provided public key.
        Requires host JWT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateEntry(self, request, context):
        """Creates an entry in CoLink storage.
        In the entry passed in to the call, the `key_name` field must be nonempty. Every other field is is ignored.
        Requires user or host JWT.
        Returns a key_path with current timestamp included.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadEntries(self, request, context):
        """Retrieves entries from CoLink storage.
        One and only one field among `key_name` and `key_path` is nonempty. If both are nonempty, an error is returned.
        If key_name is nonempty, returns the latest version of the entry with that key name.
        This is done by first obtaining the timestamp representing the latest version of the entry,
        and then retrieving the entry with that timestamp by including the timestamp in key_path.
        If key_path is nonempty, returns the entry with the corresponding key path.
        If you're looking for a specific version of an entry, use specify the timestamp inside the `key_path` field.
        In both cases, the key_name field is empty in the returned StorageEntry. key_path and payload are nonempty.
        If an entry is not found. An error is returned.
        Note that the returned order of the entries is NOT guaranteed to be the same as the order of the input.
        Requires user or host JWT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEntry(self, request, context):
        """Updates an entry in CoLink storage.
        In the entry passed in to the call, the `key_name` field must be nonempty. Every other field is is ignored.
        Creates a new entry with the current timestamp in the key_path field.
        Sets the latest entry to current timestamp.
        Requires user or host JWT.
        Returns a key_path with current timestamp included.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteEntry(self, request, context):
        """Deletes an entry from CoLink storage.
        Sets the latest entry to current timestamp, but unlike UpdateEntry, we do not create a new entry with the current
        timestamp in the key_path field. Therefore the current timestamp points to nothing.
        Requires user or host JWT.
        Returns a key_path with current timestamp included.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadKeys(self, request, context):
        """Returns list of entries in CoLink storage whose key_path starts with input prefix.
        Requires user or host JWT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateTask(self, request, context):
        """An initiator creates a task.
        Generate a task_id for this task.
        Represent user(initiator) to sign a decision for this task.
        Sync this task with other participants.
        Update task status in storage.
        In request, protocol_name, protocol_param, participants are required. parent_task is optional.
        In response, only task_id is included.
        Require user JWT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfirmTask(self, request, context):
        """A participant confirms a task.
        Represent user to sign a decision for this task.
        Sync the decision to the initiator.
        Update task status in storage.
        The task is ignored if is_approved and is_rejected are both false in the decision.
        In request, task_id is required.
        Require user JWT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FinishTask(self, request, context):
        """A participant finishes a task.
        Update task status in storage.
        In request, task_id is required.
        Require user JWT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestInfo(self, request, context):
        """Request the information of the core, including the URI of MQ, and the public key of the core.
        Return MQ Information optionally and core public key for this user.
        Also return the IP address of the requestor.
        JWT is optional: when the request includes jwt, the uri of mq is returned.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Subscribe to changes in the storage.
        It lets you subscribe to all changes of key_name in storage since start_timestamp.
        The subscription message is formatted in SubscriptionMessage.
        Require user JWT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unsubscribe(self, request, context):
        """Unsubscribe the changes in the storage.
        Require user JWT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartProtocolOperator(self, request, context):
        """Start a protocol operator.
        It returns a unique instance_id for the newly started operator.
        In request, protocol_name and user_id are required.
        In response, instance_id is included.
        Require user or host JWT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopProtocolOperator(self, request, context):
        """Stop a protocol operator.
        In request, instance_id is required.
        Require user or host JWT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InterCoreSyncTask(self, request, context):
        """InterCore RPC.
        Sync a task.
        If it receives a task with unknown task_id, then create this task in storage and send task status to MQ.
        Otherwise, update decisions in storage.
        If all participants' decisions are received and it is the initiator, sync the decisions to other participants.
        If all participants' decisions are received, send task status to MQ.
        The task status in the request should be ignored even if it exists.
        Require guest or user JWT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InterCoreSyncTaskWithReverseConnection(self, request, context):
        """InterCore RPC.
        Same as InterCoreSyncTask and create a reverse connection.
        When A uses this RPC to sync a task with B, it creates a reverse connection from B to A.
        When B uses that reverse connection to sync tasks with A, B would not need to use a JWT, and A automatically assumes that B has guest privilege.
        Require guest or user JWT.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoLinkServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateToken': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateToken,
                    request_deserializer=colink__pb2.GenerateTokenRequest.FromString,
                    response_serializer=colink__pb2.Jwt.SerializeToString,
            ),
            'ImportUser': grpc.unary_unary_rpc_method_handler(
                    servicer.ImportUser,
                    request_deserializer=colink__pb2.UserConsent.FromString,
                    response_serializer=colink__pb2.Jwt.SerializeToString,
            ),
            'CreateEntry': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateEntry,
                    request_deserializer=colink__pb2.StorageEntry.FromString,
                    response_serializer=colink__pb2.StorageEntry.SerializeToString,
            ),
            'ReadEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadEntries,
                    request_deserializer=colink__pb2.StorageEntries.FromString,
                    response_serializer=colink__pb2.StorageEntries.SerializeToString,
            ),
            'UpdateEntry': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEntry,
                    request_deserializer=colink__pb2.StorageEntry.FromString,
                    response_serializer=colink__pb2.StorageEntry.SerializeToString,
            ),
            'DeleteEntry': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteEntry,
                    request_deserializer=colink__pb2.StorageEntry.FromString,
                    response_serializer=colink__pb2.StorageEntry.SerializeToString,
            ),
            'ReadKeys': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadKeys,
                    request_deserializer=colink__pb2.ReadKeysRequest.FromString,
                    response_serializer=colink__pb2.StorageEntries.SerializeToString,
            ),
            'CreateTask': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTask,
                    request_deserializer=colink__pb2.Task.FromString,
                    response_serializer=colink__pb2.Task.SerializeToString,
            ),
            'ConfirmTask': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfirmTask,
                    request_deserializer=colink__pb2.ConfirmTaskRequest.FromString,
                    response_serializer=colink__pb2.Empty.SerializeToString,
            ),
            'FinishTask': grpc.unary_unary_rpc_method_handler(
                    servicer.FinishTask,
                    request_deserializer=colink__pb2.Task.FromString,
                    response_serializer=colink__pb2.Empty.SerializeToString,
            ),
            'RequestInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestInfo,
                    request_deserializer=colink__pb2.Empty.FromString,
                    response_serializer=colink__pb2.RequestInfoResponse.SerializeToString,
            ),
            'Subscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=colink__pb2.SubscribeRequest.FromString,
                    response_serializer=colink__pb2.MQQueueName.SerializeToString,
            ),
            'Unsubscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Unsubscribe,
                    request_deserializer=colink__pb2.MQQueueName.FromString,
                    response_serializer=colink__pb2.Empty.SerializeToString,
            ),
            'StartProtocolOperator': grpc.unary_unary_rpc_method_handler(
                    servicer.StartProtocolOperator,
                    request_deserializer=colink__pb2.StartProtocolOperatorRequest.FromString,
                    response_serializer=colink__pb2.ProtocolOperatorInstanceId.SerializeToString,
            ),
            'StopProtocolOperator': grpc.unary_unary_rpc_method_handler(
                    servicer.StopProtocolOperator,
                    request_deserializer=colink__pb2.ProtocolOperatorInstanceId.FromString,
                    response_serializer=colink__pb2.Empty.SerializeToString,
            ),
            'InterCoreSyncTask': grpc.unary_unary_rpc_method_handler(
                    servicer.InterCoreSyncTask,
                    request_deserializer=colink__pb2.Task.FromString,
                    response_serializer=colink__pb2.Empty.SerializeToString,
            ),
            'InterCoreSyncTaskWithReverseConnection': grpc.unary_stream_rpc_method_handler(
                    servicer.InterCoreSyncTaskWithReverseConnection,
                    request_deserializer=colink__pb2.Task.FromString,
                    response_serializer=colink__pb2.Task.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'colink.CoLink', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CoLink(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GenerateToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/colink.CoLink/GenerateToken',
            colink__pb2.GenerateTokenRequest.SerializeToString,
            colink__pb2.Jwt.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImportUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/colink.CoLink/ImportUser',
            colink__pb2.UserConsent.SerializeToString,
            colink__pb2.Jwt.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateEntry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/colink.CoLink/CreateEntry',
            colink__pb2.StorageEntry.SerializeToString,
            colink__pb2.StorageEntry.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/colink.CoLink/ReadEntries',
            colink__pb2.StorageEntries.SerializeToString,
            colink__pb2.StorageEntries.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateEntry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/colink.CoLink/UpdateEntry',
            colink__pb2.StorageEntry.SerializeToString,
            colink__pb2.StorageEntry.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteEntry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/colink.CoLink/DeleteEntry',
            colink__pb2.StorageEntry.SerializeToString,
            colink__pb2.StorageEntry.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadKeys(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/colink.CoLink/ReadKeys',
            colink__pb2.ReadKeysRequest.SerializeToString,
            colink__pb2.StorageEntries.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/colink.CoLink/CreateTask',
            colink__pb2.Task.SerializeToString,
            colink__pb2.Task.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfirmTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/colink.CoLink/ConfirmTask',
            colink__pb2.ConfirmTaskRequest.SerializeToString,
            colink__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FinishTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/colink.CoLink/FinishTask',
            colink__pb2.Task.SerializeToString,
            colink__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RequestInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/colink.CoLink/RequestInfo',
            colink__pb2.Empty.SerializeToString,
            colink__pb2.RequestInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/colink.CoLink/Subscribe',
            colink__pb2.SubscribeRequest.SerializeToString,
            colink__pb2.MQQueueName.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unsubscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/colink.CoLink/Unsubscribe',
            colink__pb2.MQQueueName.SerializeToString,
            colink__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartProtocolOperator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/colink.CoLink/StartProtocolOperator',
            colink__pb2.StartProtocolOperatorRequest.SerializeToString,
            colink__pb2.ProtocolOperatorInstanceId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopProtocolOperator(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/colink.CoLink/StopProtocolOperator',
            colink__pb2.ProtocolOperatorInstanceId.SerializeToString,
            colink__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InterCoreSyncTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/colink.CoLink/InterCoreSyncTask',
            colink__pb2.Task.SerializeToString,
            colink__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InterCoreSyncTaskWithReverseConnection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/colink.CoLink/InterCoreSyncTaskWithReverseConnection',
            colink__pb2.Task.SerializeToString,
            colink__pb2.Task.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
