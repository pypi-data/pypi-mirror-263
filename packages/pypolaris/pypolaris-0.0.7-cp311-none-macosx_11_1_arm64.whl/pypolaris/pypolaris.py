# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.1.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _pypolaris
else:
    import _pypolaris

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pypolaris.delete_SwigPyIterator

    def value(self):
        return _pypolaris.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pypolaris.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pypolaris.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pypolaris.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pypolaris.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pypolaris.SwigPyIterator_copy(self)

    def next(self):
        return _pypolaris.SwigPyIterator_next(self)

    def __next__(self):
        return _pypolaris.SwigPyIterator___next__(self)

    def previous(self):
        return _pypolaris.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pypolaris.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pypolaris.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pypolaris.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pypolaris.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pypolaris.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pypolaris.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pypolaris.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _pypolaris:
_pypolaris.SwigPyIterator_swigregister(SwigPyIterator)
class ios_base(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _pypolaris.ios_base_erase_event
    imbue_event = _pypolaris.ios_base_imbue_event
    copyfmt_event = _pypolaris.ios_base_copyfmt_event

    def register_callback(self, __fn, __index):
        return _pypolaris.ios_base_register_callback(self, __fn, __index)

    def flags(self, *args):
        return _pypolaris.ios_base_flags(self, *args)

    def setf(self, *args):
        return _pypolaris.ios_base_setf(self, *args)

    def unsetf(self, __mask):
        return _pypolaris.ios_base_unsetf(self, __mask)

    def precision(self, *args):
        return _pypolaris.ios_base_precision(self, *args)

    def width(self, *args):
        return _pypolaris.ios_base_width(self, *args)

    @staticmethod
    def sync_with_stdio(__sync=True):
        return _pypolaris.ios_base_sync_with_stdio(__sync)

    def imbue(self, __loc):
        return _pypolaris.ios_base_imbue(self, __loc)

    def getloc(self):
        return _pypolaris.ios_base_getloc(self)

    @staticmethod
    def xalloc():
        return _pypolaris.ios_base_xalloc()

    def iword(self, __ix):
        return _pypolaris.ios_base_iword(self, __ix)

    def pword(self, __ix):
        return _pypolaris.ios_base_pword(self, __ix)
    __swig_destroy__ = _pypolaris.delete_ios_base

# Register ios_base in _pypolaris:
_pypolaris.ios_base_swigregister(ios_base)
cvar = _pypolaris.cvar
ios_base.boolalpha = _pypolaris.cvar.ios_base_boolalpha
ios_base.dec = _pypolaris.cvar.ios_base_dec
ios_base.fixed = _pypolaris.cvar.ios_base_fixed
ios_base.hex = _pypolaris.cvar.ios_base_hex
ios_base.internal = _pypolaris.cvar.ios_base_internal
ios_base.left = _pypolaris.cvar.ios_base_left
ios_base.oct = _pypolaris.cvar.ios_base_oct
ios_base.right = _pypolaris.cvar.ios_base_right
ios_base.scientific = _pypolaris.cvar.ios_base_scientific
ios_base.showbase = _pypolaris.cvar.ios_base_showbase
ios_base.showpoint = _pypolaris.cvar.ios_base_showpoint
ios_base.showpos = _pypolaris.cvar.ios_base_showpos
ios_base.skipws = _pypolaris.cvar.ios_base_skipws
ios_base.unitbuf = _pypolaris.cvar.ios_base_unitbuf
ios_base.uppercase = _pypolaris.cvar.ios_base_uppercase
ios_base.adjustfield = _pypolaris.cvar.ios_base_adjustfield
ios_base.basefield = _pypolaris.cvar.ios_base_basefield
ios_base.floatfield = _pypolaris.cvar.ios_base_floatfield
ios_base.badbit = _pypolaris.cvar.ios_base_badbit
ios_base.eofbit = _pypolaris.cvar.ios_base_eofbit
ios_base.failbit = _pypolaris.cvar.ios_base_failbit
ios_base.goodbit = _pypolaris.cvar.ios_base_goodbit
ios_base.app = _pypolaris.cvar.ios_base_app
ios_base.ate = _pypolaris.cvar.ios_base_ate
ios_base.binary = _pypolaris.cvar.ios_base_binary
ios_base.ios_base_in = _pypolaris.cvar.ios_base_ios_base_in
ios_base.out = _pypolaris.cvar.ios_base_out
ios_base.trunc = _pypolaris.cvar.ios_base_trunc
ios_base.beg = _pypolaris.cvar.ios_base_beg
ios_base.cur = _pypolaris.cvar.ios_base_cur
ios_base.end = _pypolaris.cvar.ios_base_end

class ios(ios_base):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def rdstate(self):
        return _pypolaris.ios_rdstate(self)

    def clear(self, *args):
        return _pypolaris.ios_clear(self, *args)

    def setstate(self, __state):
        return _pypolaris.ios_setstate(self, __state)

    def good(self):
        return _pypolaris.ios_good(self)

    def eof(self):
        return _pypolaris.ios_eof(self)

    def fail(self):
        return _pypolaris.ios_fail(self)

    def bad(self):
        return _pypolaris.ios_bad(self)

    def exceptions(self, *args):
        return _pypolaris.ios_exceptions(self, *args)

    def __init__(self, __sb):
        _pypolaris.ios_swiginit(self, _pypolaris.new_ios(__sb))
    __swig_destroy__ = _pypolaris.delete_ios

    def tie(self, *args):
        return _pypolaris.ios_tie(self, *args)

    def rdbuf(self, *args):
        return _pypolaris.ios_rdbuf(self, *args)

    def copyfmt(self, __rhs):
        return _pypolaris.ios_copyfmt(self, __rhs)

    def fill(self, *args):
        return _pypolaris.ios_fill(self, *args)

    def imbue(self, __loc):
        return _pypolaris.ios_imbue(self, __loc)

    def narrow(self, __c, __dfault):
        return _pypolaris.ios_narrow(self, __c, __dfault)

    def widen(self, __c):
        return _pypolaris.ios_widen(self, __c)

# Register ios in _pypolaris:
_pypolaris.ios_swigregister(ios)
class string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def length(self):
        return _pypolaris.string_length(self)

    def max_size(self):
        return _pypolaris.string_max_size(self)

    def capacity(self):
        return _pypolaris.string_capacity(self)

    def reserve(self, __res_arg):
        return _pypolaris.string_reserve(self, __res_arg)

    def shrink_to_fit(self):
        return _pypolaris.string_shrink_to_fit(self)

    def copy(self, __s, __n, __pos=0):
        return _pypolaris.string_copy(self, __s, __n, __pos)

    def c_str(self):
        return _pypolaris.string_c_str(self)

    def find(self, *args):
        return _pypolaris.string_find(self, *args)

    def rfind(self, *args):
        return _pypolaris.string_rfind(self, *args)

    def find_first_of(self, *args):
        return _pypolaris.string_find_first_of(self, *args)

    def find_last_of(self, *args):
        return _pypolaris.string_find_last_of(self, *args)

    def find_first_not_of(self, *args):
        return _pypolaris.string_find_first_not_of(self, *args)

    def find_last_not_of(self, *args):
        return _pypolaris.string_find_last_not_of(self, *args)

    def substr(self, *args):
        return _pypolaris.string_substr(self, *args)

    def empty(self):
        return _pypolaris.string_empty(self)

    def size(self):
        return _pypolaris.string_size(self)

    def swap(self, v):
        return _pypolaris.string_swap(self, v)

    def begin(self):
        return _pypolaris.string_begin(self)

    def end(self):
        return _pypolaris.string_end(self)

    def rbegin(self):
        return _pypolaris.string_rbegin(self)

    def rend(self):
        return _pypolaris.string_rend(self)

    def get_allocator(self):
        return _pypolaris.string_get_allocator(self)

    def erase(self, *args):
        return _pypolaris.string_erase(self, *args)

    def __init__(self, *args):
        _pypolaris.string_swiginit(self, _pypolaris.new_string(*args))

    def assign(self, *args):
        return _pypolaris.string_assign(self, *args)

    def resize(self, *args):
        return _pypolaris.string_resize(self, *args)

    def iterator(self):
        return _pypolaris.string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pypolaris.string___nonzero__(self)

    def __bool__(self):
        return _pypolaris.string___bool__(self)

    def __len__(self):
        return _pypolaris.string___len__(self)

    def __getslice__(self, i, j):
        return _pypolaris.string___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pypolaris.string___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pypolaris.string___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pypolaris.string___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pypolaris.string___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pypolaris.string___setitem__(self, *args)

    def insert(self, *args):
        return _pypolaris.string_insert(self, *args)

    def replace(self, *args):
        return _pypolaris.string_replace(self, *args)

    def __iadd__(self, v):
        return _pypolaris.string___iadd__(self, v)

    def __add__(self, v):
        return _pypolaris.string___add__(self, v)

    def __radd__(self, v):
        return _pypolaris.string___radd__(self, v)

    def __str__(self):
        return _pypolaris.string___str__(self)

    def __rlshift__(self, out):
        return _pypolaris.string___rlshift__(self, out)

    def __eq__(self, v):
        return _pypolaris.string___eq__(self, v)

    def __ne__(self, v):
        return _pypolaris.string___ne__(self, v)

    def __gt__(self, v):
        return _pypolaris.string___gt__(self, v)

    def __lt__(self, v):
        return _pypolaris.string___lt__(self, v)

    def __ge__(self, v):
        return _pypolaris.string___ge__(self, v)

    def __le__(self, v):
        return _pypolaris.string___le__(self, v)
    __swig_destroy__ = _pypolaris.delete_string

# Register string in _pypolaris:
_pypolaris.string_swigregister(string)
string.npos = _pypolaris.cvar.string_npos

class ostream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _pypolaris.ostream_swiginit(self, _pypolaris.new_ostream(__sb))
    __swig_destroy__ = _pypolaris.delete_ostream

    def __lshift__(self, *args):
        return _pypolaris.ostream___lshift__(self, *args)

    def put(self, __c):
        return _pypolaris.ostream_put(self, __c)

    def write(self, __s, __n):
        return _pypolaris.ostream_write(self, __s, __n)

    def flush(self):
        return _pypolaris.ostream_flush(self)

    def tellp(self):
        return _pypolaris.ostream_tellp(self)

    def seekp(self, *args):
        return _pypolaris.ostream_seekp(self, *args)

# Register ostream in _pypolaris:
_pypolaris.ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _pypolaris.istream_swiginit(self, _pypolaris.new_istream(__sb))
    __swig_destroy__ = _pypolaris.delete_istream

    def __rshift__(self, *args):
        return _pypolaris.istream___rshift__(self, *args)

    def gcount(self):
        return _pypolaris.istream_gcount(self)

    def get(self, *args):
        return _pypolaris.istream_get(self, *args)

    def getline(self, *args):
        return _pypolaris.istream_getline(self, *args)

    def ignore(self, *args):
        return _pypolaris.istream_ignore(self, *args)

    def peek(self):
        return _pypolaris.istream_peek(self)

    def read(self, __s, __n):
        return _pypolaris.istream_read(self, __s, __n)

    def readsome(self, __s, __n):
        return _pypolaris.istream_readsome(self, __s, __n)

    def putback(self, __c):
        return _pypolaris.istream_putback(self, __c)

    def unget(self):
        return _pypolaris.istream_unget(self)

    def sync(self):
        return _pypolaris.istream_sync(self)

    def tellg(self):
        return _pypolaris.istream_tellg(self)

    def seekg(self, *args):
        return _pypolaris.istream_seekg(self, *args)

# Register istream in _pypolaris:
_pypolaris.istream_swigregister(istream)
class iostream(istream, ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, __sb):
        _pypolaris.iostream_swiginit(self, _pypolaris.new_iostream(__sb))
    __swig_destroy__ = _pypolaris.delete_iostream

# Register iostream in _pypolaris:
_pypolaris.iostream_swigregister(iostream)

def endl(value):
    return _pypolaris.endl(value)

def ends(value):
    return _pypolaris.ends(value)

def flush(value):
    return _pypolaris.flush(value)
class streambuf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pypolaris.delete_streambuf

    def pubimbue(self, __loc):
        return _pypolaris.streambuf_pubimbue(self, __loc)

    def getloc(self):
        return _pypolaris.streambuf_getloc(self)

    def pubsetbuf(self, __s, __n):
        return _pypolaris.streambuf_pubsetbuf(self, __s, __n)

    def pubseekoff(self, *args):
        return _pypolaris.streambuf_pubseekoff(self, *args)

    def pubseekpos(self, *args):
        return _pypolaris.streambuf_pubseekpos(self, *args)

    def pubsync(self):
        return _pypolaris.streambuf_pubsync(self)

    def in_avail(self):
        return _pypolaris.streambuf_in_avail(self)

    def snextc(self):
        return _pypolaris.streambuf_snextc(self)

    def sbumpc(self):
        return _pypolaris.streambuf_sbumpc(self)

    def sgetc(self):
        return _pypolaris.streambuf_sgetc(self)

    def sgetn(self, __s, __n):
        return _pypolaris.streambuf_sgetn(self, __s, __n)

    def sputbackc(self, __c):
        return _pypolaris.streambuf_sputbackc(self, __c)

    def sungetc(self):
        return _pypolaris.streambuf_sungetc(self)

    def sputc(self, __c):
        return _pypolaris.streambuf_sputc(self, __c)

    def sputn(self, __s, __n):
        return _pypolaris.streambuf_sputn(self, __s, __n)

# Register streambuf in _pypolaris:
_pypolaris.streambuf_swigregister(streambuf)
class istringstream(istream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pypolaris.istringstream_swiginit(self, _pypolaris.new_istringstream(*args))
    __swig_destroy__ = _pypolaris.delete_istringstream

    def rdbuf(self):
        return _pypolaris.istringstream_rdbuf(self)

    def str(self, *args):
        return _pypolaris.istringstream_str(self, *args)

# Register istringstream in _pypolaris:
_pypolaris.istringstream_swigregister(istringstream)
class ostringstream(ostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pypolaris.ostringstream_swiginit(self, _pypolaris.new_ostringstream(*args))
    __swig_destroy__ = _pypolaris.delete_ostringstream

    def rdbuf(self):
        return _pypolaris.ostringstream_rdbuf(self)

    def str(self):
        return _pypolaris.ostringstream_str(self)

# Register ostringstream in _pypolaris:
_pypolaris.ostringstream_swigregister(ostringstream)
class stringstream(iostream):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _pypolaris.stringstream_swiginit(self, _pypolaris.new_stringstream(*args))
    __swig_destroy__ = _pypolaris.delete_stringstream

    def rdbuf(self):
        return _pypolaris.stringstream_rdbuf(self)

    def str(self, *args):
        return _pypolaris.stringstream_str(self, *args)

# Register stringstream in _pypolaris:
_pypolaris.stringstream_swigregister(stringstream)
class pypolaris(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    probe = property(_pypolaris.pypolaris_probe_get, _pypolaris.pypolaris_probe_set)
    ref = property(_pypolaris.pypolaris_ref_get, _pypolaris.pypolaris_ref_set)
    obj = property(_pypolaris.pypolaris_obj_get, _pypolaris.pypolaris_obj_set)
    probeID = property(_pypolaris.pypolaris_probeID_get, _pypolaris.pypolaris_probeID_set)
    refID = property(_pypolaris.pypolaris_refID_get, _pypolaris.pypolaris_refID_set)
    objID = property(_pypolaris.pypolaris_objID_get, _pypolaris.pypolaris_objID_set)

    def Initialize(self, COMport, PROBE_NAME, REF_NAME, OBJ_NAME):
        return _pypolaris.pypolaris_Initialize(self, COMport, PROBE_NAME, REF_NAME, OBJ_NAME)

    def Run(self):
        return _pypolaris.pypolaris_Run(self)

    def Close(self):
        return _pypolaris.pypolaris_Close(self)

    def __init__(self):
        _pypolaris.pypolaris_swiginit(self, _pypolaris.new_pypolaris())
    __swig_destroy__ = _pypolaris.delete_pypolaris

# Register pypolaris in _pypolaris:
_pypolaris.pypolaris_swigregister(pypolaris)

def new_intp():
    return _pypolaris.new_intp()

def copy_intp(value):
    return _pypolaris.copy_intp(value)

def delete_intp(obj):
    return _pypolaris.delete_intp(obj)

def intp_assign(obj, value):
    return _pypolaris.intp_assign(obj, value)

def intp_value(obj):
    return _pypolaris.intp_value(obj)

def new_floatp():
    return _pypolaris.new_floatp()

def copy_floatp(value):
    return _pypolaris.copy_floatp(value)

def delete_floatp(obj):
    return _pypolaris.delete_floatp(obj)

def floatp_assign(obj, value):
    return _pypolaris.floatp_assign(obj, value)

def floatp_value(obj):
    return _pypolaris.floatp_value(obj)

def new_doublep():
    return _pypolaris.new_doublep()

def copy_doublep(value):
    return _pypolaris.copy_doublep(value)

def delete_doublep(obj):
    return _pypolaris.delete_doublep(obj)

def doublep_assign(obj, value):
    return _pypolaris.doublep_assign(obj, value)

def doublep_value(obj):
    return _pypolaris.doublep_value(obj)

def new_boolp():
    return _pypolaris.new_boolp()

def copy_boolp(value):
    return _pypolaris.copy_boolp(value)

def delete_boolp(obj):
    return _pypolaris.delete_boolp(obj)

def boolp_assign(obj, value):
    return _pypolaris.boolp_assign(obj, value)

def boolp_value(obj):
    return _pypolaris.boolp_value(obj)

