import os
from typing import Callable

import numpy as np
import pytest
from quart.typing import TestClientProtocol

from infernet_ml.utils.model_loader import ModelSource
from services.torch_inference_service import create_app

hf_args = {
    "model_source": ModelSource.HUGGINGFACE_HUB,
    "model_args": {
        "repo_id": "Ritual-Net/summarizer_models",
        "filename": "model.torch",
    },
}

arweave_args = {
    "model_source": ModelSource.ARWEAVE,
    "model_args": {
        "repo_id": "Ritual-Net/summarizer_models",
        "filename": "model.torch",
        "owners": [os.environ.get("MODEL_OWNER")],
    },
}


@pytest.fixture()
def client_factory() -> Callable[[dict[str, str]], TestClientProtocol]:
    def _client(workflow_kwargs: dict[str, str]) -> TestClientProtocol:
        app = create_app(
            {
                "WORKFLOW_CLASS": "infernet_ml.workflows.inference.torch_inference_workflow.TorchInferenceWorkflow",  # noqa: E501
                # noqa: E501
                "WORKFLOW_POSITIONAL_ARGS": [],
                "WORKFLOW_KW_ARGS": workflow_kwargs,
                "TESTING": True,
            }
        )
        return app.test_client()

    return _client


@pytest.mark.asyncio
@pytest.mark.parametrize("workflow_kwargs", [hf_args, arweave_args])
async def test_inference(client_factory, workflow_kwargs):  # type: ignore
    client = client_factory(workflow_kwargs)

    res = await client.post(
        "/service_output",
        json={
            "source": 1,
            "data": {"values": [np.random.random(69).tolist()], "dtype": "double"},
        },
    )
    assert res.status_code == 200, res.text

    # Test on chain input
    res = await client.post(
        "/service_output",
        json={
            "source": 0,
            "data": "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000450000000000000000000000000000000000000000000000000db6b01c0bc0f5a80000000000000000000000000000000000000000000000000651aa74e3471c6000000000000000000000000000000000000000000000000004071c92b4cc419c000000000000000000000000000000000000000000000000066a08512da8d4b80000000000000000000000000000000000000000000000000255593e74f02a400000000000000000000000000000000000000000000000000b5f6fc3ff990b1800000000000000000000000000000000000000000000000004c6f2967b63ea280000000000000000000000000000000000000000000000000b0090481ae8ff00000000000000000000000000000000000000000000000000084787af40910c3c00000000000000000000000000000000000000000000000004e307a9f64806360000000000000000000000000000000000000000000000000ddcfddbe9df42d00000000000000000000000000000000000000000000000000cb3a3bcb21720280000000000000000000000000000000000000000000000000bd8f24e2cef346c000000000000000000000000000000000000000000000000063a78e1c6d81ab0000000000000000000000000000000000000000000000000074b585802a84abc00000000000000000000000000000000000000000000000001a492f1e765286a00000000000000000000000000000000000000000000000008c527d3e295696400000000000000000000000000000000000000000000000007d927ebf6ee9bbc0000000000000000000000000000000000000000000000000b9e9103a74657b80000000000000000000000000000000000000000000000000c7018813299c8b40000000000000000000000000000000000000000000000000da2204470d8c118000000000000000000000000000000000000000000000000074fe9c50b7f08080000000000000000000000000000000000000000000000000b128862735f1c18000000000000000000000000000000000000000000000000040c21f8955852180000000000000000000000000000000000000000000000000ada0a6619085e80000000000000000000000000000000000000000000000000073fe491cd158c600000000000000000000000000000000000000000000000000bcfe86b95336afc0000000000000000000000000000000000000000000000000098ff19e505f30100000000000000000000000000000000000000000000000002738ae6d23e9b9400000000000000000000000000000000000000000000000007cb847616d5d16000000000000000000000000000000000000000000000000001876c02c2b2462a00000000000000000000000000000000000000000000000003806c1bb18055ae000000000000000000000000000000000000000000000000040ea52a3dbfc1b40000000000000000000000000000000000000000000000000ce8ca0b34d322880000000000000000000000000000000000000000000000000d72feb0f6a19ac00000000000000000000000000000000000000000000000000bc0ff589dd6c1c800000000000000000000000000000000000000000000000000cf3d892c9e9b300000000000000000000000000000000000000000000000000b2ecc8327759cb000000000000000000000000000000000000000000000000005e3d269b275cb8c0000000000000000000000000000000000000000000000000c433577c86a8ec40000000000000000000000000000000000000000000000000ba370f32162cd64000000000000000000000000000000000000000000000000086b8c5f10df73ec0000000000000000000000000000000000000000000000000dcf687430f4fc240000000000000000000000000000000000000000000000000236f7ca5a9fe78c0000000000000000000000000000000000000000000000000d7f61bec597472c0000000000000000000000000000000000000000000000000659bcd0363f41e80000000000000000000000000000000000000000000000000ce9c8cfa4ec56d400000000000000000000000000000000000000000000000002fb85316cddc80600000000000000000000000000000000000000000000000000e3ba13c21dfc760000000000000000000000000000000000000000000000000573a32eb48957fc0000000000000000000000000000000000000000000000000a365e13f9aa37a400000000000000000000000000000000000000000000000009b42cc838dc0a4c00000000000000000000000000000000000000000000000000a248858d22fd0000000000000000000000000000000000000000000000000001e0b9ac0caa163600000000000000000000000000000000000000000000000004582c7115754c20000000000000000000000000000000000000000000000000058bad247d2cb91c00000000000000000000000000000000000000000000000000c02a23a60c1e3f0000000000000000000000000000000000000000000000000371f1a2964b2d4c00000000000000000000000000000000000000000000000000126432b500754300000000000000000000000000000000000000000000000001843dc5f09451500000000000000000000000000000000000000000000000000db2195a416ca59c00000000000000000000000000000000000000000000000003b97ccfab7b4e6800000000000000000000000000000000000000000000000002ccd426372c56400000000000000000000000000000000000000000000000000b75c7f58441e39000000000000000000000000000000000000000000000000008e36bc0c0fb20ec0000000000000000000000000000000000000000000000000cc3a20e75018e840000000000000000000000000000000000000000000000000b248f5d1d8d78e8000000000000000000000000000000000000000000000000086bd1e57a344b1c0000000000000000000000000000000000000000000000000767b5468e9887c8",  # noqa: E501
        },
    )
    assert res.status_code == 200, res.text
