# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class CommandMsg(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = CommandMsg()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsCommandMsg(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def CommandMsgBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x43\x4D\x44\x30", size_prefixed=size_prefixed)

    # CommandMsg
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # CommandMsg
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # CommandMsg
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CommandMsg
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint16Flags, o + self._tab.Pos)
        return 0

    # CommandMsg
    def IntVal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # CommandMsg
    def FloatVal(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CommandMsg
    def IntArr(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CommandMsg
    def IntArrAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # CommandMsg
    def IntArrLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CommandMsg
    def IntArrIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # CommandMsg
    def FloatArr(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # CommandMsg
    def FloatArrAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # CommandMsg
    def FloatArrLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # CommandMsg
    def FloatArrIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # CommandMsg
    def X(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CommandMsg
    def Y(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CommandMsg
    def Z(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # CommandMsg
    def W(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def CommandMsgStart(builder):
    builder.StartObject(11)

def CommandMsgAddName(builder, name):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)

def CommandMsgAddTimestamp(builder, timestamp):
    builder.PrependFloat32Slot(1, timestamp, 0.0)

def CommandMsgAddId(builder, id):
    builder.PrependUint16Slot(2, id, 0)

def CommandMsgAddIntVal(builder, intVal):
    builder.PrependInt32Slot(3, intVal, 0)

def CommandMsgAddFloatVal(builder, floatVal):
    builder.PrependFloat32Slot(4, floatVal, 0.0)

def CommandMsgAddIntArr(builder, intArr):
    builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(intArr), 0)

def CommandMsgStartIntArrVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def CommandMsgAddFloatArr(builder, floatArr):
    builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(floatArr), 0)

def CommandMsgStartFloatArrVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def CommandMsgAddX(builder, x):
    builder.PrependFloat32Slot(7, x, 0.0)

def CommandMsgAddY(builder, y):
    builder.PrependFloat32Slot(8, y, 0.0)

def CommandMsgAddZ(builder, z):
    builder.PrependFloat32Slot(9, z, 0.0)

def CommandMsgAddW(builder, w):
    builder.PrependFloat32Slot(10, w, 0.0)

def CommandMsgEnd(builder):
    return builder.EndObject()


try:
    from typing import List
except:
    pass

class CommandMsgT(object):

    # CommandMsgT
    def __init__(self):
        self.name = None  # type: str
        self.timestamp = 0.0  # type: float
        self.id = 0  # type: int
        self.intVal = 0  # type: int
        self.floatVal = 0.0  # type: float
        self.intArr = None  # type: List[int]
        self.floatArr = None  # type: List[float]
        self.x = 0.0  # type: float
        self.y = 0.0  # type: float
        self.z = 0.0  # type: float
        self.w = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        commandMsg = CommandMsg()
        commandMsg.Init(buf, pos)
        return cls.InitFromObj(commandMsg)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, commandMsg):
        x = CommandMsgT()
        x._UnPack(commandMsg)
        return x

    # CommandMsgT
    def _UnPack(self, commandMsg):
        if commandMsg is None:
            return
        self.name = commandMsg.Name()
        self.timestamp = commandMsg.Timestamp()
        self.id = commandMsg.Id()
        self.intVal = commandMsg.IntVal()
        self.floatVal = commandMsg.FloatVal()
        if not commandMsg.IntArrIsNone():
            if np is None:
                self.intArr = []
                for i in range(commandMsg.IntArrLength()):
                    self.intArr.append(commandMsg.IntArr(i))
            else:
                self.intArr = commandMsg.IntArrAsNumpy()
        if not commandMsg.FloatArrIsNone():
            if np is None:
                self.floatArr = []
                for i in range(commandMsg.FloatArrLength()):
                    self.floatArr.append(commandMsg.FloatArr(i))
            else:
                self.floatArr = commandMsg.FloatArrAsNumpy()
        self.x = commandMsg.X()
        self.y = commandMsg.Y()
        self.z = commandMsg.Z()
        self.w = commandMsg.W()

    # CommandMsgT
    def Pack(self, builder):
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.intArr is not None:
            if np is not None and type(self.intArr) is np.ndarray:
                intArr = builder.CreateNumpyVector(self.intArr)
            else:
                CommandMsgStartIntArrVector(builder, len(self.intArr))
                for i in reversed(range(len(self.intArr))):
                    builder.PrependInt32(self.intArr[i])
                intArr = builder.EndVector()
        if self.floatArr is not None:
            if np is not None and type(self.floatArr) is np.ndarray:
                floatArr = builder.CreateNumpyVector(self.floatArr)
            else:
                CommandMsgStartFloatArrVector(builder, len(self.floatArr))
                for i in reversed(range(len(self.floatArr))):
                    builder.PrependFloat32(self.floatArr[i])
                floatArr = builder.EndVector()
        CommandMsgStart(builder)
        if self.name is not None:
            CommandMsgAddName(builder, name)
        CommandMsgAddTimestamp(builder, self.timestamp)
        CommandMsgAddId(builder, self.id)
        CommandMsgAddIntVal(builder, self.intVal)
        CommandMsgAddFloatVal(builder, self.floatVal)
        if self.intArr is not None:
            CommandMsgAddIntArr(builder, intArr)
        if self.floatArr is not None:
            CommandMsgAddFloatArr(builder, floatArr)
        CommandMsgAddX(builder, self.x)
        CommandMsgAddY(builder, self.y)
        CommandMsgAddZ(builder, self.z)
        CommandMsgAddW(builder, self.w)
        commandMsg = CommandMsgEnd(builder)
        return commandMsg


