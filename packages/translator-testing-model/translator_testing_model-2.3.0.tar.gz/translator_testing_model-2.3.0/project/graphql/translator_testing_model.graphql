type AcceptanceTestAsset
  {
    name: String
    description: String
    inputId: Uriorcurie
    inputName: String
    inputCategory: ConceptCategory
    predicateId: PredicateType
    predicateName: String
    outputId: Uriorcurie
    outputName: String
    outputCategory: ConceptCategory
    association: AssociationCategory
    qualifiers: [Qualifier]
    expectedOutput: String
    testIssue: TestIssueEnum
    semanticSeverity: SemanticSeverityEnum
    inV1: Boolean
    wellKnown: Boolean
    testReference: Uriorcurie
    runnerSettings: [String]!
    testMetadata: TestMetadata!
    id: Uriorcurie!
    tags: [String]
    mustPassDate: Date
    mustPassEnvironment: TestEnvEnum
    scientificQuestion: String
    stringEntry: String
    direction: DirectionEnum
    answerInformalConcept: String
    expectedResult: ExpectedResultsEnum
    topLevel: Integer
    queryNode: NodeEnum
    notes: String
  }

type AcceptanceTestCase
  {
    id: Uriorcurie!
    name: String
    description: String
    testEnv: TestEnvEnum
    queryType: QueryTypeEnum
    preconditions: [Precondition]
    trapiTemplate: TrapiTemplateEnum
    components: [ComponentEnum]
    testCaseObjective: TestObjectiveEnum
    testCaseSource: TestSourceEnum
    testCasePredicateName: String
    testCasePredicateId: String
    testCaseInputId: Uriorcurie
    testCaseRunnerSettings: [String]!
    tags: [String]
    testAssets: [AcceptanceTestAsset]!
  }

type AcceptanceTestSuite
  {
    id: Uriorcurie!
    name: String
    description: String
    tags: [String]
    testMetadata: TestMetadata!
    testPersona: TestPersonaEnum
    testCases: [TestCase]
    testSuiteSpecification: TestSuiteSpecification
  }

type BenchmarkTestSuite
  {
  }

type ComplianceTestCase
  {
    id: Uriorcurie!
    name: String
    description: String
    testEnv: TestEnvEnum
    queryType: QueryTypeEnum
    testAssets: [TestAsset]!
    preconditions: [Precondition]
    trapiTemplate: TrapiTemplateEnum
    components: [ComponentEnum]
    testCaseObjective: TestObjectiveEnum
    testCaseSource: TestSourceEnum
    testCasePredicateName: String
    testCasePredicateId: String
    testCaseInputId: Uriorcurie
    testCaseRunnerSettings: [String]!
    tags: [String]
    trapiVersion: String
    biolinkVersion: String
  }

type KnowledgeGraphNavigationTestCase
  {
    id: Uriorcurie!
    name: String
    description: String
    testEnv: TestEnvEnum
    queryType: QueryTypeEnum
    testAssets: [TestAsset]!
    preconditions: [Precondition]
    trapiTemplate: TrapiTemplateEnum
    components: [ComponentEnum]
    testCaseObjective: TestObjectiveEnum
    testCaseSource: TestSourceEnum
    testCasePredicateName: String
    testCasePredicateId: String
    testCaseInputId: Uriorcurie
    testCaseRunnerSettings: [String]!
    tags: [String]
  }

type OneHopTestCase
  {
    id: Uriorcurie!
    name: String
    description: String
    testEnv: TestEnvEnum
    queryType: QueryTypeEnum
    testAssets: [TestAsset]!
    preconditions: [Precondition]
    trapiTemplate: TrapiTemplateEnum
    components: [ComponentEnum]
    testCaseObjective: TestObjectiveEnum
    testCaseSource: TestSourceEnum
    testCasePredicateName: String
    testCasePredicateId: String
    testCaseInputId: Uriorcurie
    testCaseRunnerSettings: [String]!
    tags: [String]
  }

type OneHopTestSuite
  {
    id: Uriorcurie!
    name: String
    description: String
    tags: [String]
    testMetadata: TestMetadata!
    testPersona: TestPersonaEnum
    testCases: [TestCase]
    testSuiteSpecification: TestSuiteSpecification
  }

type Precondition
  {
    id: Uriorcurie!
    name: String
    description: String
    tags: [String]
  }

type Qualifier
  {
    parameter: String
    value: String
  }

type QuantitativeTestCase
  {
    id: Uriorcurie!
    name: String
    description: String
    testEnv: TestEnvEnum
    queryType: QueryTypeEnum
    testAssets: [TestAsset]!
    preconditions: [Precondition]
    trapiTemplate: TrapiTemplateEnum
    components: [ComponentEnum]
    testCaseObjective: TestObjectiveEnum
    testCaseSource: TestSourceEnum
    testCasePredicateName: String
    testCasePredicateId: String
    testCaseInputId: Uriorcurie
    testCaseRunnerSettings: [String]!
    tags: [String]
  }

type StandardsComplianceTestSuite
  {
    id: Uriorcurie!
    name: String
    description: String
    tags: [String]
    testMetadata: TestMetadata!
    testPersona: TestPersonaEnum
    testCases: [TestCase]
    testSuiteSpecification: TestSuiteSpecification
  }

type TestAsset
  {
    name: String
    description: String
    inputId: Uriorcurie
    inputName: String
    inputCategory: ConceptCategory
    predicateId: PredicateType
    predicateName: String
    outputId: Uriorcurie
    outputName: String
    outputCategory: ConceptCategory
    association: AssociationCategory
    qualifiers: [Qualifier]
    expectedOutput: String
    testIssue: TestIssueEnum
    semanticSeverity: SemanticSeverityEnum
    inV1: Boolean
    wellKnown: Boolean
    testReference: Uriorcurie
    runnerSettings: [String]!
    testMetadata: TestMetadata!
    id: Uriorcurie!
    tags: [String]
  }

type TestCase
  {
    id: Uriorcurie!
    name: String
    description: String
    testEnv: TestEnvEnum
    queryType: QueryTypeEnum
    testAssets: [TestAsset]!
    preconditions: [Precondition]
    trapiTemplate: TrapiTemplateEnum
    components: [ComponentEnum]
    testCaseObjective: TestObjectiveEnum
    testCaseSource: TestSourceEnum
    testCasePredicateName: String
    testCasePredicateId: String
    testCaseInputId: Uriorcurie
    testCaseRunnerSettings: [String]!
    tags: [String]
  }

type TestCaseResult
  {
    id: Uriorcurie!
    name: String
    description: String
    tags: [String]
    testSuiteId: Uriorcurie
    testCase: TestCase
    testCaseResult: TestCaseResultEnum
  }

type TestEdgeData
  {
    name: String
    description: String
    inputId: Uriorcurie
    inputName: String
    inputCategory: ConceptCategory
    predicateId: PredicateType
    predicateName: String
    outputId: Uriorcurie
    outputName: String
    outputCategory: ConceptCategory
    association: AssociationCategory
    qualifiers: [Qualifier]
    expectedOutput: String
    testIssue: TestIssueEnum
    semanticSeverity: SemanticSeverityEnum
    inV1: Boolean
    wellKnown: Boolean
    testReference: Uriorcurie
    runnerSettings: [String]!
    testMetadata: TestMetadata!
    id: Uriorcurie!
    tags: [String]
  }

interface TestEntity
  {
    id: Uriorcurie!
    name: String
    description: String
    tags: [String]
  }

type TestEntityParameter
  {
    parameter: String
    value: String
  }

type TestMetadata
  {
    id: Uriorcurie!
    name: String
    description: String
    tags: [String]
    testSource: TestSourceEnum
    testReference: Uriorcurie
    testObjective: TestObjectiveEnum
    testAnnotations: [TestEntityParameter]
  }

type TestOutput
  {
    id: Uriorcurie!
    name: String
    description: String
    tags: [String]
    testCaseId: String
    pks: [TestResultPKSet]
  }

type TestResultPKSet
  {
    id: Uriorcurie!
    name: String
    description: String
    tags: [String]
    parentPk: String
    mergedPk: String
    aragorn: String
    arax: String
    unsecret: String
    bte: String
    improving: String
  }

type TestRunnerConfiguration
  {
    id: Uriorcurie!
    name: String
    description: String
    testRunParameters: [TestEntityParameter]
    tags: [String]
  }

type TestRunSession
  {
    id: Uriorcurie!
    name: String
    description: String
    tags: [String]
    testRunnerName: String
    testEntities: [TestEntity]
    testCaseResults: [TestCaseResult]
    timestamp: Datetime
  }

type TestSuite
  {
    id: Uriorcurie!
    name: String
    description: String
    tags: [String]
    testMetadata: TestMetadata!
    testPersona: TestPersonaEnum
    testCases: [TestCase]
    testSuiteSpecification: TestSuiteSpecification
  }

type TestSuiteSpecification
  {
    id: Uriorcurie!
    name: String
    description: String
    tags: [String]
    testDataFileLocator: Uriorcurie
    testDataFileFormat: FileFormatEnum
  }

