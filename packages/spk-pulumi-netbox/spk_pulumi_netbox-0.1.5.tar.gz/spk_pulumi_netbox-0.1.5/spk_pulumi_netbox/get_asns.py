# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetAsnsResult',
    'AwaitableGetAsnsResult',
    'get_asns',
    'get_asns_output',
]

@pulumi.output_type
class GetAsnsResult:
    """
    A collection of values returned by getAsns.
    """
    def __init__(__self__, asns=None, filters=None, id=None, limit=None):
        if asns and not isinstance(asns, list):
            raise TypeError("Expected argument 'asns' to be a list")
        pulumi.set(__self__, "asns", asns)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter
    def asns(self) -> Sequence['outputs.GetAsnsAsnResult']:
        return pulumi.get(self, "asns")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetAsnsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        """
        Defaults to `0`.
        """
        return pulumi.get(self, "limit")


class AwaitableGetAsnsResult(GetAsnsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAsnsResult(
            asns=self.asns,
            filters=self.filters,
            id=self.id,
            limit=self.limit)


def get_asns(filters: Optional[Sequence[pulumi.InputType['GetAsnsFilterArgs']]] = None,
             limit: Optional[int] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAsnsResult:
    """
    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_netbox as netbox

    asns = netbox.get_asns(filters=[
        netbox.GetAsnsFilterArgs(
            name="asn__gte",
            value="1000",
        ),
        netbox.GetAsnsFilterArgs(
            name="asn__lte",
            value="2000",
        ),
    ])
    ```
    <!--End PulumiCodeChooser -->


    :param int limit: Defaults to `0`.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['limit'] = limit
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('netbox:index/getAsns:getAsns', __args__, opts=opts, typ=GetAsnsResult).value

    return AwaitableGetAsnsResult(
        asns=pulumi.get(__ret__, 'asns'),
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        limit=pulumi.get(__ret__, 'limit'))


@_utilities.lift_output_func(get_asns)
def get_asns_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetAsnsFilterArgs']]]]] = None,
                    limit: Optional[pulumi.Input[Optional[int]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAsnsResult]:
    """
    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_netbox as netbox

    asns = netbox.get_asns(filters=[
        netbox.GetAsnsFilterArgs(
            name="asn__gte",
            value="1000",
        ),
        netbox.GetAsnsFilterArgs(
            name="asn__lte",
            value="2000",
        ),
    ])
    ```
    <!--End PulumiCodeChooser -->


    :param int limit: Defaults to `0`.
    """
    ...
