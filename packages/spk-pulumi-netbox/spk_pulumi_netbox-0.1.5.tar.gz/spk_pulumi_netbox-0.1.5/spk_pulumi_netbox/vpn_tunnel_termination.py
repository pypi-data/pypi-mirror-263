# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['VpnTunnelTerminationArgs', 'VpnTunnelTermination']

@pulumi.input_type
class VpnTunnelTerminationArgs:
    def __init__(__self__, *,
                 role: pulumi.Input[str],
                 tunnel_id: pulumi.Input[int],
                 device_interface_id: Optional[pulumi.Input[int]] = None,
                 outside_ip_address_id: Optional[pulumi.Input[int]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 virtual_machine_interface_id: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a VpnTunnelTermination resource.
        :param pulumi.Input[str] role: Valid values are `peer`, `hub` and `spoke`.
        :param pulumi.Input[int] device_interface_id: Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.
        :param pulumi.Input[int] virtual_machine_interface_id: Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "tunnel_id", tunnel_id)
        if device_interface_id is not None:
            pulumi.set(__self__, "device_interface_id", device_interface_id)
        if outside_ip_address_id is not None:
            pulumi.set(__self__, "outside_ip_address_id", outside_ip_address_id)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if virtual_machine_interface_id is not None:
            pulumi.set(__self__, "virtual_machine_interface_id", virtual_machine_interface_id)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        Valid values are `peer`, `hub` and `spoke`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="tunnelId")
    def tunnel_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_id")

    @tunnel_id.setter
    def tunnel_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_id", value)

    @property
    @pulumi.getter(name="deviceInterfaceId")
    def device_interface_id(self) -> Optional[pulumi.Input[int]]:
        """
        Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.
        """
        return pulumi.get(self, "device_interface_id")

    @device_interface_id.setter
    def device_interface_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_interface_id", value)

    @property
    @pulumi.getter(name="outsideIpAddressId")
    def outside_ip_address_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "outside_ip_address_id")

    @outside_ip_address_id.setter
    def outside_ip_address_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "outside_ip_address_id", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="virtualMachineInterfaceId")
    def virtual_machine_interface_id(self) -> Optional[pulumi.Input[int]]:
        """
        Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.
        """
        return pulumi.get(self, "virtual_machine_interface_id")

    @virtual_machine_interface_id.setter
    def virtual_machine_interface_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "virtual_machine_interface_id", value)


@pulumi.input_type
class _VpnTunnelTerminationState:
    def __init__(__self__, *,
                 device_interface_id: Optional[pulumi.Input[int]] = None,
                 outside_ip_address_id: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel_id: Optional[pulumi.Input[int]] = None,
                 virtual_machine_interface_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering VpnTunnelTermination resources.
        :param pulumi.Input[int] device_interface_id: Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.
        :param pulumi.Input[str] role: Valid values are `peer`, `hub` and `spoke`.
        :param pulumi.Input[int] virtual_machine_interface_id: Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.
        """
        if device_interface_id is not None:
            pulumi.set(__self__, "device_interface_id", device_interface_id)
        if outside_ip_address_id is not None:
            pulumi.set(__self__, "outside_ip_address_id", outside_ip_address_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tunnel_id is not None:
            pulumi.set(__self__, "tunnel_id", tunnel_id)
        if virtual_machine_interface_id is not None:
            pulumi.set(__self__, "virtual_machine_interface_id", virtual_machine_interface_id)

    @property
    @pulumi.getter(name="deviceInterfaceId")
    def device_interface_id(self) -> Optional[pulumi.Input[int]]:
        """
        Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.
        """
        return pulumi.get(self, "device_interface_id")

    @device_interface_id.setter
    def device_interface_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_interface_id", value)

    @property
    @pulumi.getter(name="outsideIpAddressId")
    def outside_ip_address_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "outside_ip_address_id")

    @outside_ip_address_id.setter
    def outside_ip_address_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "outside_ip_address_id", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are `peer`, `hub` and `spoke`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tunnelId")
    def tunnel_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel_id")

    @tunnel_id.setter
    def tunnel_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel_id", value)

    @property
    @pulumi.getter(name="virtualMachineInterfaceId")
    def virtual_machine_interface_id(self) -> Optional[pulumi.Input[int]]:
        """
        Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.
        """
        return pulumi.get(self, "virtual_machine_interface_id")

    @virtual_machine_interface_id.setter
    def virtual_machine_interface_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "virtual_machine_interface_id", value)


class VpnTunnelTermination(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device_interface_id: Optional[pulumi.Input[int]] = None,
                 outside_ip_address_id: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel_id: Optional[pulumi.Input[int]] = None,
                 virtual_machine_interface_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/features/vpn-tunnels/):

        > NetBox can model private tunnels formed among virtual termination points across your network. Typical tunnel implementations include GRE, IP-in-IP, and IPSec. A tunnel may be terminated to two or more device or virtual machine interfaces. For convenient organization, tunnels may be assigned to user-defined groups.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        test_vpn_tunnel_group = netbox.VpnTunnelGroup("testVpnTunnelGroup", description="description")
        test_vpn_tunnel = netbox.VpnTunnel("testVpnTunnel",
            encapsulation="ipsec-transport",
            status="active",
            tunnel_group_id=test_vpn_tunnel_group.id)
        device = netbox.VpnTunnelTermination("device",
            role="peer",
            tunnel_id=test_vpn_tunnel.id,
            device_interface_id=123)
        vm = netbox.VpnTunnelTermination("vm",
            role="peer",
            tunnel_id=test_vpn_tunnel.id,
            virtual_machine_interface_id=234)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] device_interface_id: Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.
        :param pulumi.Input[str] role: Valid values are `peer`, `hub` and `spoke`.
        :param pulumi.Input[int] virtual_machine_interface_id: Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VpnTunnelTerminationArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/features/vpn-tunnels/):

        > NetBox can model private tunnels formed among virtual termination points across your network. Typical tunnel implementations include GRE, IP-in-IP, and IPSec. A tunnel may be terminated to two or more device or virtual machine interfaces. For convenient organization, tunnels may be assigned to user-defined groups.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        test_vpn_tunnel_group = netbox.VpnTunnelGroup("testVpnTunnelGroup", description="description")
        test_vpn_tunnel = netbox.VpnTunnel("testVpnTunnel",
            encapsulation="ipsec-transport",
            status="active",
            tunnel_group_id=test_vpn_tunnel_group.id)
        device = netbox.VpnTunnelTermination("device",
            role="peer",
            tunnel_id=test_vpn_tunnel.id,
            device_interface_id=123)
        vm = netbox.VpnTunnelTermination("vm",
            role="peer",
            tunnel_id=test_vpn_tunnel.id,
            virtual_machine_interface_id=234)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param VpnTunnelTerminationArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpnTunnelTerminationArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 device_interface_id: Optional[pulumi.Input[int]] = None,
                 outside_ip_address_id: Optional[pulumi.Input[int]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel_id: Optional[pulumi.Input[int]] = None,
                 virtual_machine_interface_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpnTunnelTerminationArgs.__new__(VpnTunnelTerminationArgs)

            __props__.__dict__["device_interface_id"] = device_interface_id
            __props__.__dict__["outside_ip_address_id"] = outside_ip_address_id
            if role is None and not opts.urn:
                raise TypeError("Missing required property 'role'")
            __props__.__dict__["role"] = role
            __props__.__dict__["tags"] = tags
            if tunnel_id is None and not opts.urn:
                raise TypeError("Missing required property 'tunnel_id'")
            __props__.__dict__["tunnel_id"] = tunnel_id
            __props__.__dict__["virtual_machine_interface_id"] = virtual_machine_interface_id
        super(VpnTunnelTermination, __self__).__init__(
            'netbox:index/vpnTunnelTermination:VpnTunnelTermination',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            device_interface_id: Optional[pulumi.Input[int]] = None,
            outside_ip_address_id: Optional[pulumi.Input[int]] = None,
            role: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tunnel_id: Optional[pulumi.Input[int]] = None,
            virtual_machine_interface_id: Optional[pulumi.Input[int]] = None) -> 'VpnTunnelTermination':
        """
        Get an existing VpnTunnelTermination resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] device_interface_id: Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.
        :param pulumi.Input[str] role: Valid values are `peer`, `hub` and `spoke`.
        :param pulumi.Input[int] virtual_machine_interface_id: Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpnTunnelTerminationState.__new__(_VpnTunnelTerminationState)

        __props__.__dict__["device_interface_id"] = device_interface_id
        __props__.__dict__["outside_ip_address_id"] = outside_ip_address_id
        __props__.__dict__["role"] = role
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tunnel_id"] = tunnel_id
        __props__.__dict__["virtual_machine_interface_id"] = virtual_machine_interface_id
        return VpnTunnelTermination(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="deviceInterfaceId")
    def device_interface_id(self) -> pulumi.Output[Optional[int]]:
        """
        Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.
        """
        return pulumi.get(self, "device_interface_id")

    @property
    @pulumi.getter(name="outsideIpAddressId")
    def outside_ip_address_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "outside_ip_address_id")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[str]:
        """
        Valid values are `peer`, `hub` and `spoke`.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tunnelId")
    def tunnel_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tunnel_id")

    @property
    @pulumi.getter(name="virtualMachineInterfaceId")
    def virtual_machine_interface_id(self) -> pulumi.Output[Optional[int]]:
        """
        Exactly one of `virtual_machine_interface_id` or `device_interface_id` must be given.
        """
        return pulumi.get(self, "virtual_machine_interface_id")

