# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetPrefixesResult',
    'AwaitableGetPrefixesResult',
    'get_prefixes',
    'get_prefixes_output',
]

@pulumi.output_type
class GetPrefixesResult:
    """
    A collection of values returned by getPrefixes.
    """
    def __init__(__self__, filters=None, id=None, limit=None, prefixes=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if limit and not isinstance(limit, int):
            raise TypeError("Expected argument 'limit' to be a int")
        pulumi.set(__self__, "limit", limit)
        if prefixes and not isinstance(prefixes, list):
            raise TypeError("Expected argument 'prefixes' to be a list")
        pulumi.set(__self__, "prefixes", prefixes)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetPrefixesFilterResult']]:
        """
        A list of filters to apply to the API query when requesting prefixes.
        """
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def limit(self) -> Optional[int]:
        """
        The limit of objects to return from the API lookup. Defaults to `0`.
        """
        return pulumi.get(self, "limit")

    @property
    @pulumi.getter
    def prefixes(self) -> Sequence['outputs.GetPrefixesPrefixResult']:
        return pulumi.get(self, "prefixes")


class AwaitableGetPrefixesResult(GetPrefixesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetPrefixesResult(
            filters=self.filters,
            id=self.id,
            limit=self.limit,
            prefixes=self.prefixes)


def get_prefixes(filters: Optional[Sequence[pulumi.InputType['GetPrefixesFilterArgs']]] = None,
                 limit: Optional[int] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetPrefixesResult:
    """
    Use this data source to access information about an existing resource.

    :param Sequence[pulumi.InputType['GetPrefixesFilterArgs']] filters: A list of filters to apply to the API query when requesting prefixes.
    :param int limit: The limit of objects to return from the API lookup. Defaults to `0`.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['limit'] = limit
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('netbox:index/getPrefixes:getPrefixes', __args__, opts=opts, typ=GetPrefixesResult).value

    return AwaitableGetPrefixesResult(
        filters=pulumi.get(__ret__, 'filters'),
        id=pulumi.get(__ret__, 'id'),
        limit=pulumi.get(__ret__, 'limit'),
        prefixes=pulumi.get(__ret__, 'prefixes'))


@_utilities.lift_output_func(get_prefixes)
def get_prefixes_output(filters: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetPrefixesFilterArgs']]]]] = None,
                        limit: Optional[pulumi.Input[Optional[int]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetPrefixesResult]:
    """
    Use this data source to access information about an existing resource.

    :param Sequence[pulumi.InputType['GetPrefixesFilterArgs']] filters: A list of filters to apply to the API query when requesting prefixes.
    :param int limit: The limit of objects to return from the API lookup. Defaults to `0`.
    """
    ...
