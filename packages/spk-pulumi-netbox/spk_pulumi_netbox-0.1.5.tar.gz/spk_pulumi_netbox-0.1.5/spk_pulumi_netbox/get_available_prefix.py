# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetAvailablePrefixResult',
    'AwaitableGetAvailablePrefixResult',
    'get_available_prefix',
    'get_available_prefix_output',
]

@pulumi.output_type
class GetAvailablePrefixResult:
    """
    A collection of values returned by getAvailablePrefix.
    """
    def __init__(__self__, id=None, prefix_id=None, prefixes_availables=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if prefix_id and not isinstance(prefix_id, int):
            raise TypeError("Expected argument 'prefix_id' to be a int")
        pulumi.set(__self__, "prefix_id", prefix_id)
        if prefixes_availables and not isinstance(prefixes_availables, list):
            raise TypeError("Expected argument 'prefixes_availables' to be a list")
        pulumi.set(__self__, "prefixes_availables", prefixes_availables)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="prefixId")
    def prefix_id(self) -> int:
        return pulumi.get(self, "prefix_id")

    @property
    @pulumi.getter(name="prefixesAvailables")
    def prefixes_availables(self) -> Sequence['outputs.GetAvailablePrefixPrefixesAvailableResult']:
        return pulumi.get(self, "prefixes_availables")


class AwaitableGetAvailablePrefixResult(GetAvailablePrefixResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAvailablePrefixResult(
            id=self.id,
            prefix_id=self.prefix_id,
            prefixes_availables=self.prefixes_availables)


def get_available_prefix(prefix_id: Optional[int] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAvailablePrefixResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['prefixId'] = prefix_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('netbox:index/getAvailablePrefix:getAvailablePrefix', __args__, opts=opts, typ=GetAvailablePrefixResult).value

    return AwaitableGetAvailablePrefixResult(
        id=pulumi.get(__ret__, 'id'),
        prefix_id=pulumi.get(__ret__, 'prefix_id'),
        prefixes_availables=pulumi.get(__ret__, 'prefixes_availables'))


@_utilities.lift_output_func(get_available_prefix)
def get_available_prefix_output(prefix_id: Optional[pulumi.Input[int]] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAvailablePrefixResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
