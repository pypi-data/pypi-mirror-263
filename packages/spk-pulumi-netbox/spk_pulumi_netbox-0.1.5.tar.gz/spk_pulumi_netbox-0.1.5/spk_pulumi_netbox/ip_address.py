# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['IpAddressArgs', 'IpAddress']

@pulumi.input_type
class IpAddressArgs:
    def __init__(__self__, *,
                 ip_address: pulumi.Input[str],
                 status: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 device_interface_id: Optional[pulumi.Input[int]] = None,
                 dns_name: Optional[pulumi.Input[str]] = None,
                 interface_id: Optional[pulumi.Input[int]] = None,
                 nat_inside_address_id: Optional[pulumi.Input[int]] = None,
                 object_type: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 virtual_machine_interface_id: Optional[pulumi.Input[int]] = None,
                 vrf_id: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a IpAddress resource.
        :param pulumi.Input[str] status: Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`.
        :param pulumi.Input[int] device_interface_id: Conflicts with `interface_id` and `virtual_machine_interface_id`.
        :param pulumi.Input[int] interface_id: Required when `object_type` is set.
        :param pulumi.Input[str] object_type: Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.
        :param pulumi.Input[str] role: Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
        :param pulumi.Input[int] virtual_machine_interface_id: Conflicts with `interface_id` and `device_interface_id`.
        """
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "status", status)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_interface_id is not None:
            pulumi.set(__self__, "device_interface_id", device_interface_id)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if interface_id is not None:
            pulumi.set(__self__, "interface_id", interface_id)
        if nat_inside_address_id is not None:
            pulumi.set(__self__, "nat_inside_address_id", nat_inside_address_id)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if virtual_machine_interface_id is not None:
            pulumi.set(__self__, "virtual_machine_interface_id", virtual_machine_interface_id)
        if vrf_id is not None:
            pulumi.set(__self__, "vrf_id", vrf_id)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: pulumi.Input[str]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="deviceInterfaceId")
    def device_interface_id(self) -> Optional[pulumi.Input[int]]:
        """
        Conflicts with `interface_id` and `virtual_machine_interface_id`.
        """
        return pulumi.get(self, "device_interface_id")

    @device_interface_id.setter
    def device_interface_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_interface_id", value)

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_name")

    @dns_name.setter
    def dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_name", value)

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> Optional[pulumi.Input[int]]:
        """
        Required when `object_type` is set.
        """
        return pulumi.get(self, "interface_id")

    @interface_id.setter
    def interface_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interface_id", value)

    @property
    @pulumi.getter(name="natInsideAddressId")
    def nat_inside_address_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nat_inside_address_id")

    @nat_inside_address_id.setter
    def nat_inside_address_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nat_inside_address_id", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="virtualMachineInterfaceId")
    def virtual_machine_interface_id(self) -> Optional[pulumi.Input[int]]:
        """
        Conflicts with `interface_id` and `device_interface_id`.
        """
        return pulumi.get(self, "virtual_machine_interface_id")

    @virtual_machine_interface_id.setter
    def virtual_machine_interface_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "virtual_machine_interface_id", value)

    @property
    @pulumi.getter(name="vrfId")
    def vrf_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vrf_id")

    @vrf_id.setter
    def vrf_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrf_id", value)


@pulumi.input_type
class _IpAddressState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 device_interface_id: Optional[pulumi.Input[int]] = None,
                 dns_name: Optional[pulumi.Input[str]] = None,
                 interface_id: Optional[pulumi.Input[int]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 nat_inside_address_id: Optional[pulumi.Input[int]] = None,
                 nat_outside_addresses: Optional[pulumi.Input[Sequence[pulumi.Input['IpAddressNatOutsideAddressArgs']]]] = None,
                 object_type: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 virtual_machine_interface_id: Optional[pulumi.Input[int]] = None,
                 vrf_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering IpAddress resources.
        :param pulumi.Input[int] device_interface_id: Conflicts with `interface_id` and `virtual_machine_interface_id`.
        :param pulumi.Input[int] interface_id: Required when `object_type` is set.
        :param pulumi.Input[str] object_type: Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.
        :param pulumi.Input[str] role: Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
        :param pulumi.Input[str] status: Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`.
        :param pulumi.Input[int] virtual_machine_interface_id: Conflicts with `interface_id` and `device_interface_id`.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_interface_id is not None:
            pulumi.set(__self__, "device_interface_id", device_interface_id)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if interface_id is not None:
            pulumi.set(__self__, "interface_id", interface_id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if nat_inside_address_id is not None:
            pulumi.set(__self__, "nat_inside_address_id", nat_inside_address_id)
        if nat_outside_addresses is not None:
            pulumi.set(__self__, "nat_outside_addresses", nat_outside_addresses)
        if object_type is not None:
            pulumi.set(__self__, "object_type", object_type)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if virtual_machine_interface_id is not None:
            pulumi.set(__self__, "virtual_machine_interface_id", virtual_machine_interface_id)
        if vrf_id is not None:
            pulumi.set(__self__, "vrf_id", vrf_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="deviceInterfaceId")
    def device_interface_id(self) -> Optional[pulumi.Input[int]]:
        """
        Conflicts with `interface_id` and `virtual_machine_interface_id`.
        """
        return pulumi.get(self, "device_interface_id")

    @device_interface_id.setter
    def device_interface_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_interface_id", value)

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dns_name")

    @dns_name.setter
    def dns_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_name", value)

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> Optional[pulumi.Input[int]]:
        """
        Required when `object_type` is set.
        """
        return pulumi.get(self, "interface_id")

    @interface_id.setter
    def interface_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interface_id", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="natInsideAddressId")
    def nat_inside_address_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "nat_inside_address_id")

    @nat_inside_address_id.setter
    def nat_inside_address_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "nat_inside_address_id", value)

    @property
    @pulumi.getter(name="natOutsideAddresses")
    def nat_outside_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['IpAddressNatOutsideAddressArgs']]]]:
        return pulumi.get(self, "nat_outside_addresses")

    @nat_outside_addresses.setter
    def nat_outside_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['IpAddressNatOutsideAddressArgs']]]]):
        pulumi.set(self, "nat_outside_addresses", value)

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.
        """
        return pulumi.get(self, "object_type")

    @object_type.setter
    def object_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "object_type", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="virtualMachineInterfaceId")
    def virtual_machine_interface_id(self) -> Optional[pulumi.Input[int]]:
        """
        Conflicts with `interface_id` and `device_interface_id`.
        """
        return pulumi.get(self, "virtual_machine_interface_id")

    @virtual_machine_interface_id.setter
    def virtual_machine_interface_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "virtual_machine_interface_id", value)

    @property
    @pulumi.getter(name="vrfId")
    def vrf_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vrf_id")

    @vrf_id.setter
    def vrf_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vrf_id", value)


class IpAddress(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_interface_id: Optional[pulumi.Input[int]] = None,
                 dns_name: Optional[pulumi.Input[str]] = None,
                 interface_id: Optional[pulumi.Input[int]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 nat_inside_address_id: Optional[pulumi.Input[int]] = None,
                 object_type: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 virtual_machine_interface_id: Optional[pulumi.Input[int]] = None,
                 vrf_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/features/ipam/#ip-addresses):

        > An IP address comprises a single host address (either IPv4 or IPv6) and its subnet mask. Its mask should match exactly how the IP address is configured on an interface in the real world.
        > 
        > Like a prefix, an IP address can optionally be assigned to a VRF (otherwise, it will appear in the "global" table). IP addresses are automatically arranged under parent prefixes within their respective VRFs according to the IP hierarchy.

        ## Example Usage

        ### Creating an IP address that is assigned to a virtual machine interface

        Starting with provider version 3.5.0, you can use the `virtual_machine_interface_id` attribute to assign an IP address to a virtual machine interface.
        You can also use the `interface_id` and `object_type` attributes instead.

        With `virtual_machine_interface_id`:
        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        # Assuming a virtual machine with the id `123` exists
        this_interface = netbox.Interface("thisInterface", virtual_machine_id=123)
        this_ip_address = netbox.IpAddress("thisIpAddress",
            ip_address="10.0.0.60/24",
            status="active",
            virtual_machine_interface_id=this_interface.id)
        ```
        <!--End PulumiCodeChooser -->

        With `object_type` and `interface_id`:
        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        # Assuming a virtual machine with the id `123` exists
        this_interface = netbox.Interface("thisInterface", virtual_machine_id=123)
        this_ip_address = netbox.IpAddress("thisIpAddress",
            ip_address="10.0.0.60/24",
            status="active",
            interface_id=this_interface.id,
            object_type="virtualization.vminterface")
        ```
        <!--End PulumiCodeChooser -->

        ### Creating an IP address that is assigned to a device interface

        Starting with provider version 3.5.0, you can use the `device_interface_id` attribute to assign an IP address to a device interface.
        You can also use the `interface_id` and `object_type` attributes instead.

        With `device_interface_id`:
        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        # Assuming a device with the id `123` exists
        this_device_interface = netbox.DeviceInterface("thisDeviceInterface",
            device_id=123,
            type="1000base-t")
        this_ip_address = netbox.IpAddress("thisIpAddress",
            ip_address="10.0.0.60/24",
            status="active",
            device_interface_id=this_device_interface.id)
        ```
        <!--End PulumiCodeChooser -->

        With `object_type` and `interface_id`:
        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        # Assuming a device with the id `123` exists
        this_device_interface = netbox.DeviceInterface("thisDeviceInterface",
            device_id=123,
            type="1000base-t")
        this_ip_address = netbox.IpAddress("thisIpAddress",
            ip_address="10.0.0.60/24",
            status="active",
            interface_id=this_device_interface.id,
            object_type="dcim.interface")
        ```
        <!--End PulumiCodeChooser -->

        ### Creating an IP address that is not assigned to anything

        You can create an IP address that is not assigend to anything by omitting the attributes mentioned above.

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        this = netbox.IpAddress("this",
            ip_address="10.0.0.50/24",
            status="reserved")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] device_interface_id: Conflicts with `interface_id` and `virtual_machine_interface_id`.
        :param pulumi.Input[int] interface_id: Required when `object_type` is set.
        :param pulumi.Input[str] object_type: Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.
        :param pulumi.Input[str] role: Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
        :param pulumi.Input[str] status: Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`.
        :param pulumi.Input[int] virtual_machine_interface_id: Conflicts with `interface_id` and `device_interface_id`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IpAddressArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/features/ipam/#ip-addresses):

        > An IP address comprises a single host address (either IPv4 or IPv6) and its subnet mask. Its mask should match exactly how the IP address is configured on an interface in the real world.
        > 
        > Like a prefix, an IP address can optionally be assigned to a VRF (otherwise, it will appear in the "global" table). IP addresses are automatically arranged under parent prefixes within their respective VRFs according to the IP hierarchy.

        ## Example Usage

        ### Creating an IP address that is assigned to a virtual machine interface

        Starting with provider version 3.5.0, you can use the `virtual_machine_interface_id` attribute to assign an IP address to a virtual machine interface.
        You can also use the `interface_id` and `object_type` attributes instead.

        With `virtual_machine_interface_id`:
        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        # Assuming a virtual machine with the id `123` exists
        this_interface = netbox.Interface("thisInterface", virtual_machine_id=123)
        this_ip_address = netbox.IpAddress("thisIpAddress",
            ip_address="10.0.0.60/24",
            status="active",
            virtual_machine_interface_id=this_interface.id)
        ```
        <!--End PulumiCodeChooser -->

        With `object_type` and `interface_id`:
        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        # Assuming a virtual machine with the id `123` exists
        this_interface = netbox.Interface("thisInterface", virtual_machine_id=123)
        this_ip_address = netbox.IpAddress("thisIpAddress",
            ip_address="10.0.0.60/24",
            status="active",
            interface_id=this_interface.id,
            object_type="virtualization.vminterface")
        ```
        <!--End PulumiCodeChooser -->

        ### Creating an IP address that is assigned to a device interface

        Starting with provider version 3.5.0, you can use the `device_interface_id` attribute to assign an IP address to a device interface.
        You can also use the `interface_id` and `object_type` attributes instead.

        With `device_interface_id`:
        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        # Assuming a device with the id `123` exists
        this_device_interface = netbox.DeviceInterface("thisDeviceInterface",
            device_id=123,
            type="1000base-t")
        this_ip_address = netbox.IpAddress("thisIpAddress",
            ip_address="10.0.0.60/24",
            status="active",
            device_interface_id=this_device_interface.id)
        ```
        <!--End PulumiCodeChooser -->

        With `object_type` and `interface_id`:
        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        # Assuming a device with the id `123` exists
        this_device_interface = netbox.DeviceInterface("thisDeviceInterface",
            device_id=123,
            type="1000base-t")
        this_ip_address = netbox.IpAddress("thisIpAddress",
            ip_address="10.0.0.60/24",
            status="active",
            interface_id=this_device_interface.id,
            object_type="dcim.interface")
        ```
        <!--End PulumiCodeChooser -->

        ### Creating an IP address that is not assigned to anything

        You can create an IP address that is not assigend to anything by omitting the attributes mentioned above.

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        this = netbox.IpAddress("this",
            ip_address="10.0.0.50/24",
            status="reserved")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param IpAddressArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IpAddressArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_interface_id: Optional[pulumi.Input[int]] = None,
                 dns_name: Optional[pulumi.Input[str]] = None,
                 interface_id: Optional[pulumi.Input[int]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 nat_inside_address_id: Optional[pulumi.Input[int]] = None,
                 object_type: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 virtual_machine_interface_id: Optional[pulumi.Input[int]] = None,
                 vrf_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IpAddressArgs.__new__(IpAddressArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["device_interface_id"] = device_interface_id
            __props__.__dict__["dns_name"] = dns_name
            __props__.__dict__["interface_id"] = interface_id
            if ip_address is None and not opts.urn:
                raise TypeError("Missing required property 'ip_address'")
            __props__.__dict__["ip_address"] = ip_address
            __props__.__dict__["nat_inside_address_id"] = nat_inside_address_id
            __props__.__dict__["object_type"] = object_type
            __props__.__dict__["role"] = role
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["virtual_machine_interface_id"] = virtual_machine_interface_id
            __props__.__dict__["vrf_id"] = vrf_id
            __props__.__dict__["nat_outside_addresses"] = None
        super(IpAddress, __self__).__init__(
            'netbox:index/ipAddress:IpAddress',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            device_interface_id: Optional[pulumi.Input[int]] = None,
            dns_name: Optional[pulumi.Input[str]] = None,
            interface_id: Optional[pulumi.Input[int]] = None,
            ip_address: Optional[pulumi.Input[str]] = None,
            nat_inside_address_id: Optional[pulumi.Input[int]] = None,
            nat_outside_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IpAddressNatOutsideAddressArgs']]]]] = None,
            object_type: Optional[pulumi.Input[str]] = None,
            role: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tenant_id: Optional[pulumi.Input[int]] = None,
            virtual_machine_interface_id: Optional[pulumi.Input[int]] = None,
            vrf_id: Optional[pulumi.Input[int]] = None) -> 'IpAddress':
        """
        Get an existing IpAddress resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] device_interface_id: Conflicts with `interface_id` and `virtual_machine_interface_id`.
        :param pulumi.Input[int] interface_id: Required when `object_type` is set.
        :param pulumi.Input[str] object_type: Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.
        :param pulumi.Input[str] role: Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
        :param pulumi.Input[str] status: Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`.
        :param pulumi.Input[int] virtual_machine_interface_id: Conflicts with `interface_id` and `device_interface_id`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IpAddressState.__new__(_IpAddressState)

        __props__.__dict__["description"] = description
        __props__.__dict__["device_interface_id"] = device_interface_id
        __props__.__dict__["dns_name"] = dns_name
        __props__.__dict__["interface_id"] = interface_id
        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["nat_inside_address_id"] = nat_inside_address_id
        __props__.__dict__["nat_outside_addresses"] = nat_outside_addresses
        __props__.__dict__["object_type"] = object_type
        __props__.__dict__["role"] = role
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["virtual_machine_interface_id"] = virtual_machine_interface_id
        __props__.__dict__["vrf_id"] = vrf_id
        return IpAddress(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceInterfaceId")
    def device_interface_id(self) -> pulumi.Output[Optional[int]]:
        """
        Conflicts with `interface_id` and `virtual_machine_interface_id`.
        """
        return pulumi.get(self, "device_interface_id")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="interfaceId")
    def interface_id(self) -> pulumi.Output[Optional[int]]:
        """
        Required when `object_type` is set.
        """
        return pulumi.get(self, "interface_id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="natInsideAddressId")
    def nat_inside_address_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "nat_inside_address_id")

    @property
    @pulumi.getter(name="natOutsideAddresses")
    def nat_outside_addresses(self) -> pulumi.Output[Sequence['outputs.IpAddressNatOutsideAddress']]:
        return pulumi.get(self, "nat_outside_addresses")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> pulumi.Output[Optional[str]]:
        """
        Valid values are `virtualization.vminterface` and `dcim.interface`. Required when `interface_id` is set.
        """
        return pulumi.get(self, "object_type")

    @property
    @pulumi.getter
    def role(self) -> pulumi.Output[Optional[str]]:
        """
        Valid values are `loopback`, `secondary`, `anycast`, `vip`, `vrrp`, `hsrp`, `glbp` and `carp`.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Valid values are `active`, `reserved`, `deprecated`, `dhcp` and `slaac`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="virtualMachineInterfaceId")
    def virtual_machine_interface_id(self) -> pulumi.Output[Optional[int]]:
        """
        Conflicts with `interface_id` and `device_interface_id`.
        """
        return pulumi.get(self, "virtual_machine_interface_id")

    @property
    @pulumi.getter(name="vrfId")
    def vrf_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "vrf_id")

