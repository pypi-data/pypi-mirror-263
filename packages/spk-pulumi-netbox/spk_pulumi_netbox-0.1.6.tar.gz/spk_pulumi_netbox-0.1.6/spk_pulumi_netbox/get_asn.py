# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAsnResult',
    'AwaitableGetAsnResult',
    'get_asn',
    'get_asn_output',
]

@pulumi.output_type
class GetAsnResult:
    """
    A collection of values returned by getAsn.
    """
    def __init__(__self__, asn=None, description=None, id=None, tag=None, tag_n=None, tags=None):
        if asn and not isinstance(asn, str):
            raise TypeError("Expected argument 'asn' to be a str")
        pulumi.set(__self__, "asn", asn)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if tag and not isinstance(tag, str):
            raise TypeError("Expected argument 'tag' to be a str")
        pulumi.set(__self__, "tag", tag)
        if tag_n and not isinstance(tag_n, str):
            raise TypeError("Expected argument 'tag_n' to be a str")
        pulumi.set(__self__, "tag_n", tag_n)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def asn(self) -> Optional[str]:
        """
        At least one of `asn` or `tag` must be given.
        """
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        """
        Tag to include in the data source filter (must match the tag's slug). At least one of `asn` or `tag` must be given.
        """
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter(name="tagN")
    def tag_n(self) -> Optional[str]:
        """
        Tag to exclude from the data source filter (must match the tag's slug).
        Refer to [Netbox's documentation](https://demo.netbox.dev/static/docs/rest-api/filtering/#lookup-expressions)
        for more information on available lookup expressions.
        """
        return pulumi.get(self, "tag_n")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")


class AwaitableGetAsnResult(GetAsnResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAsnResult(
            asn=self.asn,
            description=self.description,
            id=self.id,
            tag=self.tag,
            tag_n=self.tag_n,
            tags=self.tags)


def get_asn(asn: Optional[str] = None,
            tag: Optional[str] = None,
            tag_n: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAsnResult:
    """
    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_netbox as netbox

    asn1 = netbox.get_asn(asn="1111",
        tag="tag-1")
    asn2 = netbox.get_asn(tag="tag-1",
        tag_n="tag-2")
    ```
    <!--End PulumiCodeChooser -->


    :param str asn: At least one of `asn` or `tag` must be given.
    :param str tag: Tag to include in the data source filter (must match the tag's slug). At least one of `asn` or `tag` must be given.
    :param str tag_n: Tag to exclude from the data source filter (must match the tag's slug).
           Refer to [Netbox's documentation](https://demo.netbox.dev/static/docs/rest-api/filtering/#lookup-expressions)
           for more information on available lookup expressions.
    """
    __args__ = dict()
    __args__['asn'] = asn
    __args__['tag'] = tag
    __args__['tagN'] = tag_n
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('netbox:index/getAsn:getAsn', __args__, opts=opts, typ=GetAsnResult).value

    return AwaitableGetAsnResult(
        asn=pulumi.get(__ret__, 'asn'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        tag=pulumi.get(__ret__, 'tag'),
        tag_n=pulumi.get(__ret__, 'tag_n'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_asn)
def get_asn_output(asn: Optional[pulumi.Input[Optional[str]]] = None,
                   tag: Optional[pulumi.Input[Optional[str]]] = None,
                   tag_n: Optional[pulumi.Input[Optional[str]]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAsnResult]:
    """
    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_netbox as netbox

    asn1 = netbox.get_asn(asn="1111",
        tag="tag-1")
    asn2 = netbox.get_asn(tag="tag-1",
        tag_n="tag-2")
    ```
    <!--End PulumiCodeChooser -->


    :param str asn: At least one of `asn` or `tag` must be given.
    :param str tag: Tag to include in the data source filter (must match the tag's slug). At least one of `asn` or `tag` must be given.
    :param str tag_n: Tag to exclude from the data source filter (must match the tag's slug).
           Refer to [Netbox's documentation](https://demo.netbox.dev/static/docs/rest-api/filtering/#lookup-expressions)
           for more information on available lookup expressions.
    """
    ...
