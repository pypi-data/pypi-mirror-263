# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'CableATermination',
    'CableBTermination',
    'IpAddressNatOutsideAddress',
    'GetAsnsAsnResult',
    'GetAsnsFilterResult',
    'GetAvailablePrefixPrefixesAvailableResult',
    'GetDeviceInterfacesFilterResult',
    'GetDeviceInterfacesInterfaceResult',
    'GetDeviceInterfacesInterfaceTaggedVlanResult',
    'GetDeviceInterfacesInterfaceUntaggedVlanResult',
    'GetDevicesDeviceResult',
    'GetDevicesFilterResult',
    'GetInterfacesFilterResult',
    'GetInterfacesInterfaceResult',
    'GetInterfacesInterfaceTaggedVlanResult',
    'GetInterfacesInterfaceUntaggedVlanResult',
    'GetIpAddressesFilterResult',
    'GetIpAddressesIpAddressResult',
    'GetIpAddressesIpAddressTagResult',
    'GetIpAddressesIpAddressTenantResult',
    'GetLocationsFilterResult',
    'GetLocationsLocationResult',
    'GetPrefixesFilterResult',
    'GetPrefixesPrefixResult',
    'GetRacksFilterResult',
    'GetRacksRackResult',
    'GetRegionFilterResult',
    'GetTagsFilterResult',
    'GetTagsTagResult',
    'GetTenantsFilterResult',
    'GetTenantsTenantResult',
    'GetTenantsTenantTenantGroupResult',
    'GetVirtualMachinesFilterResult',
    'GetVirtualMachinesVmResult',
    'GetVlansFilterResult',
    'GetVlansVlanResult',
    'GetVrfsFilterResult',
    'GetVrfsVrfResult',
]

@pulumi.output_type
class CableATermination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectId":
            suggest = "object_id"
        elif key == "objectType":
            suggest = "object_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CableATermination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CableATermination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CableATermination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_id: int,
                 object_type: str):
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> int:
        return pulumi.get(self, "object_id")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        return pulumi.get(self, "object_type")


@pulumi.output_type
class CableBTermination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectId":
            suggest = "object_id"
        elif key == "objectType":
            suggest = "object_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CableBTermination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CableBTermination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CableBTermination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_id: int,
                 object_type: str):
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "object_type", object_type)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> int:
        return pulumi.get(self, "object_id")

    @property
    @pulumi.getter(name="objectType")
    def object_type(self) -> str:
        return pulumi.get(self, "object_type")


@pulumi.output_type
class IpAddressNatOutsideAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addressFamily":
            suggest = "address_family"
        elif key == "ipAddress":
            suggest = "ip_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IpAddressNatOutsideAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IpAddressNatOutsideAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IpAddressNatOutsideAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address_family: Optional[int] = None,
                 id: Optional[int] = None,
                 ip_address: Optional[str] = None):
        if address_family is not None:
            pulumi.set(__self__, "address_family", address_family)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)

    @property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> Optional[int]:
        return pulumi.get(self, "address_family")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")


@pulumi.output_type
class GetAsnsAsnResult(dict):
    def __init__(__self__, *,
                 asn: int,
                 id: int,
                 rir_id: int,
                 tags: Sequence[str]):
        pulumi.set(__self__, "asn", asn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "rir_id", rir_id)
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def asn(self) -> int:
        return pulumi.get(self, "asn")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="rirId")
    def rir_id(self) -> int:
        return pulumi.get(self, "rir_id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetAsnsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetAvailablePrefixPrefixesAvailableResult(dict):
    def __init__(__self__, *,
                 family: int,
                 prefix: str,
                 vrf_id: int):
        pulumi.set(__self__, "family", family)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "vrf_id", vrf_id)

    @property
    @pulumi.getter
    def family(self) -> int:
        return pulumi.get(self, "family")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="vrfId")
    def vrf_id(self) -> int:
        return pulumi.get(self, "vrf_id")


@pulumi.output_type
class GetDeviceInterfacesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetDeviceInterfacesInterfaceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 device_id: int,
                 enabled: bool,
                 id: int,
                 mac_address: str,
                 mode: Mapping[str, str],
                 mtu: int,
                 name: str,
                 tag_ids: Sequence[int],
                 tagged_vlans: Sequence['outputs.GetDeviceInterfacesInterfaceTaggedVlanResult'],
                 untagged_vlans: Sequence['outputs.GetDeviceInterfacesInterfaceUntaggedVlanResult']):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "mtu", mtu)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tag_ids", tag_ids)
        pulumi.set(__self__, "tagged_vlans", tagged_vlans)
        pulumi.set(__self__, "untagged_vlans", untagged_vlans)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> int:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def mode(self) -> Mapping[str, str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def mtu(self) -> int:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tagIds")
    def tag_ids(self) -> Sequence[int]:
        return pulumi.get(self, "tag_ids")

    @property
    @pulumi.getter(name="taggedVlans")
    def tagged_vlans(self) -> Sequence['outputs.GetDeviceInterfacesInterfaceTaggedVlanResult']:
        return pulumi.get(self, "tagged_vlans")

    @property
    @pulumi.getter(name="untaggedVlans")
    def untagged_vlans(self) -> Sequence['outputs.GetDeviceInterfacesInterfaceUntaggedVlanResult']:
        return pulumi.get(self, "untagged_vlans")


@pulumi.output_type
class GetDeviceInterfacesInterfaceTaggedVlanResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 vid: int):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "vid", vid)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def vid(self) -> int:
        return pulumi.get(self, "vid")


@pulumi.output_type
class GetDeviceInterfacesInterfaceUntaggedVlanResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 vid: int):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "vid", vid)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def vid(self) -> int:
        return pulumi.get(self, "vid")


@pulumi.output_type
class GetDevicesDeviceResult(dict):
    def __init__(__self__, *,
                 asset_tag: str,
                 cluster_id: int,
                 comments: str,
                 custom_fields: Mapping[str, Any],
                 description: str,
                 device_id: int,
                 device_type_id: int,
                 location_id: int,
                 manufacturer_id: int,
                 model: str,
                 name: str,
                 platform_id: int,
                 primary_ipv4: str,
                 primary_ipv6: str,
                 rack_face: str,
                 rack_id: int,
                 rack_position: float,
                 role_id: int,
                 serial: str,
                 site_id: int,
                 status: str,
                 tags: Sequence[str],
                 tenant_id: int):
        pulumi.set(__self__, "asset_tag", asset_tag)
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "custom_fields", custom_fields)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "device_type_id", device_type_id)
        pulumi.set(__self__, "location_id", location_id)
        pulumi.set(__self__, "manufacturer_id", manufacturer_id)
        pulumi.set(__self__, "model", model)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "platform_id", platform_id)
        pulumi.set(__self__, "primary_ipv4", primary_ipv4)
        pulumi.set(__self__, "primary_ipv6", primary_ipv6)
        pulumi.set(__self__, "rack_face", rack_face)
        pulumi.set(__self__, "rack_id", rack_id)
        pulumi.set(__self__, "rack_position", rack_position)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="assetTag")
    def asset_tag(self) -> str:
        return pulumi.get(self, "asset_tag")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> int:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Mapping[str, Any]:
        return pulumi.get(self, "custom_fields")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> int:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="deviceTypeId")
    def device_type_id(self) -> int:
        return pulumi.get(self, "device_type_id")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> int:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter(name="manufacturerId")
    def manufacturer_id(self) -> int:
        return pulumi.get(self, "manufacturer_id")

    @property
    @pulumi.getter
    def model(self) -> str:
        return pulumi.get(self, "model")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> int:
        return pulumi.get(self, "platform_id")

    @property
    @pulumi.getter(name="primaryIpv4")
    def primary_ipv4(self) -> str:
        return pulumi.get(self, "primary_ipv4")

    @property
    @pulumi.getter(name="primaryIpv6")
    def primary_ipv6(self) -> str:
        return pulumi.get(self, "primary_ipv6")

    @property
    @pulumi.getter(name="rackFace")
    def rack_face(self) -> str:
        return pulumi.get(self, "rack_face")

    @property
    @pulumi.getter(name="rackId")
    def rack_id(self) -> int:
        return pulumi.get(self, "rack_id")

    @property
    @pulumi.getter(name="rackPosition")
    def rack_position(self) -> float:
        return pulumi.get(self, "rack_position")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> int:
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter
    def serial(self) -> str:
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> int:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> int:
        return pulumi.get(self, "tenant_id")


@pulumi.output_type
class GetDevicesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetInterfacesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetInterfacesInterfaceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 enabled: bool,
                 id: int,
                 mac_address: str,
                 mode: Mapping[str, str],
                 mtu: int,
                 name: str,
                 tag_ids: Sequence[int],
                 tagged_vlans: Sequence['outputs.GetInterfacesInterfaceTaggedVlanResult'],
                 untagged_vlans: Sequence['outputs.GetInterfacesInterfaceUntaggedVlanResult'],
                 vm_id: int):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "mtu", mtu)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tag_ids", tag_ids)
        pulumi.set(__self__, "tagged_vlans", tagged_vlans)
        pulumi.set(__self__, "untagged_vlans", untagged_vlans)
        pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def mode(self) -> Mapping[str, str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def mtu(self) -> int:
        return pulumi.get(self, "mtu")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tagIds")
    def tag_ids(self) -> Sequence[int]:
        return pulumi.get(self, "tag_ids")

    @property
    @pulumi.getter(name="taggedVlans")
    def tagged_vlans(self) -> Sequence['outputs.GetInterfacesInterfaceTaggedVlanResult']:
        return pulumi.get(self, "tagged_vlans")

    @property
    @pulumi.getter(name="untaggedVlans")
    def untagged_vlans(self) -> Sequence['outputs.GetInterfacesInterfaceUntaggedVlanResult']:
        return pulumi.get(self, "untagged_vlans")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> int:
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class GetInterfacesInterfaceTaggedVlanResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 vid: int):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "vid", vid)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def vid(self) -> int:
        return pulumi.get(self, "vid")


@pulumi.output_type
class GetInterfacesInterfaceUntaggedVlanResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 vid: int):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "vid", vid)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def vid(self) -> int:
        return pulumi.get(self, "vid")


@pulumi.output_type
class GetIpAddressesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetIpAddressesIpAddressResult(dict):
    def __init__(__self__, *,
                 address_family: str,
                 created: str,
                 custom_fields: Mapping[str, Any],
                 description: str,
                 dns_name: str,
                 id: int,
                 ip_address: str,
                 last_updated: str,
                 role: str,
                 status: str,
                 tags: Sequence['outputs.GetIpAddressesIpAddressTagResult'],
                 tenants: Sequence['outputs.GetIpAddressesIpAddressTenantResult']):
        pulumi.set(__self__, "address_family", address_family)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "custom_fields", custom_fields)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dns_name", dns_name)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenants", tenants)

    @property
    @pulumi.getter(name="addressFamily")
    def address_family(self) -> str:
        return pulumi.get(self, "address_family")

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Mapping[str, Any]:
        return pulumi.get(self, "custom_fields")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> str:
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> str:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence['outputs.GetIpAddressesIpAddressTagResult']:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def tenants(self) -> Sequence['outputs.GetIpAddressesIpAddressTenantResult']:
        return pulumi.get(self, "tenants")


@pulumi.output_type
class GetIpAddressesIpAddressTagResult(dict):
    def __init__(__self__, *,
                 display: str,
                 id: int,
                 name: str,
                 slug: str):
        pulumi.set(__self__, "display", display)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def display(self) -> str:
        return pulumi.get(self, "display")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetIpAddressesIpAddressTenantResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 slug: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetLocationsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The name of the field to filter on. Supported fields are: .
        :param str value: The value to pass to the specified filter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter on. Supported fields are: .
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value to pass to the specified filter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetLocationsLocationResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: str,
                 parent_id: int,
                 site_id: int,
                 status: str,
                 tenant_id: int,
                 name: Optional[str] = None,
                 slug: Optional[str] = None):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "parent_id", parent_id)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> int:
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> int:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> int:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetPrefixesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        """
        :param str name: The name of the field to filter on. Supported fields are: `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `status`, `site_id`, & `tag`.
        :param str value: The value to pass to the specified filter.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the field to filter on. Supported fields are: `prefix`, `vlan_vid`, `vrf_id`, `vlan_id`, `status`, `site_id`, & `tag`.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        """
        The value to pass to the specified filter.
        """
        return pulumi.get(self, "value")


@pulumi.output_type
class GetPrefixesPrefixResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: int,
                 prefix: str,
                 status: str,
                 tags: Sequence[str],
                 vlan_id: int,
                 vlan_vid: float,
                 vrf_id: int):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "vlan_id", vlan_id)
        pulumi.set(__self__, "vlan_vid", vlan_vid)
        pulumi.set(__self__, "vrf_id", vrf_id)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="vlanId")
    def vlan_id(self) -> int:
        return pulumi.get(self, "vlan_id")

    @property
    @pulumi.getter(name="vlanVid")
    def vlan_vid(self) -> float:
        return pulumi.get(self, "vlan_vid")

    @property
    @pulumi.getter(name="vrfId")
    def vrf_id(self) -> int:
        return pulumi.get(self, "vrf_id")


@pulumi.output_type
class GetRacksFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetRacksRackResult(dict):
    def __init__(__self__, *,
                 asset_tag: str,
                 comments: str,
                 custom_fields: Mapping[str, Any],
                 desc_units: bool,
                 description: str,
                 facility_id: str,
                 id: int,
                 location_id: int,
                 max_weight: int,
                 mounting_depth: int,
                 name: str,
                 outer_depth: int,
                 outer_unit: str,
                 outer_width: int,
                 role_id: int,
                 serial: str,
                 site_id: int,
                 status: str,
                 tags: Sequence[str],
                 tenant_id: int,
                 type: str,
                 u_height: int,
                 weight: float,
                 weight_unit: str,
                 width: int):
        pulumi.set(__self__, "asset_tag", asset_tag)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "custom_fields", custom_fields)
        pulumi.set(__self__, "desc_units", desc_units)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "facility_id", facility_id)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "location_id", location_id)
        pulumi.set(__self__, "max_weight", max_weight)
        pulumi.set(__self__, "mounting_depth", mounting_depth)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "outer_depth", outer_depth)
        pulumi.set(__self__, "outer_unit", outer_unit)
        pulumi.set(__self__, "outer_width", outer_width)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "serial", serial)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "u_height", u_height)
        pulumi.set(__self__, "weight", weight)
        pulumi.set(__self__, "weight_unit", weight_unit)
        pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="assetTag")
    def asset_tag(self) -> str:
        return pulumi.get(self, "asset_tag")

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Mapping[str, Any]:
        return pulumi.get(self, "custom_fields")

    @property
    @pulumi.getter(name="descUnits")
    def desc_units(self) -> bool:
        return pulumi.get(self, "desc_units")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="facilityId")
    def facility_id(self) -> str:
        return pulumi.get(self, "facility_id")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> int:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter(name="maxWeight")
    def max_weight(self) -> int:
        return pulumi.get(self, "max_weight")

    @property
    @pulumi.getter(name="mountingDepth")
    def mounting_depth(self) -> int:
        return pulumi.get(self, "mounting_depth")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outerDepth")
    def outer_depth(self) -> int:
        return pulumi.get(self, "outer_depth")

    @property
    @pulumi.getter(name="outerUnit")
    def outer_unit(self) -> str:
        return pulumi.get(self, "outer_unit")

    @property
    @pulumi.getter(name="outerWidth")
    def outer_width(self) -> int:
        return pulumi.get(self, "outer_width")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> int:
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter
    def serial(self) -> str:
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> int:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> int:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="uHeight")
    def u_height(self) -> int:
        return pulumi.get(self, "u_height")

    @property
    @pulumi.getter
    def weight(self) -> float:
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter(name="weightUnit")
    def weight_unit(self) -> str:
        return pulumi.get(self, "weight_unit")

    @property
    @pulumi.getter
    def width(self) -> int:
        return pulumi.get(self, "width")


@pulumi.output_type
class GetRegionFilterResult(dict):
    def __init__(__self__, *,
                 id: Optional[int] = None,
                 name: Optional[str] = None,
                 slug: Optional[str] = None):
        """
        :param int id: The ID of this resource.
        """
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")


@pulumi.output_type
class GetTagsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTagsTagResult(dict):
    def __init__(__self__, *,
                 name: str,
                 slug: str,
                 tag_id: int,
                 color: Optional[str] = None,
                 description: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "slug", slug)
        pulumi.set(__self__, "tag_id", tag_id)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="tagId")
    def tag_id(self) -> int:
        return pulumi.get(self, "tag_id")

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")


@pulumi.output_type
class GetTenantsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetTenantsTenantResult(dict):
    def __init__(__self__, *,
                 circuit_count: int,
                 cluster_count: int,
                 comments: str,
                 created: str,
                 custom_fields: Mapping[str, Any],
                 description: str,
                 device_count: int,
                 id: int,
                 ip_address_count: int,
                 last_updated: str,
                 name: str,
                 prefix_count: int,
                 rack_count: int,
                 site_count: int,
                 slug: str,
                 tenant_groups: Sequence['outputs.GetTenantsTenantTenantGroupResult'],
                 vlan_count: int,
                 vm_count: int,
                 vrf_count: int):
        pulumi.set(__self__, "circuit_count", circuit_count)
        pulumi.set(__self__, "cluster_count", cluster_count)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "created", created)
        pulumi.set(__self__, "custom_fields", custom_fields)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "device_count", device_count)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ip_address_count", ip_address_count)
        pulumi.set(__self__, "last_updated", last_updated)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "prefix_count", prefix_count)
        pulumi.set(__self__, "rack_count", rack_count)
        pulumi.set(__self__, "site_count", site_count)
        pulumi.set(__self__, "slug", slug)
        pulumi.set(__self__, "tenant_groups", tenant_groups)
        pulumi.set(__self__, "vlan_count", vlan_count)
        pulumi.set(__self__, "vm_count", vm_count)
        pulumi.set(__self__, "vrf_count", vrf_count)

    @property
    @pulumi.getter(name="circuitCount")
    def circuit_count(self) -> int:
        return pulumi.get(self, "circuit_count")

    @property
    @pulumi.getter(name="clusterCount")
    def cluster_count(self) -> int:
        return pulumi.get(self, "cluster_count")

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def created(self) -> str:
        return pulumi.get(self, "created")

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Mapping[str, Any]:
        return pulumi.get(self, "custom_fields")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceCount")
    def device_count(self) -> int:
        return pulumi.get(self, "device_count")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddressCount")
    def ip_address_count(self) -> int:
        return pulumi.get(self, "ip_address_count")

    @property
    @pulumi.getter(name="lastUpdated")
    def last_updated(self) -> str:
        return pulumi.get(self, "last_updated")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="prefixCount")
    def prefix_count(self) -> int:
        return pulumi.get(self, "prefix_count")

    @property
    @pulumi.getter(name="rackCount")
    def rack_count(self) -> int:
        return pulumi.get(self, "rack_count")

    @property
    @pulumi.getter(name="siteCount")
    def site_count(self) -> int:
        return pulumi.get(self, "site_count")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="tenantGroups")
    def tenant_groups(self) -> Sequence['outputs.GetTenantsTenantTenantGroupResult']:
        return pulumi.get(self, "tenant_groups")

    @property
    @pulumi.getter(name="vlanCount")
    def vlan_count(self) -> int:
        return pulumi.get(self, "vlan_count")

    @property
    @pulumi.getter(name="vmCount")
    def vm_count(self) -> int:
        return pulumi.get(self, "vm_count")

    @property
    @pulumi.getter(name="vrfCount")
    def vrf_count(self) -> int:
        return pulumi.get(self, "vrf_count")


@pulumi.output_type
class GetTenantsTenantTenantGroupResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str,
                 slug: str,
                 tenant_count: int):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "slug", slug)
        pulumi.set(__self__, "tenant_count", tenant_count)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="tenantCount")
    def tenant_count(self) -> int:
        return pulumi.get(self, "tenant_count")


@pulumi.output_type
class GetVirtualMachinesFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVirtualMachinesVmResult(dict):
    def __init__(__self__, *,
                 cluster_id: int,
                 comments: str,
                 config_context: str,
                 custom_fields: Mapping[str, Any],
                 description: str,
                 device_id: int,
                 device_name: str,
                 disk_size_gb: int,
                 local_context_data: str,
                 memory_mb: int,
                 name: str,
                 platform_id: int,
                 platform_slug: str,
                 primary_ip: str,
                 primary_ip4: str,
                 primary_ip6: str,
                 role_id: int,
                 site_id: int,
                 status: str,
                 tag_ids: Sequence[int],
                 tenant_id: int,
                 vcpus: float,
                 vm_id: int):
        pulumi.set(__self__, "cluster_id", cluster_id)
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "config_context", config_context)
        pulumi.set(__self__, "custom_fields", custom_fields)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "disk_size_gb", disk_size_gb)
        pulumi.set(__self__, "local_context_data", local_context_data)
        pulumi.set(__self__, "memory_mb", memory_mb)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "platform_id", platform_id)
        pulumi.set(__self__, "platform_slug", platform_slug)
        pulumi.set(__self__, "primary_ip", primary_ip)
        pulumi.set(__self__, "primary_ip4", primary_ip4)
        pulumi.set(__self__, "primary_ip6", primary_ip6)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tag_ids", tag_ids)
        pulumi.set(__self__, "tenant_id", tenant_id)
        pulumi.set(__self__, "vcpus", vcpus)
        pulumi.set(__self__, "vm_id", vm_id)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> int:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="configContext")
    def config_context(self) -> str:
        return pulumi.get(self, "config_context")

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Mapping[str, Any]:
        return pulumi.get(self, "custom_fields")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> int:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="diskSizeGb")
    def disk_size_gb(self) -> int:
        return pulumi.get(self, "disk_size_gb")

    @property
    @pulumi.getter(name="localContextData")
    def local_context_data(self) -> str:
        return pulumi.get(self, "local_context_data")

    @property
    @pulumi.getter(name="memoryMb")
    def memory_mb(self) -> int:
        return pulumi.get(self, "memory_mb")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> int:
        return pulumi.get(self, "platform_id")

    @property
    @pulumi.getter(name="platformSlug")
    def platform_slug(self) -> str:
        return pulumi.get(self, "platform_slug")

    @property
    @pulumi.getter(name="primaryIp")
    def primary_ip(self) -> str:
        return pulumi.get(self, "primary_ip")

    @property
    @pulumi.getter(name="primaryIp4")
    def primary_ip4(self) -> str:
        return pulumi.get(self, "primary_ip4")

    @property
    @pulumi.getter(name="primaryIp6")
    def primary_ip6(self) -> str:
        return pulumi.get(self, "primary_ip6")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> int:
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> int:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="tagIds")
    def tag_ids(self) -> Sequence[int]:
        return pulumi.get(self, "tag_ids")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> int:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def vcpus(self) -> float:
        return pulumi.get(self, "vcpus")

    @property
    @pulumi.getter(name="vmId")
    def vm_id(self) -> int:
        return pulumi.get(self, "vm_id")


@pulumi.output_type
class GetVlansFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVlansVlanResult(dict):
    def __init__(__self__, *,
                 description: str,
                 group_id: int,
                 name: str,
                 role: int,
                 site: int,
                 status: str,
                 tenant: int,
                 vid: int):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "site", site)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tenant", tenant)
        pulumi.set(__self__, "vid", vid)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> int:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def role(self) -> int:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def site(self) -> int:
        return pulumi.get(self, "site")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tenant(self) -> int:
        return pulumi.get(self, "tenant")

    @property
    @pulumi.getter
    def vid(self) -> int:
        return pulumi.get(self, "vid")


@pulumi.output_type
class GetVrfsFilterResult(dict):
    def __init__(__self__, *,
                 name: str,
                 value: str):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetVrfsVrfResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: int,
                 name: str,
                 rd: str,
                 tenant: int):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "rd", rd)
        pulumi.set(__self__, "tenant", tenant)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def rd(self) -> str:
        return pulumi.get(self, "rd")

    @property
    @pulumi.getter
    def tenant(self) -> int:
        return pulumi.get(self, "tenant")


