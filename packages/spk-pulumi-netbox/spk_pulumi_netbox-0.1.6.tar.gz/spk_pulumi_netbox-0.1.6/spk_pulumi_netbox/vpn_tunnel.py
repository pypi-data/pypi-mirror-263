# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['VpnTunnelArgs', 'VpnTunnel']

@pulumi.input_type
class VpnTunnelArgs:
    def __init__(__self__, *,
                 encapsulation: pulumi.Input[str],
                 status: pulumi.Input[str],
                 tunnel_group_id: pulumi.Input[int],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 tunnel_id: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a VpnTunnel resource.
        :param pulumi.Input[str] encapsulation: Valid values are `ipsec-transport`, `ipsec-tunnel`, `ip-ip` and `gre`.
        :param pulumi.Input[str] status: Valid values are `planned`, `active` and `disabled`.
        """
        pulumi.set(__self__, "encapsulation", encapsulation)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "tunnel_group_id", tunnel_group_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if tunnel_id is not None:
            pulumi.set(__self__, "tunnel_id", tunnel_id)

    @property
    @pulumi.getter
    def encapsulation(self) -> pulumi.Input[str]:
        """
        Valid values are `ipsec-transport`, `ipsec-tunnel`, `ip-ip` and `gre`.
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: pulumi.Input[str]):
        pulumi.set(self, "encapsulation", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Valid values are `planned`, `active` and `disabled`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="tunnelGroupId")
    def tunnel_group_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_group_id")

    @tunnel_group_id.setter
    def tunnel_group_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_group_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="tunnelId")
    def tunnel_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel_id")

    @tunnel_id.setter
    def tunnel_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel_id", value)


@pulumi.input_type
class _VpnTunnelState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 encapsulation: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 tunnel_group_id: Optional[pulumi.Input[int]] = None,
                 tunnel_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering VpnTunnel resources.
        :param pulumi.Input[str] encapsulation: Valid values are `ipsec-transport`, `ipsec-tunnel`, `ip-ip` and `gre`.
        :param pulumi.Input[str] status: Valid values are `planned`, `active` and `disabled`.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if encapsulation is not None:
            pulumi.set(__self__, "encapsulation", encapsulation)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if tunnel_group_id is not None:
            pulumi.set(__self__, "tunnel_group_id", tunnel_group_id)
        if tunnel_id is not None:
            pulumi.set(__self__, "tunnel_id", tunnel_id)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def encapsulation(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are `ipsec-transport`, `ipsec-tunnel`, `ip-ip` and `gre`.
        """
        return pulumi.get(self, "encapsulation")

    @encapsulation.setter
    def encapsulation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encapsulation", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are `planned`, `active` and `disabled`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="tunnelGroupId")
    def tunnel_group_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel_group_id")

    @tunnel_group_id.setter
    def tunnel_group_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel_group_id", value)

    @property
    @pulumi.getter(name="tunnelId")
    def tunnel_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tunnel_id")

    @tunnel_id.setter
    def tunnel_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tunnel_id", value)


class VpnTunnel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 encapsulation: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 tunnel_group_id: Optional[pulumi.Input[int]] = None,
                 tunnel_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/features/vpn-tunnels/):

        > NetBox can model private tunnels formed among virtual termination points across your network. Typical tunnel implementations include GRE, IP-in-IP, and IPSec. A tunnel may be terminated to two or more device or virtual machine interfaces. For convenient organization, tunnels may be assigned to user-defined groups.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        test_vpn_tunnel_group = netbox.VpnTunnelGroup("testVpnTunnelGroup")
        test_vpn_tunnel = netbox.VpnTunnel("testVpnTunnel",
            encapsulation="ipsec-transport",
            status="active",
            tunnel_group_id=test_vpn_tunnel_group.id,
            description="This is a description.",
            tunnel_id=3,
            tenant_id=2)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] encapsulation: Valid values are `ipsec-transport`, `ipsec-tunnel`, `ip-ip` and `gre`.
        :param pulumi.Input[str] status: Valid values are `planned`, `active` and `disabled`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: VpnTunnelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/features/vpn-tunnels/):

        > NetBox can model private tunnels formed among virtual termination points across your network. Typical tunnel implementations include GRE, IP-in-IP, and IPSec. A tunnel may be terminated to two or more device or virtual machine interfaces. For convenient organization, tunnels may be assigned to user-defined groups.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        test_vpn_tunnel_group = netbox.VpnTunnelGroup("testVpnTunnelGroup")
        test_vpn_tunnel = netbox.VpnTunnel("testVpnTunnel",
            encapsulation="ipsec-transport",
            status="active",
            tunnel_group_id=test_vpn_tunnel_group.id,
            description="This is a description.",
            tunnel_id=3,
            tenant_id=2)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param VpnTunnelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(VpnTunnelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 encapsulation: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 tunnel_group_id: Optional[pulumi.Input[int]] = None,
                 tunnel_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = VpnTunnelArgs.__new__(VpnTunnelArgs)

            __props__.__dict__["description"] = description
            if encapsulation is None and not opts.urn:
                raise TypeError("Missing required property 'encapsulation'")
            __props__.__dict__["encapsulation"] = encapsulation
            __props__.__dict__["name"] = name
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tenant_id"] = tenant_id
            if tunnel_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'tunnel_group_id'")
            __props__.__dict__["tunnel_group_id"] = tunnel_group_id
            __props__.__dict__["tunnel_id"] = tunnel_id
        super(VpnTunnel, __self__).__init__(
            'netbox:index/vpnTunnel:VpnTunnel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            encapsulation: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tenant_id: Optional[pulumi.Input[int]] = None,
            tunnel_group_id: Optional[pulumi.Input[int]] = None,
            tunnel_id: Optional[pulumi.Input[int]] = None) -> 'VpnTunnel':
        """
        Get an existing VpnTunnel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] encapsulation: Valid values are `ipsec-transport`, `ipsec-tunnel`, `ip-ip` and `gre`.
        :param pulumi.Input[str] status: Valid values are `planned`, `active` and `disabled`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _VpnTunnelState.__new__(_VpnTunnelState)

        __props__.__dict__["description"] = description
        __props__.__dict__["encapsulation"] = encapsulation
        __props__.__dict__["name"] = name
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["tunnel_group_id"] = tunnel_group_id
        __props__.__dict__["tunnel_id"] = tunnel_id
        return VpnTunnel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def encapsulation(self) -> pulumi.Output[str]:
        """
        Valid values are `ipsec-transport`, `ipsec-tunnel`, `ip-ip` and `gre`.
        """
        return pulumi.get(self, "encapsulation")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Valid values are `planned`, `active` and `disabled`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="tunnelGroupId")
    def tunnel_group_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "tunnel_group_id")

    @property
    @pulumi.getter(name="tunnelId")
    def tunnel_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "tunnel_id")

