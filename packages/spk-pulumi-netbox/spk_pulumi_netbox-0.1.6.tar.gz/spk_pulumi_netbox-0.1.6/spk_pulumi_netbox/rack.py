# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RackArgs', 'Rack']

@pulumi.input_type
class RackArgs:
    def __init__(__self__, *,
                 site_id: pulumi.Input[int],
                 status: pulumi.Input[str],
                 u_height: pulumi.Input[int],
                 width: pulumi.Input[int],
                 asset_tag: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 desc_units: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 facility_id: Optional[pulumi.Input[str]] = None,
                 location_id: Optional[pulumi.Input[int]] = None,
                 max_weight: Optional[pulumi.Input[int]] = None,
                 mounting_depth: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 outer_depth: Optional[pulumi.Input[int]] = None,
                 outer_unit: Optional[pulumi.Input[str]] = None,
                 outer_width: Optional[pulumi.Input[int]] = None,
                 role_id: Optional[pulumi.Input[int]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 weight: Optional[pulumi.Input[float]] = None,
                 weight_unit: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Rack resource.
        :param pulumi.Input[str] status: Valid values are `reserved`, `available`, `planned`, `active` and `deprecated`.
        :param pulumi.Input[int] width: Valid values are `10`, `19`, `21` and `23`.
        :param pulumi.Input[bool] desc_units: If rack units are descending. Defaults to `false`.
        :param pulumi.Input[str] outer_unit: Valid values are `mm` and `in`. Required when `outer_width` and `outer_depth` is set.
        :param pulumi.Input[str] type: Valid values are `2-post-frame`, `4-post-frame`, `4-post-cabinet`, `wall-frame`, `wall-frame-vertical`, `wall-cabinet` and `wall-cabinet-vertical`.
        :param pulumi.Input[str] weight_unit: Valid values are `kg`, `g`, `lb` and `oz`. Required when `weight` and `max_weight` is set.
        """
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "u_height", u_height)
        pulumi.set(__self__, "width", width)
        if asset_tag is not None:
            pulumi.set(__self__, "asset_tag", asset_tag)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if desc_units is not None:
            pulumi.set(__self__, "desc_units", desc_units)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if facility_id is not None:
            pulumi.set(__self__, "facility_id", facility_id)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if max_weight is not None:
            pulumi.set(__self__, "max_weight", max_weight)
        if mounting_depth is not None:
            pulumi.set(__self__, "mounting_depth", mounting_depth)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if outer_depth is not None:
            pulumi.set(__self__, "outer_depth", outer_depth)
        if outer_unit is not None:
            pulumi.set(__self__, "outer_unit", outer_unit)
        if outer_width is not None:
            pulumi.set(__self__, "outer_width", outer_width)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_unit is not None:
            pulumi.set(__self__, "weight_unit", weight_unit)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Valid values are `reserved`, `available`, `planned`, `active` and `deprecated`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="uHeight")
    def u_height(self) -> pulumi.Input[int]:
        return pulumi.get(self, "u_height")

    @u_height.setter
    def u_height(self, value: pulumi.Input[int]):
        pulumi.set(self, "u_height", value)

    @property
    @pulumi.getter
    def width(self) -> pulumi.Input[int]:
        """
        Valid values are `10`, `19`, `21` and `23`.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: pulumi.Input[int]):
        pulumi.set(self, "width", value)

    @property
    @pulumi.getter(name="assetTag")
    def asset_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "asset_tag")

    @asset_tag.setter
    def asset_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset_tag", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_fields", value)

    @property
    @pulumi.getter(name="descUnits")
    def desc_units(self) -> Optional[pulumi.Input[bool]]:
        """
        If rack units are descending. Defaults to `false`.
        """
        return pulumi.get(self, "desc_units")

    @desc_units.setter
    def desc_units(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "desc_units", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="facilityId")
    def facility_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facility_id")

    @facility_id.setter
    def facility_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facility_id", value)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter(name="maxWeight")
    def max_weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_weight")

    @max_weight.setter
    def max_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_weight", value)

    @property
    @pulumi.getter(name="mountingDepth")
    def mounting_depth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mounting_depth")

    @mounting_depth.setter
    def mounting_depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mounting_depth", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="outerDepth")
    def outer_depth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "outer_depth")

    @outer_depth.setter
    def outer_depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "outer_depth", value)

    @property
    @pulumi.getter(name="outerUnit")
    def outer_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are `mm` and `in`. Required when `outer_width` and `outer_depth` is set.
        """
        return pulumi.get(self, "outer_unit")

    @outer_unit.setter
    def outer_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outer_unit", value)

    @property
    @pulumi.getter(name="outerWidth")
    def outer_width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "outer_width")

    @outer_width.setter
    def outer_width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "outer_width", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are `2-post-frame`, `4-post-frame`, `4-post-cabinet`, `wall-frame`, `wall-frame-vertical`, `wall-cabinet` and `wall-cabinet-vertical`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "weight", value)

    @property
    @pulumi.getter(name="weightUnit")
    def weight_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are `kg`, `g`, `lb` and `oz`. Required when `weight` and `max_weight` is set.
        """
        return pulumi.get(self, "weight_unit")

    @weight_unit.setter
    def weight_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "weight_unit", value)


@pulumi.input_type
class _RackState:
    def __init__(__self__, *,
                 asset_tag: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 desc_units: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 facility_id: Optional[pulumi.Input[str]] = None,
                 location_id: Optional[pulumi.Input[int]] = None,
                 max_weight: Optional[pulumi.Input[int]] = None,
                 mounting_depth: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 outer_depth: Optional[pulumi.Input[int]] = None,
                 outer_unit: Optional[pulumi.Input[str]] = None,
                 outer_width: Optional[pulumi.Input[int]] = None,
                 role_id: Optional[pulumi.Input[int]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 site_id: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 u_height: Optional[pulumi.Input[int]] = None,
                 weight: Optional[pulumi.Input[float]] = None,
                 weight_unit: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Rack resources.
        :param pulumi.Input[bool] desc_units: If rack units are descending. Defaults to `false`.
        :param pulumi.Input[str] outer_unit: Valid values are `mm` and `in`. Required when `outer_width` and `outer_depth` is set.
        :param pulumi.Input[str] status: Valid values are `reserved`, `available`, `planned`, `active` and `deprecated`.
        :param pulumi.Input[str] type: Valid values are `2-post-frame`, `4-post-frame`, `4-post-cabinet`, `wall-frame`, `wall-frame-vertical`, `wall-cabinet` and `wall-cabinet-vertical`.
        :param pulumi.Input[str] weight_unit: Valid values are `kg`, `g`, `lb` and `oz`. Required when `weight` and `max_weight` is set.
        :param pulumi.Input[int] width: Valid values are `10`, `19`, `21` and `23`.
        """
        if asset_tag is not None:
            pulumi.set(__self__, "asset_tag", asset_tag)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if desc_units is not None:
            pulumi.set(__self__, "desc_units", desc_units)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if facility_id is not None:
            pulumi.set(__self__, "facility_id", facility_id)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if max_weight is not None:
            pulumi.set(__self__, "max_weight", max_weight)
        if mounting_depth is not None:
            pulumi.set(__self__, "mounting_depth", mounting_depth)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if outer_depth is not None:
            pulumi.set(__self__, "outer_depth", outer_depth)
        if outer_unit is not None:
            pulumi.set(__self__, "outer_unit", outer_unit)
        if outer_width is not None:
            pulumi.set(__self__, "outer_width", outer_width)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if u_height is not None:
            pulumi.set(__self__, "u_height", u_height)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_unit is not None:
            pulumi.set(__self__, "weight_unit", weight_unit)
        if width is not None:
            pulumi.set(__self__, "width", width)

    @property
    @pulumi.getter(name="assetTag")
    def asset_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "asset_tag")

    @asset_tag.setter
    def asset_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset_tag", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_fields", value)

    @property
    @pulumi.getter(name="descUnits")
    def desc_units(self) -> Optional[pulumi.Input[bool]]:
        """
        If rack units are descending. Defaults to `false`.
        """
        return pulumi.get(self, "desc_units")

    @desc_units.setter
    def desc_units(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "desc_units", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="facilityId")
    def facility_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "facility_id")

    @facility_id.setter
    def facility_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "facility_id", value)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter(name="maxWeight")
    def max_weight(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_weight")

    @max_weight.setter
    def max_weight(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_weight", value)

    @property
    @pulumi.getter(name="mountingDepth")
    def mounting_depth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "mounting_depth")

    @mounting_depth.setter
    def mounting_depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "mounting_depth", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="outerDepth")
    def outer_depth(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "outer_depth")

    @outer_depth.setter
    def outer_depth(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "outer_depth", value)

    @property
    @pulumi.getter(name="outerUnit")
    def outer_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are `mm` and `in`. Required when `outer_width` and `outer_depth` is set.
        """
        return pulumi.get(self, "outer_unit")

    @outer_unit.setter
    def outer_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "outer_unit", value)

    @property
    @pulumi.getter(name="outerWidth")
    def outer_width(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "outer_width")

    @outer_width.setter
    def outer_width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "outer_width", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are `reserved`, `available`, `planned`, `active` and `deprecated`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are `2-post-frame`, `4-post-frame`, `4-post-cabinet`, `wall-frame`, `wall-frame-vertical`, `wall-cabinet` and `wall-cabinet-vertical`.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="uHeight")
    def u_height(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "u_height")

    @u_height.setter
    def u_height(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "u_height", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "weight", value)

    @property
    @pulumi.getter(name="weightUnit")
    def weight_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are `kg`, `g`, `lb` and `oz`. Required when `weight` and `max_weight` is set.
        """
        return pulumi.get(self, "weight_unit")

    @weight_unit.setter
    def weight_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "weight_unit", value)

    @property
    @pulumi.getter
    def width(self) -> Optional[pulumi.Input[int]]:
        """
        Valid values are `10`, `19`, `21` and `23`.
        """
        return pulumi.get(self, "width")

    @width.setter
    def width(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "width", value)


class Rack(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asset_tag: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 desc_units: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 facility_id: Optional[pulumi.Input[str]] = None,
                 location_id: Optional[pulumi.Input[int]] = None,
                 max_weight: Optional[pulumi.Input[int]] = None,
                 mounting_depth: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 outer_depth: Optional[pulumi.Input[int]] = None,
                 outer_unit: Optional[pulumi.Input[str]] = None,
                 outer_width: Optional[pulumi.Input[int]] = None,
                 role_id: Optional[pulumi.Input[int]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 site_id: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 u_height: Optional[pulumi.Input[int]] = None,
                 weight: Optional[pulumi.Input[float]] = None,
                 weight_unit: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/rack/):

        > The rack model represents a physical two- or four-post equipment rack in which devices can be installed. Each rack must be assigned to a site, and may optionally be assigned to a location within that site. Racks can also be organized by user-defined functional roles. The name and facility ID of each rack within a location must be unique.

        Rack height is measured in rack units (U); racks are commonly between 42U and 48U tall, but NetBox allows you to define racks of arbitrary height. A toggle is provided to indicate whether rack units are in ascending (from the ground up) or descending order.

        Each rack is assigned a name and (optionally) a separate facility ID. This is helpful when leasing space in a data center your organization does not own: The facility will often assign a seemingly arbitrary ID to a rack (for example, "M204.313") whereas internally you refer to is simply as "R113." A unique serial number and asset tag may also be associated with each rack.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        test_site = netbox.Site("testSite", status="active")
        test_rack = netbox.Rack("testRack",
            site_id=test_site.id,
            status="reserved",
            width=19,
            u_height=48)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] desc_units: If rack units are descending. Defaults to `false`.
        :param pulumi.Input[str] outer_unit: Valid values are `mm` and `in`. Required when `outer_width` and `outer_depth` is set.
        :param pulumi.Input[str] status: Valid values are `reserved`, `available`, `planned`, `active` and `deprecated`.
        :param pulumi.Input[str] type: Valid values are `2-post-frame`, `4-post-frame`, `4-post-cabinet`, `wall-frame`, `wall-frame-vertical`, `wall-cabinet` and `wall-cabinet-vertical`.
        :param pulumi.Input[str] weight_unit: Valid values are `kg`, `g`, `lb` and `oz`. Required when `weight` and `max_weight` is set.
        :param pulumi.Input[int] width: Valid values are `10`, `19`, `21` and `23`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RackArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/rack/):

        > The rack model represents a physical two- or four-post equipment rack in which devices can be installed. Each rack must be assigned to a site, and may optionally be assigned to a location within that site. Racks can also be organized by user-defined functional roles. The name and facility ID of each rack within a location must be unique.

        Rack height is measured in rack units (U); racks are commonly between 42U and 48U tall, but NetBox allows you to define racks of arbitrary height. A toggle is provided to indicate whether rack units are in ascending (from the ground up) or descending order.

        Each rack is assigned a name and (optionally) a separate facility ID. This is helpful when leasing space in a data center your organization does not own: The facility will often assign a seemingly arbitrary ID to a rack (for example, "M204.313") whereas internally you refer to is simply as "R113." A unique serial number and asset tag may also be associated with each rack.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        test_site = netbox.Site("testSite", status="active")
        test_rack = netbox.Rack("testRack",
            site_id=test_site.id,
            status="reserved",
            width=19,
            u_height=48)
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param RackArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RackArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asset_tag: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 desc_units: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 facility_id: Optional[pulumi.Input[str]] = None,
                 location_id: Optional[pulumi.Input[int]] = None,
                 max_weight: Optional[pulumi.Input[int]] = None,
                 mounting_depth: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 outer_depth: Optional[pulumi.Input[int]] = None,
                 outer_unit: Optional[pulumi.Input[str]] = None,
                 outer_width: Optional[pulumi.Input[int]] = None,
                 role_id: Optional[pulumi.Input[int]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 site_id: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 u_height: Optional[pulumi.Input[int]] = None,
                 weight: Optional[pulumi.Input[float]] = None,
                 weight_unit: Optional[pulumi.Input[str]] = None,
                 width: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RackArgs.__new__(RackArgs)

            __props__.__dict__["asset_tag"] = asset_tag
            __props__.__dict__["comments"] = comments
            __props__.__dict__["custom_fields"] = custom_fields
            __props__.__dict__["desc_units"] = desc_units
            __props__.__dict__["description"] = description
            __props__.__dict__["facility_id"] = facility_id
            __props__.__dict__["location_id"] = location_id
            __props__.__dict__["max_weight"] = max_weight
            __props__.__dict__["mounting_depth"] = mounting_depth
            __props__.__dict__["name"] = name
            __props__.__dict__["outer_depth"] = outer_depth
            __props__.__dict__["outer_unit"] = outer_unit
            __props__.__dict__["outer_width"] = outer_width
            __props__.__dict__["role_id"] = role_id
            __props__.__dict__["serial"] = serial
            if site_id is None and not opts.urn:
                raise TypeError("Missing required property 'site_id'")
            __props__.__dict__["site_id"] = site_id
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["type"] = type
            if u_height is None and not opts.urn:
                raise TypeError("Missing required property 'u_height'")
            __props__.__dict__["u_height"] = u_height
            __props__.__dict__["weight"] = weight
            __props__.__dict__["weight_unit"] = weight_unit
            if width is None and not opts.urn:
                raise TypeError("Missing required property 'width'")
            __props__.__dict__["width"] = width
        super(Rack, __self__).__init__(
            'netbox:index/rack:Rack',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            asset_tag: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            desc_units: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            facility_id: Optional[pulumi.Input[str]] = None,
            location_id: Optional[pulumi.Input[int]] = None,
            max_weight: Optional[pulumi.Input[int]] = None,
            mounting_depth: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            outer_depth: Optional[pulumi.Input[int]] = None,
            outer_unit: Optional[pulumi.Input[str]] = None,
            outer_width: Optional[pulumi.Input[int]] = None,
            role_id: Optional[pulumi.Input[int]] = None,
            serial: Optional[pulumi.Input[str]] = None,
            site_id: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tenant_id: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None,
            u_height: Optional[pulumi.Input[int]] = None,
            weight: Optional[pulumi.Input[float]] = None,
            weight_unit: Optional[pulumi.Input[str]] = None,
            width: Optional[pulumi.Input[int]] = None) -> 'Rack':
        """
        Get an existing Rack resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] desc_units: If rack units are descending. Defaults to `false`.
        :param pulumi.Input[str] outer_unit: Valid values are `mm` and `in`. Required when `outer_width` and `outer_depth` is set.
        :param pulumi.Input[str] status: Valid values are `reserved`, `available`, `planned`, `active` and `deprecated`.
        :param pulumi.Input[str] type: Valid values are `2-post-frame`, `4-post-frame`, `4-post-cabinet`, `wall-frame`, `wall-frame-vertical`, `wall-cabinet` and `wall-cabinet-vertical`.
        :param pulumi.Input[str] weight_unit: Valid values are `kg`, `g`, `lb` and `oz`. Required when `weight` and `max_weight` is set.
        :param pulumi.Input[int] width: Valid values are `10`, `19`, `21` and `23`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RackState.__new__(_RackState)

        __props__.__dict__["asset_tag"] = asset_tag
        __props__.__dict__["comments"] = comments
        __props__.__dict__["custom_fields"] = custom_fields
        __props__.__dict__["desc_units"] = desc_units
        __props__.__dict__["description"] = description
        __props__.__dict__["facility_id"] = facility_id
        __props__.__dict__["location_id"] = location_id
        __props__.__dict__["max_weight"] = max_weight
        __props__.__dict__["mounting_depth"] = mounting_depth
        __props__.__dict__["name"] = name
        __props__.__dict__["outer_depth"] = outer_depth
        __props__.__dict__["outer_unit"] = outer_unit
        __props__.__dict__["outer_width"] = outer_width
        __props__.__dict__["role_id"] = role_id
        __props__.__dict__["serial"] = serial
        __props__.__dict__["site_id"] = site_id
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["type"] = type
        __props__.__dict__["u_height"] = u_height
        __props__.__dict__["weight"] = weight
        __props__.__dict__["weight_unit"] = weight_unit
        __props__.__dict__["width"] = width
        return Rack(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assetTag")
    def asset_tag(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "asset_tag")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "custom_fields")

    @property
    @pulumi.getter(name="descUnits")
    def desc_units(self) -> pulumi.Output[Optional[bool]]:
        """
        If rack units are descending. Defaults to `false`.
        """
        return pulumi.get(self, "desc_units")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="facilityId")
    def facility_id(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "facility_id")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter(name="maxWeight")
    def max_weight(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "max_weight")

    @property
    @pulumi.getter(name="mountingDepth")
    def mounting_depth(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "mounting_depth")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="outerDepth")
    def outer_depth(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "outer_depth")

    @property
    @pulumi.getter(name="outerUnit")
    def outer_unit(self) -> pulumi.Output[Optional[str]]:
        """
        Valid values are `mm` and `in`. Required when `outer_width` and `outer_depth` is set.
        """
        return pulumi.get(self, "outer_unit")

    @property
    @pulumi.getter(name="outerWidth")
    def outer_width(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "outer_width")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter
    def serial(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Valid values are `reserved`, `available`, `planned`, `active` and `deprecated`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        Valid values are `2-post-frame`, `4-post-frame`, `4-post-cabinet`, `wall-frame`, `wall-frame-vertical`, `wall-cabinet` and `wall-cabinet-vertical`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="uHeight")
    def u_height(self) -> pulumi.Output[int]:
        return pulumi.get(self, "u_height")

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Output[Optional[float]]:
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter(name="weightUnit")
    def weight_unit(self) -> pulumi.Output[Optional[str]]:
        """
        Valid values are `kg`, `g`, `lb` and `oz`. Required when `weight` and `max_weight` is set.
        """
        return pulumi.get(self, "weight_unit")

    @property
    @pulumi.getter
    def width(self) -> pulumi.Output[int]:
        """
        Valid values are `10`, `19`, `21` and `23`.
        """
        return pulumi.get(self, "width")

