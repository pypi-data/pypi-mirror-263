# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ContactAssignmentArgs', 'ContactAssignment']

@pulumi.input_type
class ContactAssignmentArgs:
    def __init__(__self__, *,
                 contact_id: pulumi.Input[int],
                 content_type: pulumi.Input[str],
                 object_id: pulumi.Input[int],
                 role_id: pulumi.Input[int],
                 priority: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ContactAssignment resource.
        :param pulumi.Input[str] priority: Valid values are `primary`, `secondary`, `tertiary` and `inactive`.
        """
        pulumi.set(__self__, "contact_id", contact_id)
        pulumi.set(__self__, "content_type", content_type)
        pulumi.set(__self__, "object_id", object_id)
        pulumi.set(__self__, "role_id", role_id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter(name="contactId")
    def contact_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "contact_id")

    @contact_id.setter
    def contact_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "contact_id", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "object_id", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are `primary`, `secondary`, `tertiary` and `inactive`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class _ContactAssignmentState:
    def __init__(__self__, *,
                 contact_id: Optional[pulumi.Input[int]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 object_id: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 role_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering ContactAssignment resources.
        :param pulumi.Input[str] priority: Valid values are `primary`, `secondary`, `tertiary` and `inactive`.
        """
        if contact_id is not None:
            pulumi.set(__self__, "contact_id", contact_id)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if object_id is not None:
            pulumi.set(__self__, "object_id", object_id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)

    @property
    @pulumi.getter(name="contactId")
    def contact_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "contact_id")

    @contact_id.setter
    def contact_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "contact_id", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "object_id")

    @object_id.setter
    def object_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "object_id", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are `primary`, `secondary`, `tertiary` and `inactive`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "role_id", value)


class ContactAssignment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 contact_id: Optional[pulumi.Input[int]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 object_id: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 role_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/features/contacts#contactassignments_1):

        > Much like tenancy, contact assignment enables you to track ownership of resources modeled in NetBox.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        test_contact = netbox.Contact("testContact")
        test_contact_role = netbox.ContactRole("testContactRole")
        # Assumes that a device with id 123 exists
        test_contact_assignment = netbox.ContactAssignment("testContactAssignment",
            content_type="dcim.device",
            object_id=123,
            contact_id=test_contact.id,
            role_id=test_contact_role.id,
            priority="primary")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] priority: Valid values are `primary`, `secondary`, `tertiary` and `inactive`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ContactAssignmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/features/contacts#contactassignments_1):

        > Much like tenancy, contact assignment enables you to track ownership of resources modeled in NetBox.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        test_contact = netbox.Contact("testContact")
        test_contact_role = netbox.ContactRole("testContactRole")
        # Assumes that a device with id 123 exists
        test_contact_assignment = netbox.ContactAssignment("testContactAssignment",
            content_type="dcim.device",
            object_id=123,
            contact_id=test_contact.id,
            role_id=test_contact_role.id,
            priority="primary")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ContactAssignmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ContactAssignmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 contact_id: Optional[pulumi.Input[int]] = None,
                 content_type: Optional[pulumi.Input[str]] = None,
                 object_id: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 role_id: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ContactAssignmentArgs.__new__(ContactAssignmentArgs)

            if contact_id is None and not opts.urn:
                raise TypeError("Missing required property 'contact_id'")
            __props__.__dict__["contact_id"] = contact_id
            if content_type is None and not opts.urn:
                raise TypeError("Missing required property 'content_type'")
            __props__.__dict__["content_type"] = content_type
            if object_id is None and not opts.urn:
                raise TypeError("Missing required property 'object_id'")
            __props__.__dict__["object_id"] = object_id
            __props__.__dict__["priority"] = priority
            if role_id is None and not opts.urn:
                raise TypeError("Missing required property 'role_id'")
            __props__.__dict__["role_id"] = role_id
        super(ContactAssignment, __self__).__init__(
            'netbox:index/contactAssignment:ContactAssignment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            contact_id: Optional[pulumi.Input[int]] = None,
            content_type: Optional[pulumi.Input[str]] = None,
            object_id: Optional[pulumi.Input[int]] = None,
            priority: Optional[pulumi.Input[str]] = None,
            role_id: Optional[pulumi.Input[int]] = None) -> 'ContactAssignment':
        """
        Get an existing ContactAssignment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] priority: Valid values are `primary`, `secondary`, `tertiary` and `inactive`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ContactAssignmentState.__new__(_ContactAssignmentState)

        __props__.__dict__["contact_id"] = contact_id
        __props__.__dict__["content_type"] = content_type
        __props__.__dict__["object_id"] = object_id
        __props__.__dict__["priority"] = priority
        __props__.__dict__["role_id"] = role_id
        return ContactAssignment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="contactId")
    def contact_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "contact_id")

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "content_type")

    @property
    @pulumi.getter(name="objectId")
    def object_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "object_id")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[Optional[str]]:
        """
        Valid values are `primary`, `secondary`, `tertiary` and `inactive`.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "role_id")

