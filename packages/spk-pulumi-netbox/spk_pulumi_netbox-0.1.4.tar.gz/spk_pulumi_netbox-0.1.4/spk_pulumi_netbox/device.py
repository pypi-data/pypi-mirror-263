# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DeviceArgs', 'Device']

@pulumi.input_type
class DeviceArgs:
    def __init__(__self__, *,
                 device_type_id: pulumi.Input[int],
                 role_id: pulumi.Input[int],
                 site_id: pulumi.Input[int],
                 asset_tag: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[int]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 local_context_data: Optional[pulumi.Input[str]] = None,
                 location_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 platform_id: Optional[pulumi.Input[int]] = None,
                 rack_face: Optional[pulumi.Input[str]] = None,
                 rack_id: Optional[pulumi.Input[int]] = None,
                 rack_position: Optional[pulumi.Input[float]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 virtual_chassis_id: Optional[pulumi.Input[int]] = None,
                 virtual_chassis_master: Optional[pulumi.Input[bool]] = None,
                 virtual_chassis_position: Optional[pulumi.Input[int]] = None,
                 virtual_chassis_priority: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a Device resource.
        :param pulumi.Input[str] local_context_data: This is best managed through the use of `jsonencode` and a map of settings.
        :param pulumi.Input[str] rack_face: Valid values are `front` and `rear`. Required when `rack_position` is set.
        :param pulumi.Input[str] status: Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `inventory`. Defaults to `active`.
        :param pulumi.Input[int] virtual_chassis_id: Required when `virtual_chassis_master` and `virtual_chassis_id` is set.
        :param pulumi.Input[bool] virtual_chassis_master: Required when `virtual_chassis_master` and `virtual_chassis_id` is set.
        """
        pulumi.set(__self__, "device_type_id", device_type_id)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "site_id", site_id)
        if asset_tag is not None:
            pulumi.set(__self__, "asset_tag", asset_tag)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if local_context_data is not None:
            pulumi.set(__self__, "local_context_data", local_context_data)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if platform_id is not None:
            pulumi.set(__self__, "platform_id", platform_id)
        if rack_face is not None:
            pulumi.set(__self__, "rack_face", rack_face)
        if rack_id is not None:
            pulumi.set(__self__, "rack_id", rack_id)
        if rack_position is not None:
            pulumi.set(__self__, "rack_position", rack_position)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if virtual_chassis_id is not None:
            pulumi.set(__self__, "virtual_chassis_id", virtual_chassis_id)
        if virtual_chassis_master is not None:
            pulumi.set(__self__, "virtual_chassis_master", virtual_chassis_master)
        if virtual_chassis_position is not None:
            pulumi.set(__self__, "virtual_chassis_position", virtual_chassis_position)
        if virtual_chassis_priority is not None:
            pulumi.set(__self__, "virtual_chassis_priority", virtual_chassis_priority)

    @property
    @pulumi.getter(name="deviceTypeId")
    def device_type_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "device_type_id")

    @device_type_id.setter
    def device_type_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "device_type_id", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="assetTag")
    def asset_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "asset_tag")

    @asset_tag.setter
    def asset_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset_tag", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_fields", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="localContextData")
    def local_context_data(self) -> Optional[pulumi.Input[str]]:
        """
        This is best managed through the use of `jsonencode` and a map of settings.
        """
        return pulumi.get(self, "local_context_data")

    @local_context_data.setter
    def local_context_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_context_data", value)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "platform_id")

    @platform_id.setter
    def platform_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "platform_id", value)

    @property
    @pulumi.getter(name="rackFace")
    def rack_face(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are `front` and `rear`. Required when `rack_position` is set.
        """
        return pulumi.get(self, "rack_face")

    @rack_face.setter
    def rack_face(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rack_face", value)

    @property
    @pulumi.getter(name="rackId")
    def rack_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rack_id")

    @rack_id.setter
    def rack_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rack_id", value)

    @property
    @pulumi.getter(name="rackPosition")
    def rack_position(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "rack_position")

    @rack_position.setter
    def rack_position(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "rack_position", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `inventory`. Defaults to `active`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="virtualChassisId")
    def virtual_chassis_id(self) -> Optional[pulumi.Input[int]]:
        """
        Required when `virtual_chassis_master` and `virtual_chassis_id` is set.
        """
        return pulumi.get(self, "virtual_chassis_id")

    @virtual_chassis_id.setter
    def virtual_chassis_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "virtual_chassis_id", value)

    @property
    @pulumi.getter(name="virtualChassisMaster")
    def virtual_chassis_master(self) -> Optional[pulumi.Input[bool]]:
        """
        Required when `virtual_chassis_master` and `virtual_chassis_id` is set.
        """
        return pulumi.get(self, "virtual_chassis_master")

    @virtual_chassis_master.setter
    def virtual_chassis_master(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "virtual_chassis_master", value)

    @property
    @pulumi.getter(name="virtualChassisPosition")
    def virtual_chassis_position(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "virtual_chassis_position")

    @virtual_chassis_position.setter
    def virtual_chassis_position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "virtual_chassis_position", value)

    @property
    @pulumi.getter(name="virtualChassisPriority")
    def virtual_chassis_priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "virtual_chassis_priority")

    @virtual_chassis_priority.setter
    def virtual_chassis_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "virtual_chassis_priority", value)


@pulumi.input_type
class _DeviceState:
    def __init__(__self__, *,
                 asset_tag: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[int]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_type_id: Optional[pulumi.Input[int]] = None,
                 local_context_data: Optional[pulumi.Input[str]] = None,
                 location_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 platform_id: Optional[pulumi.Input[int]] = None,
                 primary_ipv4: Optional[pulumi.Input[int]] = None,
                 primary_ipv6: Optional[pulumi.Input[int]] = None,
                 rack_face: Optional[pulumi.Input[str]] = None,
                 rack_id: Optional[pulumi.Input[int]] = None,
                 rack_position: Optional[pulumi.Input[float]] = None,
                 role_id: Optional[pulumi.Input[int]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 site_id: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 virtual_chassis_id: Optional[pulumi.Input[int]] = None,
                 virtual_chassis_master: Optional[pulumi.Input[bool]] = None,
                 virtual_chassis_position: Optional[pulumi.Input[int]] = None,
                 virtual_chassis_priority: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering Device resources.
        :param pulumi.Input[str] local_context_data: This is best managed through the use of `jsonencode` and a map of settings.
        :param pulumi.Input[str] rack_face: Valid values are `front` and `rear`. Required when `rack_position` is set.
        :param pulumi.Input[str] status: Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `inventory`. Defaults to `active`.
        :param pulumi.Input[int] virtual_chassis_id: Required when `virtual_chassis_master` and `virtual_chassis_id` is set.
        :param pulumi.Input[bool] virtual_chassis_master: Required when `virtual_chassis_master` and `virtual_chassis_id` is set.
        """
        if asset_tag is not None:
            pulumi.set(__self__, "asset_tag", asset_tag)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if device_type_id is not None:
            pulumi.set(__self__, "device_type_id", device_type_id)
        if local_context_data is not None:
            pulumi.set(__self__, "local_context_data", local_context_data)
        if location_id is not None:
            pulumi.set(__self__, "location_id", location_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if platform_id is not None:
            pulumi.set(__self__, "platform_id", platform_id)
        if primary_ipv4 is not None:
            pulumi.set(__self__, "primary_ipv4", primary_ipv4)
        if primary_ipv6 is not None:
            pulumi.set(__self__, "primary_ipv6", primary_ipv6)
        if rack_face is not None:
            pulumi.set(__self__, "rack_face", rack_face)
        if rack_id is not None:
            pulumi.set(__self__, "rack_id", rack_id)
        if rack_position is not None:
            pulumi.set(__self__, "rack_position", rack_position)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if serial is not None:
            pulumi.set(__self__, "serial", serial)
        if site_id is not None:
            pulumi.set(__self__, "site_id", site_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if virtual_chassis_id is not None:
            pulumi.set(__self__, "virtual_chassis_id", virtual_chassis_id)
        if virtual_chassis_master is not None:
            pulumi.set(__self__, "virtual_chassis_master", virtual_chassis_master)
        if virtual_chassis_position is not None:
            pulumi.set(__self__, "virtual_chassis_position", virtual_chassis_position)
        if virtual_chassis_priority is not None:
            pulumi.set(__self__, "virtual_chassis_priority", virtual_chassis_priority)

    @property
    @pulumi.getter(name="assetTag")
    def asset_tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "asset_tag")

    @asset_tag.setter
    def asset_tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "asset_tag", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_fields", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="deviceTypeId")
    def device_type_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "device_type_id")

    @device_type_id.setter
    def device_type_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "device_type_id", value)

    @property
    @pulumi.getter(name="localContextData")
    def local_context_data(self) -> Optional[pulumi.Input[str]]:
        """
        This is best managed through the use of `jsonencode` and a map of settings.
        """
        return pulumi.get(self, "local_context_data")

    @local_context_data.setter
    def local_context_data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "local_context_data", value)

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "location_id")

    @location_id.setter
    def location_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "location_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "platform_id")

    @platform_id.setter
    def platform_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "platform_id", value)

    @property
    @pulumi.getter(name="primaryIpv4")
    def primary_ipv4(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "primary_ipv4")

    @primary_ipv4.setter
    def primary_ipv4(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "primary_ipv4", value)

    @property
    @pulumi.getter(name="primaryIpv6")
    def primary_ipv6(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "primary_ipv6")

    @primary_ipv6.setter
    def primary_ipv6(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "primary_ipv6", value)

    @property
    @pulumi.getter(name="rackFace")
    def rack_face(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are `front` and `rear`. Required when `rack_position` is set.
        """
        return pulumi.get(self, "rack_face")

    @rack_face.setter
    def rack_face(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rack_face", value)

    @property
    @pulumi.getter(name="rackId")
    def rack_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rack_id")

    @rack_id.setter
    def rack_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rack_id", value)

    @property
    @pulumi.getter(name="rackPosition")
    def rack_position(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "rack_position")

    @rack_position.setter
    def rack_position(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "rack_position", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter
    def serial(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "serial")

    @serial.setter
    def serial(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `inventory`. Defaults to `active`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="virtualChassisId")
    def virtual_chassis_id(self) -> Optional[pulumi.Input[int]]:
        """
        Required when `virtual_chassis_master` and `virtual_chassis_id` is set.
        """
        return pulumi.get(self, "virtual_chassis_id")

    @virtual_chassis_id.setter
    def virtual_chassis_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "virtual_chassis_id", value)

    @property
    @pulumi.getter(name="virtualChassisMaster")
    def virtual_chassis_master(self) -> Optional[pulumi.Input[bool]]:
        """
        Required when `virtual_chassis_master` and `virtual_chassis_id` is set.
        """
        return pulumi.get(self, "virtual_chassis_master")

    @virtual_chassis_master.setter
    def virtual_chassis_master(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "virtual_chassis_master", value)

    @property
    @pulumi.getter(name="virtualChassisPosition")
    def virtual_chassis_position(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "virtual_chassis_position")

    @virtual_chassis_position.setter
    def virtual_chassis_position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "virtual_chassis_position", value)

    @property
    @pulumi.getter(name="virtualChassisPriority")
    def virtual_chassis_priority(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "virtual_chassis_priority")

    @virtual_chassis_priority.setter
    def virtual_chassis_priority(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "virtual_chassis_priority", value)


class Device(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asset_tag: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[int]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_type_id: Optional[pulumi.Input[int]] = None,
                 local_context_data: Optional[pulumi.Input[str]] = None,
                 location_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 platform_id: Optional[pulumi.Input[int]] = None,
                 rack_face: Optional[pulumi.Input[str]] = None,
                 rack_id: Optional[pulumi.Input[int]] = None,
                 rack_position: Optional[pulumi.Input[float]] = None,
                 role_id: Optional[pulumi.Input[int]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 site_id: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 virtual_chassis_id: Optional[pulumi.Input[int]] = None,
                 virtual_chassis_master: Optional[pulumi.Input[bool]] = None,
                 virtual_chassis_position: Optional[pulumi.Input[int]] = None,
                 virtual_chassis_priority: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/features/devices/#devices):

        > Every piece of hardware which is installed within a site or rack exists in NetBox as a device. Devices are measured in rack units (U) and can be half depth or full depth. A device may have a height of 0U: These devices do not consume vertical rack space and cannot be assigned to a particular rack unit. A common example of a 0U device is a vertically-mounted PDU.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import spk_pulumi_netbox as netbox

        test_site = netbox.Site("testSite")
        test_device_role = netbox.DeviceRole("testDeviceRole", color_hex="123456")
        test_manufacturer = netbox.Manufacturer("testManufacturer")
        test_device_type = netbox.DeviceType("testDeviceType",
            model="test",
            manufacturer_id=test_manufacturer.id)
        test_device = netbox.Device("testDevice",
            device_type_id=test_device_type.id,
            role_id=test_device_role.id,
            site_id=test_site.id,
            local_context_data=json.dumps({
                "setting_a": "Some Setting",
                "setting_b": 42,
            }))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] local_context_data: This is best managed through the use of `jsonencode` and a map of settings.
        :param pulumi.Input[str] rack_face: Valid values are `front` and `rear`. Required when `rack_position` is set.
        :param pulumi.Input[str] status: Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `inventory`. Defaults to `active`.
        :param pulumi.Input[int] virtual_chassis_id: Required when `virtual_chassis_master` and `virtual_chassis_id` is set.
        :param pulumi.Input[bool] virtual_chassis_master: Required when `virtual_chassis_master` and `virtual_chassis_id` is set.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DeviceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/features/devices/#devices):

        > Every piece of hardware which is installed within a site or rack exists in NetBox as a device. Devices are measured in rack units (U) and can be half depth or full depth. A device may have a height of 0U: These devices do not consume vertical rack space and cannot be assigned to a particular rack unit. A common example of a 0U device is a vertically-mounted PDU.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import spk_pulumi_netbox as netbox

        test_site = netbox.Site("testSite")
        test_device_role = netbox.DeviceRole("testDeviceRole", color_hex="123456")
        test_manufacturer = netbox.Manufacturer("testManufacturer")
        test_device_type = netbox.DeviceType("testDeviceType",
            model="test",
            manufacturer_id=test_manufacturer.id)
        test_device = netbox.Device("testDevice",
            device_type_id=test_device_type.id,
            role_id=test_device_role.id,
            site_id=test_site.id,
            local_context_data=json.dumps({
                "setting_a": "Some Setting",
                "setting_b": 42,
            }))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param DeviceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DeviceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 asset_tag: Optional[pulumi.Input[str]] = None,
                 cluster_id: Optional[pulumi.Input[int]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 device_type_id: Optional[pulumi.Input[int]] = None,
                 local_context_data: Optional[pulumi.Input[str]] = None,
                 location_id: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 platform_id: Optional[pulumi.Input[int]] = None,
                 rack_face: Optional[pulumi.Input[str]] = None,
                 rack_id: Optional[pulumi.Input[int]] = None,
                 rack_position: Optional[pulumi.Input[float]] = None,
                 role_id: Optional[pulumi.Input[int]] = None,
                 serial: Optional[pulumi.Input[str]] = None,
                 site_id: Optional[pulumi.Input[int]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 virtual_chassis_id: Optional[pulumi.Input[int]] = None,
                 virtual_chassis_master: Optional[pulumi.Input[bool]] = None,
                 virtual_chassis_position: Optional[pulumi.Input[int]] = None,
                 virtual_chassis_priority: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DeviceArgs.__new__(DeviceArgs)

            __props__.__dict__["asset_tag"] = asset_tag
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["comments"] = comments
            __props__.__dict__["custom_fields"] = custom_fields
            __props__.__dict__["description"] = description
            if device_type_id is None and not opts.urn:
                raise TypeError("Missing required property 'device_type_id'")
            __props__.__dict__["device_type_id"] = device_type_id
            __props__.__dict__["local_context_data"] = local_context_data
            __props__.__dict__["location_id"] = location_id
            __props__.__dict__["name"] = name
            __props__.__dict__["platform_id"] = platform_id
            __props__.__dict__["rack_face"] = rack_face
            __props__.__dict__["rack_id"] = rack_id
            __props__.__dict__["rack_position"] = rack_position
            if role_id is None and not opts.urn:
                raise TypeError("Missing required property 'role_id'")
            __props__.__dict__["role_id"] = role_id
            __props__.__dict__["serial"] = serial
            if site_id is None and not opts.urn:
                raise TypeError("Missing required property 'site_id'")
            __props__.__dict__["site_id"] = site_id
            __props__.__dict__["status"] = status
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["virtual_chassis_id"] = virtual_chassis_id
            __props__.__dict__["virtual_chassis_master"] = virtual_chassis_master
            __props__.__dict__["virtual_chassis_position"] = virtual_chassis_position
            __props__.__dict__["virtual_chassis_priority"] = virtual_chassis_priority
            __props__.__dict__["primary_ipv4"] = None
            __props__.__dict__["primary_ipv6"] = None
        super(Device, __self__).__init__(
            'netbox:index/device:Device',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            asset_tag: Optional[pulumi.Input[str]] = None,
            cluster_id: Optional[pulumi.Input[int]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            device_type_id: Optional[pulumi.Input[int]] = None,
            local_context_data: Optional[pulumi.Input[str]] = None,
            location_id: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            platform_id: Optional[pulumi.Input[int]] = None,
            primary_ipv4: Optional[pulumi.Input[int]] = None,
            primary_ipv6: Optional[pulumi.Input[int]] = None,
            rack_face: Optional[pulumi.Input[str]] = None,
            rack_id: Optional[pulumi.Input[int]] = None,
            rack_position: Optional[pulumi.Input[float]] = None,
            role_id: Optional[pulumi.Input[int]] = None,
            serial: Optional[pulumi.Input[str]] = None,
            site_id: Optional[pulumi.Input[int]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tenant_id: Optional[pulumi.Input[int]] = None,
            virtual_chassis_id: Optional[pulumi.Input[int]] = None,
            virtual_chassis_master: Optional[pulumi.Input[bool]] = None,
            virtual_chassis_position: Optional[pulumi.Input[int]] = None,
            virtual_chassis_priority: Optional[pulumi.Input[int]] = None) -> 'Device':
        """
        Get an existing Device resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] local_context_data: This is best managed through the use of `jsonencode` and a map of settings.
        :param pulumi.Input[str] rack_face: Valid values are `front` and `rear`. Required when `rack_position` is set.
        :param pulumi.Input[str] status: Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `inventory`. Defaults to `active`.
        :param pulumi.Input[int] virtual_chassis_id: Required when `virtual_chassis_master` and `virtual_chassis_id` is set.
        :param pulumi.Input[bool] virtual_chassis_master: Required when `virtual_chassis_master` and `virtual_chassis_id` is set.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DeviceState.__new__(_DeviceState)

        __props__.__dict__["asset_tag"] = asset_tag
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["comments"] = comments
        __props__.__dict__["custom_fields"] = custom_fields
        __props__.__dict__["description"] = description
        __props__.__dict__["device_type_id"] = device_type_id
        __props__.__dict__["local_context_data"] = local_context_data
        __props__.__dict__["location_id"] = location_id
        __props__.__dict__["name"] = name
        __props__.__dict__["platform_id"] = platform_id
        __props__.__dict__["primary_ipv4"] = primary_ipv4
        __props__.__dict__["primary_ipv6"] = primary_ipv6
        __props__.__dict__["rack_face"] = rack_face
        __props__.__dict__["rack_id"] = rack_id
        __props__.__dict__["rack_position"] = rack_position
        __props__.__dict__["role_id"] = role_id
        __props__.__dict__["serial"] = serial
        __props__.__dict__["site_id"] = site_id
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["virtual_chassis_id"] = virtual_chassis_id
        __props__.__dict__["virtual_chassis_master"] = virtual_chassis_master
        __props__.__dict__["virtual_chassis_position"] = virtual_chassis_position
        __props__.__dict__["virtual_chassis_priority"] = virtual_chassis_priority
        return Device(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assetTag")
    def asset_tag(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "asset_tag")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "custom_fields")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="deviceTypeId")
    def device_type_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "device_type_id")

    @property
    @pulumi.getter(name="localContextData")
    def local_context_data(self) -> pulumi.Output[Optional[str]]:
        """
        This is best managed through the use of `jsonencode` and a map of settings.
        """
        return pulumi.get(self, "local_context_data")

    @property
    @pulumi.getter(name="locationId")
    def location_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "location_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "platform_id")

    @property
    @pulumi.getter(name="primaryIpv4")
    def primary_ipv4(self) -> pulumi.Output[int]:
        return pulumi.get(self, "primary_ipv4")

    @property
    @pulumi.getter(name="primaryIpv6")
    def primary_ipv6(self) -> pulumi.Output[int]:
        return pulumi.get(self, "primary_ipv6")

    @property
    @pulumi.getter(name="rackFace")
    def rack_face(self) -> pulumi.Output[Optional[str]]:
        """
        Valid values are `front` and `rear`. Required when `rack_position` is set.
        """
        return pulumi.get(self, "rack_face")

    @property
    @pulumi.getter(name="rackId")
    def rack_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "rack_id")

    @property
    @pulumi.getter(name="rackPosition")
    def rack_position(self) -> pulumi.Output[Optional[float]]:
        return pulumi.get(self, "rack_position")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter
    def serial(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "serial")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[str]]:
        """
        Valid values are `offline`, `active`, `planned`, `staged`, `failed` and `inventory`. Defaults to `active`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter(name="virtualChassisId")
    def virtual_chassis_id(self) -> pulumi.Output[Optional[int]]:
        """
        Required when `virtual_chassis_master` and `virtual_chassis_id` is set.
        """
        return pulumi.get(self, "virtual_chassis_id")

    @property
    @pulumi.getter(name="virtualChassisMaster")
    def virtual_chassis_master(self) -> pulumi.Output[Optional[bool]]:
        """
        Required when `virtual_chassis_master` and `virtual_chassis_id` is set.
        """
        return pulumi.get(self, "virtual_chassis_master")

    @property
    @pulumi.getter(name="virtualChassisPosition")
    def virtual_chassis_position(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "virtual_chassis_position")

    @property
    @pulumi.getter(name="virtualChassisPriority")
    def virtual_chassis_priority(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "virtual_chassis_priority")

