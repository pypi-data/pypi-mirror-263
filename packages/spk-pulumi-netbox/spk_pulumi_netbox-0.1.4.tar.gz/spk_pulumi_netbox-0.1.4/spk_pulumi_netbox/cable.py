# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CableArgs', 'Cable']

@pulumi.input_type
class CableArgs:
    def __init__(__self__, *,
                 a_terminations: pulumi.Input[Sequence[pulumi.Input['CableATerminationArgs']]],
                 b_terminations: pulumi.Input[Sequence[pulumi.Input['CableBTerminationArgs']]],
                 status: pulumi.Input[str],
                 color_hex: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 length: Optional[pulumi.Input[float]] = None,
                 length_unit: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Cable resource.
        :param pulumi.Input[str] status: One of [connected, planned, decommissioning].
        :param pulumi.Input[str] length_unit: One of [km, m, cm, mi, ft, in]. Required when `length` is set.
        :param pulumi.Input[str] type: One of [cat3, cat5, cat5e, cat6, cat6a, cat7, cat7a, cat8, dac-active, dac-passive, mrj21-trunk, coaxial, mmf, mmf-om1, mmf-om2, mmf-om3, mmf-om4, mmf-om5, smf, smf-os1, smf-os2, aoc, power].
        """
        pulumi.set(__self__, "a_terminations", a_terminations)
        pulumi.set(__self__, "b_terminations", b_terminations)
        pulumi.set(__self__, "status", status)
        if color_hex is not None:
            pulumi.set(__self__, "color_hex", color_hex)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if length_unit is not None:
            pulumi.set(__self__, "length_unit", length_unit)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="aTerminations")
    def a_terminations(self) -> pulumi.Input[Sequence[pulumi.Input['CableATerminationArgs']]]:
        return pulumi.get(self, "a_terminations")

    @a_terminations.setter
    def a_terminations(self, value: pulumi.Input[Sequence[pulumi.Input['CableATerminationArgs']]]):
        pulumi.set(self, "a_terminations", value)

    @property
    @pulumi.getter(name="bTerminations")
    def b_terminations(self) -> pulumi.Input[Sequence[pulumi.Input['CableBTerminationArgs']]]:
        return pulumi.get(self, "b_terminations")

    @b_terminations.setter
    def b_terminations(self, value: pulumi.Input[Sequence[pulumi.Input['CableBTerminationArgs']]]):
        pulumi.set(self, "b_terminations", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        One of [connected, planned, decommissioning].
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="colorHex")
    def color_hex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color_hex")

    @color_hex.setter
    def color_hex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_hex", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_fields", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter(name="lengthUnit")
    def length_unit(self) -> Optional[pulumi.Input[str]]:
        """
        One of [km, m, cm, mi, ft, in]. Required when `length` is set.
        """
        return pulumi.get(self, "length_unit")

    @length_unit.setter
    def length_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "length_unit", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        One of [cat3, cat5, cat5e, cat6, cat6a, cat7, cat7a, cat8, dac-active, dac-passive, mrj21-trunk, coaxial, mmf, mmf-om1, mmf-om2, mmf-om3, mmf-om4, mmf-om5, smf, smf-os1, smf-os2, aoc, power].
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _CableState:
    def __init__(__self__, *,
                 a_terminations: Optional[pulumi.Input[Sequence[pulumi.Input['CableATerminationArgs']]]] = None,
                 b_terminations: Optional[pulumi.Input[Sequence[pulumi.Input['CableBTerminationArgs']]]] = None,
                 color_hex: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 length: Optional[pulumi.Input[float]] = None,
                 length_unit: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Cable resources.
        :param pulumi.Input[str] length_unit: One of [km, m, cm, mi, ft, in]. Required when `length` is set.
        :param pulumi.Input[str] status: One of [connected, planned, decommissioning].
        :param pulumi.Input[str] type: One of [cat3, cat5, cat5e, cat6, cat6a, cat7, cat7a, cat8, dac-active, dac-passive, mrj21-trunk, coaxial, mmf, mmf-om1, mmf-om2, mmf-om3, mmf-om4, mmf-om5, smf, smf-os1, smf-os2, aoc, power].
        """
        if a_terminations is not None:
            pulumi.set(__self__, "a_terminations", a_terminations)
        if b_terminations is not None:
            pulumi.set(__self__, "b_terminations", b_terminations)
        if color_hex is not None:
            pulumi.set(__self__, "color_hex", color_hex)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if label is not None:
            pulumi.set(__self__, "label", label)
        if length is not None:
            pulumi.set(__self__, "length", length)
        if length_unit is not None:
            pulumi.set(__self__, "length_unit", length_unit)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="aTerminations")
    def a_terminations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CableATerminationArgs']]]]:
        return pulumi.get(self, "a_terminations")

    @a_terminations.setter
    def a_terminations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CableATerminationArgs']]]]):
        pulumi.set(self, "a_terminations", value)

    @property
    @pulumi.getter(name="bTerminations")
    def b_terminations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CableBTerminationArgs']]]]:
        return pulumi.get(self, "b_terminations")

    @b_terminations.setter
    def b_terminations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CableBTerminationArgs']]]]):
        pulumi.set(self, "b_terminations", value)

    @property
    @pulumi.getter(name="colorHex")
    def color_hex(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color_hex")

    @color_hex.setter
    def color_hex(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color_hex", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_fields", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def label(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "label")

    @label.setter
    def label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "label", value)

    @property
    @pulumi.getter
    def length(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "length")

    @length.setter
    def length(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "length", value)

    @property
    @pulumi.getter(name="lengthUnit")
    def length_unit(self) -> Optional[pulumi.Input[str]]:
        """
        One of [km, m, cm, mi, ft, in]. Required when `length` is set.
        """
        return pulumi.get(self, "length_unit")

    @length_unit.setter
    def length_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "length_unit", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        One of [connected, planned, decommissioning].
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        One of [cat3, cat5, cat5e, cat6, cat6a, cat7, cat7a, cat8, dac-active, dac-passive, mrj21-trunk, coaxial, mmf, mmf-om1, mmf-om2, mmf-om3, mmf-om4, mmf-om5, smf, smf-os1, smf-os2, aoc, power].
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class Cable(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 a_terminations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CableATerminationArgs']]]]] = None,
                 b_terminations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CableBTerminationArgs']]]]] = None,
                 color_hex: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 length: Optional[pulumi.Input[float]] = None,
                 length_unit: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/cable/):

        > All connections between device components in NetBox are represented using cables. A cable represents a direct physical connection between two sets of endpoints (A and B), such as a console port and a patch panel port, or between two network interfaces.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        # assumes that the referenced console port resources exist
        test = netbox.Cable("test",
            a_terminations=[
                netbox.CableATerminationArgs(
                    object_type="dcim.consoleserverport",
                    object_id=netbox_device_console_server_port["kvm1"]["id"],
                ),
                netbox.CableATerminationArgs(
                    object_type="dcim.consoleserverport",
                    object_id=netbox_device_console_server_port["kvm2"]["id"],
                ),
            ],
            b_terminations=[
                netbox.CableBTerminationArgs(
                    object_type="dcim.consoleport",
                    object_id=netbox_device_console_port["server1"]["id"],
                ),
                netbox.CableBTerminationArgs(
                    object_type="dcim.consoleport",
                    object_id=netbox_device_console_port["server2"]["id"],
                ),
            ],
            status="connected",
            label="KVM cable",
            type="cat8",
            color_hex="123456",
            length=10,
            length_unit="m")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] length_unit: One of [km, m, cm, mi, ft, in]. Required when `length` is set.
        :param pulumi.Input[str] status: One of [connected, planned, decommissioning].
        :param pulumi.Input[str] type: One of [cat3, cat5, cat5e, cat6, cat6a, cat7, cat7a, cat8, dac-active, dac-passive, mrj21-trunk, coaxial, mmf, mmf-om1, mmf-om2, mmf-om3, mmf-om4, mmf-om5, smf, smf-os1, smf-os2, aoc, power].
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CableArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/cable/):

        > All connections between device components in NetBox are represented using cables. A cable represents a direct physical connection between two sets of endpoints (A and B), such as a console port and a patch panel port, or between two network interfaces.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        # assumes that the referenced console port resources exist
        test = netbox.Cable("test",
            a_terminations=[
                netbox.CableATerminationArgs(
                    object_type="dcim.consoleserverport",
                    object_id=netbox_device_console_server_port["kvm1"]["id"],
                ),
                netbox.CableATerminationArgs(
                    object_type="dcim.consoleserverport",
                    object_id=netbox_device_console_server_port["kvm2"]["id"],
                ),
            ],
            b_terminations=[
                netbox.CableBTerminationArgs(
                    object_type="dcim.consoleport",
                    object_id=netbox_device_console_port["server1"]["id"],
                ),
                netbox.CableBTerminationArgs(
                    object_type="dcim.consoleport",
                    object_id=netbox_device_console_port["server2"]["id"],
                ),
            ],
            status="connected",
            label="KVM cable",
            type="cat8",
            color_hex="123456",
            length=10,
            length_unit="m")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param CableArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CableArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 a_terminations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CableATerminationArgs']]]]] = None,
                 b_terminations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CableBTerminationArgs']]]]] = None,
                 color_hex: Optional[pulumi.Input[str]] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 label: Optional[pulumi.Input[str]] = None,
                 length: Optional[pulumi.Input[float]] = None,
                 length_unit: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tenant_id: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CableArgs.__new__(CableArgs)

            if a_terminations is None and not opts.urn:
                raise TypeError("Missing required property 'a_terminations'")
            __props__.__dict__["a_terminations"] = a_terminations
            if b_terminations is None and not opts.urn:
                raise TypeError("Missing required property 'b_terminations'")
            __props__.__dict__["b_terminations"] = b_terminations
            __props__.__dict__["color_hex"] = color_hex
            __props__.__dict__["comments"] = comments
            __props__.__dict__["custom_fields"] = custom_fields
            __props__.__dict__["description"] = description
            __props__.__dict__["label"] = label
            __props__.__dict__["length"] = length
            __props__.__dict__["length_unit"] = length_unit
            if status is None and not opts.urn:
                raise TypeError("Missing required property 'status'")
            __props__.__dict__["status"] = status
            __props__.__dict__["tags"] = tags
            __props__.__dict__["tenant_id"] = tenant_id
            __props__.__dict__["type"] = type
        super(Cable, __self__).__init__(
            'netbox:index/cable:Cable',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            a_terminations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CableATerminationArgs']]]]] = None,
            b_terminations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CableBTerminationArgs']]]]] = None,
            color_hex: Optional[pulumi.Input[str]] = None,
            comments: Optional[pulumi.Input[str]] = None,
            custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            label: Optional[pulumi.Input[str]] = None,
            length: Optional[pulumi.Input[float]] = None,
            length_unit: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            tenant_id: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'Cable':
        """
        Get an existing Cable resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] length_unit: One of [km, m, cm, mi, ft, in]. Required when `length` is set.
        :param pulumi.Input[str] status: One of [connected, planned, decommissioning].
        :param pulumi.Input[str] type: One of [cat3, cat5, cat5e, cat6, cat6a, cat7, cat7a, cat8, dac-active, dac-passive, mrj21-trunk, coaxial, mmf, mmf-om1, mmf-om2, mmf-om3, mmf-om4, mmf-om5, smf, smf-os1, smf-os2, aoc, power].
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CableState.__new__(_CableState)

        __props__.__dict__["a_terminations"] = a_terminations
        __props__.__dict__["b_terminations"] = b_terminations
        __props__.__dict__["color_hex"] = color_hex
        __props__.__dict__["comments"] = comments
        __props__.__dict__["custom_fields"] = custom_fields
        __props__.__dict__["description"] = description
        __props__.__dict__["label"] = label
        __props__.__dict__["length"] = length
        __props__.__dict__["length_unit"] = length_unit
        __props__.__dict__["status"] = status
        __props__.__dict__["tags"] = tags
        __props__.__dict__["tenant_id"] = tenant_id
        __props__.__dict__["type"] = type
        return Cable(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="aTerminations")
    def a_terminations(self) -> pulumi.Output[Sequence['outputs.CableATermination']]:
        return pulumi.get(self, "a_terminations")

    @property
    @pulumi.getter(name="bTerminations")
    def b_terminations(self) -> pulumi.Output[Sequence['outputs.CableBTermination']]:
        return pulumi.get(self, "b_terminations")

    @property
    @pulumi.getter(name="colorHex")
    def color_hex(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "color_hex")

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "custom_fields")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def label(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "label")

    @property
    @pulumi.getter
    def length(self) -> pulumi.Output[Optional[float]]:
        return pulumi.get(self, "length")

    @property
    @pulumi.getter(name="lengthUnit")
    def length_unit(self) -> pulumi.Output[Optional[str]]:
        """
        One of [km, m, cm, mi, ft, in]. Required when `length` is set.
        """
        return pulumi.get(self, "length_unit")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        One of [connected, planned, decommissioning].
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "tenant_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        One of [cat3, cat5, cat5e, cat6, cat6a, cat7, cat7a, cat8, dac-active, dac-passive, mrj21-trunk, coaxial, mmf, mmf-om1, mmf-om2, mmf-om3, mmf-om4, mmf-om5, smf, smf-os1, smf-os2, aoc, power].
        """
        return pulumi.get(self, "type")

