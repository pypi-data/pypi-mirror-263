# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ModuleTypeArgs', 'ModuleType']

@pulumi.input_type
class ModuleTypeArgs:
    def __init__(__self__, *,
                 manufacturer_id: pulumi.Input[int],
                 model: pulumi.Input[str],
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 part_number: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 weight: Optional[pulumi.Input[float]] = None,
                 weight_unit: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ModuleType resource.
        :param pulumi.Input[str] weight_unit: One of [kg, g, lb, oz]. Required when `weight` is set.
        """
        pulumi.set(__self__, "manufacturer_id", manufacturer_id)
        pulumi.set(__self__, "model", model)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_unit is not None:
            pulumi.set(__self__, "weight_unit", weight_unit)

    @property
    @pulumi.getter(name="manufacturerId")
    def manufacturer_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "manufacturer_id")

    @manufacturer_id.setter
    def manufacturer_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "manufacturer_id", value)

    @property
    @pulumi.getter
    def model(self) -> pulumi.Input[str]:
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: pulumi.Input[str]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_fields", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "part_number")

    @part_number.setter
    def part_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "part_number", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "weight", value)

    @property
    @pulumi.getter(name="weightUnit")
    def weight_unit(self) -> Optional[pulumi.Input[str]]:
        """
        One of [kg, g, lb, oz]. Required when `weight` is set.
        """
        return pulumi.get(self, "weight_unit")

    @weight_unit.setter
    def weight_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "weight_unit", value)


@pulumi.input_type
class _ModuleTypeState:
    def __init__(__self__, *,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 manufacturer_id: Optional[pulumi.Input[int]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 part_number: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 weight: Optional[pulumi.Input[float]] = None,
                 weight_unit: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ModuleType resources.
        :param pulumi.Input[str] weight_unit: One of [kg, g, lb, oz]. Required when `weight` is set.
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if custom_fields is not None:
            pulumi.set(__self__, "custom_fields", custom_fields)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if manufacturer_id is not None:
            pulumi.set(__self__, "manufacturer_id", manufacturer_id)
        if model is not None:
            pulumi.set(__self__, "model", model)
        if part_number is not None:
            pulumi.set(__self__, "part_number", part_number)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)
        if weight_unit is not None:
            pulumi.set(__self__, "weight_unit", weight_unit)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "custom_fields")

    @custom_fields.setter
    def custom_fields(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "custom_fields", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="manufacturerId")
    def manufacturer_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "manufacturer_id")

    @manufacturer_id.setter
    def manufacturer_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "manufacturer_id", value)

    @property
    @pulumi.getter
    def model(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "model")

    @model.setter
    def model(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "model", value)

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "part_number")

    @part_number.setter
    def part_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "part_number", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def weight(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "weight", value)

    @property
    @pulumi.getter(name="weightUnit")
    def weight_unit(self) -> Optional[pulumi.Input[str]]:
        """
        One of [kg, g, lb, oz]. Required when `weight` is set.
        """
        return pulumi.get(self, "weight_unit")

    @weight_unit.setter
    def weight_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "weight_unit", value)


class ModuleType(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 manufacturer_id: Optional[pulumi.Input[int]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 part_number: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 weight: Optional[pulumi.Input[float]] = None,
                 weight_unit: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/moduletype/):

        > A module type represents a specific make and model of hardware component which is installable within a device's module bay and has its own child components. For example, consider a chassis-based switch or router with a number of field-replaceable line cards. Each line card has its own model number and includes a certain set of components such as interfaces. Each module type may have a manufacturer, model number, and part number assigned to it.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        test_manufacturer = netbox.Manufacturer("testManufacturer")
        test_module_type = netbox.ModuleType("testModuleType",
            manufacturer_id=test_manufacturer.id,
            model="Networking")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] weight_unit: One of [kg, g, lb, oz]. Required when `weight` is set.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ModuleTypeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        From the [official documentation](https://docs.netbox.dev/en/stable/models/dcim/moduletype/):

        > A module type represents a specific make and model of hardware component which is installable within a device's module bay and has its own child components. For example, consider a chassis-based switch or router with a number of field-replaceable line cards. Each line card has its own model number and includes a certain set of components such as interfaces. Each module type may have a manufacturer, model number, and part number assigned to it.

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import spk_pulumi_netbox as netbox

        test_manufacturer = netbox.Manufacturer("testManufacturer")
        test_module_type = netbox.ModuleType("testModuleType",
            manufacturer_id=test_manufacturer.id,
            model="Networking")
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param ModuleTypeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ModuleTypeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 manufacturer_id: Optional[pulumi.Input[int]] = None,
                 model: Optional[pulumi.Input[str]] = None,
                 part_number: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 weight: Optional[pulumi.Input[float]] = None,
                 weight_unit: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ModuleTypeArgs.__new__(ModuleTypeArgs)

            __props__.__dict__["comments"] = comments
            __props__.__dict__["custom_fields"] = custom_fields
            __props__.__dict__["description"] = description
            if manufacturer_id is None and not opts.urn:
                raise TypeError("Missing required property 'manufacturer_id'")
            __props__.__dict__["manufacturer_id"] = manufacturer_id
            if model is None and not opts.urn:
                raise TypeError("Missing required property 'model'")
            __props__.__dict__["model"] = model
            __props__.__dict__["part_number"] = part_number
            __props__.__dict__["tags"] = tags
            __props__.__dict__["weight"] = weight
            __props__.__dict__["weight_unit"] = weight_unit
        super(ModuleType, __self__).__init__(
            'netbox:index/moduleType:ModuleType',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comments: Optional[pulumi.Input[str]] = None,
            custom_fields: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            manufacturer_id: Optional[pulumi.Input[int]] = None,
            model: Optional[pulumi.Input[str]] = None,
            part_number: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            weight: Optional[pulumi.Input[float]] = None,
            weight_unit: Optional[pulumi.Input[str]] = None) -> 'ModuleType':
        """
        Get an existing ModuleType resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] weight_unit: One of [kg, g, lb, oz]. Required when `weight` is set.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ModuleTypeState.__new__(_ModuleTypeState)

        __props__.__dict__["comments"] = comments
        __props__.__dict__["custom_fields"] = custom_fields
        __props__.__dict__["description"] = description
        __props__.__dict__["manufacturer_id"] = manufacturer_id
        __props__.__dict__["model"] = model
        __props__.__dict__["part_number"] = part_number
        __props__.__dict__["tags"] = tags
        __props__.__dict__["weight"] = weight
        __props__.__dict__["weight_unit"] = weight_unit
        return ModuleType(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "custom_fields")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="manufacturerId")
    def manufacturer_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "manufacturer_id")

    @property
    @pulumi.getter
    def model(self) -> pulumi.Output[str]:
        return pulumi.get(self, "model")

    @property
    @pulumi.getter(name="partNumber")
    def part_number(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "part_number")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Sequence[str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Output[Optional[float]]:
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter(name="weightUnit")
    def weight_unit(self) -> pulumi.Output[Optional[str]]:
        """
        One of [kg, g, lb, oz]. Required when `weight` is set.
        """
        return pulumi.get(self, "weight_unit")

