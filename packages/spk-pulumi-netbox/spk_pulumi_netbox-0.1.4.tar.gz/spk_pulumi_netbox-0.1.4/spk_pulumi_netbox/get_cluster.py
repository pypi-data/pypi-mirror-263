# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetClusterResult',
    'AwaitableGetClusterResult',
    'get_cluster',
    'get_cluster_output',
]

@pulumi.output_type
class GetClusterResult:
    """
    A collection of values returned by getCluster.
    """
    def __init__(__self__, cluster_group_id=None, cluster_id=None, cluster_type_id=None, comments=None, custom_fields=None, description=None, id=None, name=None, site_id=None, tags=None):
        if cluster_group_id and not isinstance(cluster_group_id, int):
            raise TypeError("Expected argument 'cluster_group_id' to be a int")
        pulumi.set(__self__, "cluster_group_id", cluster_group_id)
        if cluster_id and not isinstance(cluster_id, int):
            raise TypeError("Expected argument 'cluster_id' to be a int")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_type_id and not isinstance(cluster_type_id, int):
            raise TypeError("Expected argument 'cluster_type_id' to be a int")
        pulumi.set(__self__, "cluster_type_id", cluster_type_id)
        if comments and not isinstance(comments, str):
            raise TypeError("Expected argument 'comments' to be a str")
        pulumi.set(__self__, "comments", comments)
        if custom_fields and not isinstance(custom_fields, dict):
            raise TypeError("Expected argument 'custom_fields' to be a dict")
        pulumi.set(__self__, "custom_fields", custom_fields)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if site_id and not isinstance(site_id, int):
            raise TypeError("Expected argument 'site_id' to be a int")
        pulumi.set(__self__, "site_id", site_id)
        if tags and not isinstance(tags, list):
            raise TypeError("Expected argument 'tags' to be a list")
        pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="clusterGroupId")
    def cluster_group_id(self) -> int:
        return pulumi.get(self, "cluster_group_id")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> int:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterTypeId")
    def cluster_type_id(self) -> int:
        return pulumi.get(self, "cluster_type_id")

    @property
    @pulumi.getter
    def comments(self) -> str:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter(name="customFields")
    def custom_fields(self) -> Mapping[str, Any]:
        return pulumi.get(self, "custom_fields")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        At least one of `name`, `site_id` or `id` must be given.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        At least one of `name`, `site_id` or `id` must be given.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> int:
        """
        At least one of `name`, `site_id` or `id` must be given.
        """
        return pulumi.get(self, "site_id")

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")


class AwaitableGetClusterResult(GetClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterResult(
            cluster_group_id=self.cluster_group_id,
            cluster_id=self.cluster_id,
            cluster_type_id=self.cluster_type_id,
            comments=self.comments,
            custom_fields=self.custom_fields,
            description=self.description,
            id=self.id,
            name=self.name,
            site_id=self.site_id,
            tags=self.tags)


def get_cluster(cluster_group_id: Optional[int] = None,
                id: Optional[str] = None,
                name: Optional[str] = None,
                site_id: Optional[int] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterResult:
    """
    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_netbox as netbox

    vmw_cluster01 = netbox.get_cluster(name="vmw-cluster-01")
    ```
    <!--End PulumiCodeChooser -->


    :param str id: At least one of `name`, `site_id` or `id` must be given.
    :param str name: At least one of `name`, `site_id` or `id` must be given.
    :param int site_id: At least one of `name`, `site_id` or `id` must be given.
    """
    __args__ = dict()
    __args__['clusterGroupId'] = cluster_group_id
    __args__['id'] = id
    __args__['name'] = name
    __args__['siteId'] = site_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('netbox:index/getCluster:getCluster', __args__, opts=opts, typ=GetClusterResult).value

    return AwaitableGetClusterResult(
        cluster_group_id=pulumi.get(__ret__, 'cluster_group_id'),
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        cluster_type_id=pulumi.get(__ret__, 'cluster_type_id'),
        comments=pulumi.get(__ret__, 'comments'),
        custom_fields=pulumi.get(__ret__, 'custom_fields'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        site_id=pulumi.get(__ret__, 'site_id'),
        tags=pulumi.get(__ret__, 'tags'))


@_utilities.lift_output_func(get_cluster)
def get_cluster_output(cluster_group_id: Optional[pulumi.Input[Optional[int]]] = None,
                       id: Optional[pulumi.Input[Optional[str]]] = None,
                       name: Optional[pulumi.Input[Optional[str]]] = None,
                       site_id: Optional[pulumi.Input[Optional[int]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetClusterResult]:
    """
    ## Example Usage

    <!--Start PulumiCodeChooser -->
    ```python
    import pulumi
    import pulumi_netbox as netbox

    vmw_cluster01 = netbox.get_cluster(name="vmw-cluster-01")
    ```
    <!--End PulumiCodeChooser -->


    :param str id: At least one of `name`, `site_id` or `id` must be given.
    :param str name: At least one of `name`, `site_id` or `id` must be given.
    :param int site_id: At least one of `name`, `site_id` or `id` must be given.
    """
    ...
