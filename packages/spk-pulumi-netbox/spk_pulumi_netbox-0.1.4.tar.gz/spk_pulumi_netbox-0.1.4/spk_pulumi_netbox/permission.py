# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PermissionArgs', 'Permission']

@pulumi.input_type
class PermissionArgs:
    def __init__(__self__, *,
                 actions: pulumi.Input[Sequence[pulumi.Input[str]]],
                 object_types: pulumi.Input[Sequence[pulumi.Input[str]]],
                 constraints: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        The set of arguments for constructing a Permission resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] object_types: A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.
        :param pulumi.Input[str] constraints: A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.
        :param pulumi.Input[str] description: The description of the permission object.
        :param pulumi.Input[bool] enabled: Whether the permission object is enabled or not. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] groups: A list of group IDs that have been assigned to this permission object.
        :param pulumi.Input[str] name: The name of the permission object.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] users: A list of user IDs that have been assigned to this permission object.
        """
        pulumi.set(__self__, "actions", actions)
        pulumi.set(__self__, "object_types", object_types)
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter(name="objectTypes")
    def object_types(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.
        """
        return pulumi.get(self, "object_types")

    @object_types.setter
    def object_types(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "object_types", value)

    @property
    @pulumi.getter
    def constraints(self) -> Optional[pulumi.Input[str]]:
        """
        A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.
        """
        return pulumi.get(self, "constraints")

    @constraints.setter
    def constraints(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "constraints", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the permission object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the permission object is enabled or not. Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of group IDs that have been assigned to this permission object.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the permission object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of user IDs that have been assigned to this permission object.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class _PermissionState:
    def __init__(__self__, *,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 constraints: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None):
        """
        Input properties used for looking up and filtering Permission resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.
        :param pulumi.Input[str] constraints: A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.
        :param pulumi.Input[str] description: The description of the permission object.
        :param pulumi.Input[bool] enabled: Whether the permission object is enabled or not. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] groups: A list of group IDs that have been assigned to this permission object.
        :param pulumi.Input[str] name: The name of the permission object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] object_types: A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] users: A list of user IDs that have been assigned to this permission object.
        """
        if actions is not None:
            pulumi.set(__self__, "actions", actions)
        if constraints is not None:
            pulumi.set(__self__, "constraints", constraints)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if object_types is not None:
            pulumi.set(__self__, "object_types", object_types)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def actions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.
        """
        return pulumi.get(self, "actions")

    @actions.setter
    def actions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "actions", value)

    @property
    @pulumi.getter
    def constraints(self) -> Optional[pulumi.Input[str]]:
        """
        A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.
        """
        return pulumi.get(self, "constraints")

    @constraints.setter
    def constraints(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "constraints", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the permission object.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the permission object is enabled or not. Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of group IDs that have been assigned to this permission object.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the permission object.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="objectTypes")
    def object_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.
        """
        return pulumi.get(self, "object_types")

    @object_types.setter
    def object_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "object_types", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        A list of user IDs that have been assigned to this permission object.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "users", value)


class Permission(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 constraints: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        """
        This resource manages the object-based permissions for Netbox users, built into the application.

        > Object-based permissions enable an administrator to grant users or groups the ability to perform an action on arbitrary subsets of objects in NetBox, rather than all objects of a certain type.
        For more information, see the [Netbox Object-Based Permissions Docs.](https://docs.netbox.dev/en/stable/administration/permissions/)

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import spk_pulumi_netbox as netbox

        test_user = netbox.User("testUser",
            username="johndoe",
            password="abcdefghijkl",
            active=True,
            staff=True)
        test_permission = netbox.Permission("testPermission",
            description="my description",
            enabled=True,
            object_types=["ipam.prefix"],
            actions=[
                "add",
                "change",
            ],
            users=[test_user.id],
            constraints=json.dumps([{
                "status": "active",
            }]))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.
        :param pulumi.Input[str] constraints: A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.
        :param pulumi.Input[str] description: The description of the permission object.
        :param pulumi.Input[bool] enabled: Whether the permission object is enabled or not. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] groups: A list of group IDs that have been assigned to this permission object.
        :param pulumi.Input[str] name: The name of the permission object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] object_types: A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] users: A list of user IDs that have been assigned to this permission object.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PermissionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        This resource manages the object-based permissions for Netbox users, built into the application.

        > Object-based permissions enable an administrator to grant users or groups the ability to perform an action on arbitrary subsets of objects in NetBox, rather than all objects of a certain type.
        For more information, see the [Netbox Object-Based Permissions Docs.](https://docs.netbox.dev/en/stable/administration/permissions/)

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import json
        import spk_pulumi_netbox as netbox

        test_user = netbox.User("testUser",
            username="johndoe",
            password="abcdefghijkl",
            active=True,
            staff=True)
        test_permission = netbox.Permission("testPermission",
            description="my description",
            enabled=True,
            object_types=["ipam.prefix"],
            actions=[
                "add",
                "change",
            ],
            users=[test_user.id],
            constraints=json.dumps([{
                "status": "active",
            }]))
        ```
        <!--End PulumiCodeChooser -->

        :param str resource_name: The name of the resource.
        :param PermissionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PermissionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 constraints: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 groups: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 object_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PermissionArgs.__new__(PermissionArgs)

            if actions is None and not opts.urn:
                raise TypeError("Missing required property 'actions'")
            __props__.__dict__["actions"] = actions
            __props__.__dict__["constraints"] = constraints
            __props__.__dict__["description"] = description
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["groups"] = groups
            __props__.__dict__["name"] = name
            if object_types is None and not opts.urn:
                raise TypeError("Missing required property 'object_types'")
            __props__.__dict__["object_types"] = object_types
            __props__.__dict__["users"] = users
        super(Permission, __self__).__init__(
            'netbox:index/permission:Permission',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            actions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            constraints: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            groups: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            object_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None) -> 'Permission':
        """
        Get an existing Permission resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actions: A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.
        :param pulumi.Input[str] constraints: A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.
        :param pulumi.Input[str] description: The description of the permission object.
        :param pulumi.Input[bool] enabled: Whether the permission object is enabled or not. Defaults to `true`.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] groups: A list of group IDs that have been assigned to this permission object.
        :param pulumi.Input[str] name: The name of the permission object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] object_types: A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.
        :param pulumi.Input[Sequence[pulumi.Input[int]]] users: A list of user IDs that have been assigned to this permission object.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PermissionState.__new__(_PermissionState)

        __props__.__dict__["actions"] = actions
        __props__.__dict__["constraints"] = constraints
        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["groups"] = groups
        __props__.__dict__["name"] = name
        __props__.__dict__["object_types"] = object_types
        __props__.__dict__["users"] = users
        return Permission(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def actions(self) -> pulumi.Output[Sequence[str]]:
        """
        A list actions that are allowed on the object types. Acceptable values are `view`, `add`, `change`, or `delete`.
        """
        return pulumi.get(self, "actions")

    @property
    @pulumi.getter
    def constraints(self) -> pulumi.Output[Optional[str]]:
        """
        A JSON string of an arbitrary filter used to limit the granted action(s) to a specific subset of objects. For more information on correct syntax, see https://docs.netbox.dev/en/stable/administration/permissions/#constraints.
        """
        return pulumi.get(self, "constraints")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of the permission object.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the permission object is enabled or not. Defaults to `true`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        A list of group IDs that have been assigned to this permission object.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the permission object.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="objectTypes")
    def object_types(self) -> pulumi.Output[Sequence[str]]:
        """
        A list of object types that the permission object allows access to. Should be in a form the API can accept. For example: `circuits.provider`, `dcim.inventoryitem`, etc.
        """
        return pulumi.get(self, "object_types")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Optional[Sequence[int]]]:
        """
        A list of user IDs that have been assigned to this permission object.
        """
        return pulumi.get(self, "users")

