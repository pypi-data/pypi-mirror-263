Metadata-Version: 2.1
Name: seapipy
Version: 0.2.1
Summary: A Surface evolver API for python
Author-email: Augusto Borges <borges.augustoar@gmail.com>
License: BSD 3-Clause License
        
        Copyright (c) 2022, Augusto Borges
        All rights reserved.
        
        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:
        
        1. Redistributions of source code must retain the above copyright notice, this
           list of conditions and the following disclaimer.
        
        2. Redistributions in binary form must reproduce the above copyright notice,
           this list of conditions and the following disclaimer in the documentation
           and/or other materials provided with the distribution.
        
        3. Neither the name of the copyright holder nor the names of its
           contributors may be used to endorse or promote products derived from
           this software without specific prior written permission.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
        AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
        IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
        FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
        DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
        SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
        CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
        OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        
Project-URL: Homepage, https://github.com/borgesaugusto/seapipy/
Keywords: Surface Evolver,API,Vertex model
Classifier: Intended Audience :: Science/Research
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: matplotlib>=3.6.2
Requires-Dist: numpy>=1.23.4
Requires-Dist: scipy>=1.9.3
Requires-Dist: setuptools>=60.2.0
Requires-Dist: tomli; python_version < "3.11"
Provides-Extra: test
Requires-Dist: pytest>=7.2.0; extra == "test"

[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.10809290.svg)](https://doi.org/10.5281/zenodo.10809290)
[![PyPI version](https://badge.fury.io/py/seapipy.svg)](https://pypi.org/project/seapipy/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/seapipy)](https://pypi.org/project/seapipy/)
[![codecov](https://codecov.io/gh/borgesaugusto/seapipy/graph/badge.svg?token=SJFFTX412I)](https://codecov.io/gh/borgesaugusto/seapipy)
[![Documentation Status](https://readthedocs.org/projects/seapipy/badge/?version=latest)](https://seapipy.readthedocs.io/en/latest/?badge=latest)
# SeapiPy 
#### A Surface evolver API for python


###  Documentation: 
https://seapipy.readthedocs.io/

---

###  Installation

---

###  Usage
To create a simple tissue 10x10 tissue, you can create a lattice object and initialize the vertices, edges and cells of 
the system. Then, you might create values for the cell volumes directly. You could also create normally distributed
tensions for the edges.
```python
import seapipy as sep
lattice = sep.lattice_class.Lattice(10, 10)
vertices, edges, cells = lattice.create_example_lattice()
volume_values = {k: 500 for k, v in cells.items()}
initial_edges_tensions = lattice.get_normally_distributed_densities(edges)
```

Then, you could create the Surface Evolver object using this variables and then initialize the Surface Evolver slate 
where all the functions will be written into, before saving to disk
```python
se_object = sep.surface_evolver.SurfaceEvolver(vertices, 
                                               edges, 
                                               cells,
                                               initial_edges_tensions, 
                                               volume_values, 
                                               polygonal=False)
se_file = se_object.generate_fe_file()
```

The polygonal=False allows curved edges to exist in the tissue. Now, various Surface Evolver functions might be added 
to the file buffer in the *se_file* variable. For example we could add an initial relaxing for the tissue with
```python
se_object.initial_relaxing()
```

Afterwards, we could add a saving function to create a checkpoint in the Surface Evolver simulation using
```python
se_object.save_one_step("path/to/saving/checkpoint", "step_")
```

Which would save the state of the Surface Evolver simulation at *"path/to/saving/chekcpoint"* with name *"step_"* followed
by the number of times it has been saved. 
Finally you could save the whole Surface Evolver slate into the disk and run it using
```python
se_object.save_fe_file("SurfaceEvolverFile")
sep.command.run_evolver("path/to/SurfaceEvolverFile", "path/to/SurfaceEvolverExecutable")
```


### How to cite us
[![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.10809290.svg)](https://doi.org/10.5281/zenodo.10809290)
