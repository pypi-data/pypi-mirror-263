Metadata-Version: 2.1
Name: iot-protocols
Version: 1.0.3.3
Summary: Generic IIoT protocols package
Author-email: Adrien Delhaye <adrien.delhaye@memoco.eu>
Project-URL: Homepage, https://pypi.org/manage/project/iot-protocols
Keywords: python,iiot,protocols
Classifier: Intended Audience :: Developers
Classifier: Programming Language :: Python :: 3.7
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX :: Linux
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: pyserial >=3.5
Requires-Dist: pymodbus ==2.5.3
Requires-Dist: python-snap7 ==1.3
Requires-Dist: multipledispatch ==1.0.0
Requires-Dist: pytest >=7.0.0

---
author: Delhaye Adrien
year: 2023
---

# Iot Protocols

This git contains easy to use module for communication using various IIoT protocols.
Each subdirectory is a package that can be used independently and downloaded from PyPi.

## Install

```bash
pip install <name-of-package>
```

## Upload on Twine

### Upload pyporject.toml

> **More detailled informations on** <https://packaging.python.org/en/latest/tutorials/packaging-projects/>

Open the pyproject.toml file and update at least the _version_ field with your current verion following the template :

```bash
For alpha release : <version>.<subversion>.<feature>.<fix>-a<i>
For beta release : <version>.<subversion>.<feature>.<fix>-b<i>
For relase candidate release : <version>.<subversion>.<feature>.<fix>-rc<i>
For final release : <version>.<subversion>.<feature>.<fix>
```

With the following :

- \<version\> defines the core version of the application. This number increase when drastic changes havec been made.
- \<subversion> defines important changes like addition of modules or large modification but that doesn't change the global structure of the package.
- \<feature> defines an addition of any feature.
- \<fix> increase when a fix has been made.

### Save your changes

Save everything.

Test everyting.

Push the files on the gitlab repository with version associated TAG.

### Build the package

Ensure you have upgraded pip:

```bash
py -m pip install --upgrade pip
```

Then from the root directory of your module, where the **pyproject.toml** file belongs, execute :

```bash
py -m build
```

This will generate your package tar.gz and wheel files into the **build** folder.

### Upload the dist

First ensure you have twine updated:

```bash
py -m pip install --upgrade twine
```

Get your username and token from PyPi

Use the following command to upload and gives your username and token to authentify, with username as '\_\_token\_\_':

```bashpy -m twine upload dist/<package-file-to-update>
```

You can also, if the build package doesn't exists yet on the PyPi registry use :

```bash
py -m twine upload dist/*
```

## How to use

### CMD line test

You can use the command line interface to explicitely make request using one of the available protocol.
To to this, call the _main.py_ script and pass the disired and or required arguments to the command.

For exemple, using the modbus client:

### Modbus Client

### IEC62056 Client

### Snap-7 Client
