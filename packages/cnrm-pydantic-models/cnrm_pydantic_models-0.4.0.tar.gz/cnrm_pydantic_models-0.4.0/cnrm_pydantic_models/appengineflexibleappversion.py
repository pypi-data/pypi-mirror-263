# generated by datamodel-codegen:
#   filename:  appengineflexibleappversion_v1alpha1.json
#   timestamp: 2024-03-18T21:06:37+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class ApiConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    authFailAction: Optional[str] = Field(
        default=None,
        description='Action to take when users access resources that require authentication. Default value: "AUTH_FAIL_ACTION_REDIRECT" Possible values: ["AUTH_FAIL_ACTION_REDIRECT", "AUTH_FAIL_ACTION_UNAUTHORIZED"].',
    )
    login: Optional[str] = Field(
        default=None,
        description='Level of login required to access this resource. Default value: "LOGIN_OPTIONAL" Possible values: ["LOGIN_OPTIONAL", "LOGIN_ADMIN", "LOGIN_REQUIRED"].',
    )
    script: str = Field(
        ..., description='Path to the script from the application root directory.'
    )
    securityLevel: Optional[str] = Field(
        default=None,
        description='Security (HTTPS) enforcement for this URL. Possible values: ["SECURE_DEFAULT", "SECURE_NEVER", "SECURE_OPTIONAL", "SECURE_ALWAYS"].',
    )
    url: Optional[str] = Field(
        default=None, description='URL to serve the endpoint at.'
    )


class AutomaticScaling(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    coolDownPeriod: Optional[str] = Field(
        default=None,
        description='The time period that the Autoscaler should wait before it starts collecting information from a new instance.\nThis prevents the autoscaler from collecting information when the instance is initializing,\nduring which the collected usage would not be reliable. Default: 120s.',
    )
    cpuUtilization: CpuUtilization = Field(
        ..., description='Target scaling by CPU usage.'
    )
    diskUtilization: Optional[DiskUtilization] = Field(
        default=None, description='Target scaling by disk usage.'
    )
    maxConcurrentRequests: Optional[int] = Field(
        default=None,
        description='Number of concurrent requests an automatic scaling instance can accept before the scheduler spawns a new instance.\n\nDefaults to a runtime-specific value.',
    )
    maxIdleInstances: Optional[int] = Field(
        default=None,
        description='Maximum number of idle instances that should be maintained for this version.',
    )
    maxPendingLatency: Optional[str] = Field(
        default=None,
        description='Maximum amount of time that a request should wait in the pending queue before starting a new instance to handle it.',
    )
    maxTotalInstances: Optional[int] = Field(
        default=None,
        description='Maximum number of instances that should be started to handle requests for this version. Default: 20.',
    )
    minIdleInstances: Optional[int] = Field(
        default=None,
        description='Minimum number of idle instances that should be maintained for this version. Only applicable for the default version of a service.',
    )
    minPendingLatency: Optional[str] = Field(
        default=None,
        description='Minimum amount of time a request should wait in the pending queue before starting a new instance to handle it.',
    )
    minTotalInstances: Optional[int] = Field(
        default=None,
        description='Minimum number of running instances that should be maintained for this version. Default: 2.',
    )
    networkUtilization: Optional[NetworkUtilization] = Field(
        default=None, description='Target scaling by network usage.'
    )
    requestUtilization: Optional[RequestUtilization] = Field(
        default=None, description='Target scaling by request utilization.'
    )


class CloudBuildOptions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    appYamlPath: str = Field(
        ...,
        description='Path to the yaml file used in deployment, used to determine runtime configuration details.',
    )
    cloudBuildTimeout: Optional[str] = Field(
        default=None,
        description='The Cloud Build timeout used as part of any dependent builds performed by version creation. Defaults to 10 minutes.\n\nA duration in seconds with up to nine fractional digits, terminated by \'s\'. Example: "3.5s".',
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class Container(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    image: str = Field(
        ...,
        description='URI to the hosted container image in Google Container Registry. The URI must be fully qualified and include a tag or digest.\nExamples: "gcr.io/my-project/image:tag" or "gcr.io/my-project/image@digest".',
    )


class CpuUtilization(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    aggregationWindowLength: Optional[str] = Field(
        default=None,
        description='Period of time over which CPU utilization is calculated.',
    )
    targetUtilization: float = Field(
        ...,
        description='Target CPU utilization ratio to maintain when scaling. Must be between 0 and 1.',
    )


class Deployment(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cloudBuildOptions: Optional[CloudBuildOptions] = Field(
        default=None,
        description='Options for the build operations performed as a part of the version deployment. Only applicable when creating a version using source code directly.',
    )
    container: Optional[Container] = Field(
        default=None,
        description='The Docker image for the container that runs the version.',
    )
    files: Optional[List[File]] = Field(
        default=None,
        description='Manifest of the files stored in Google Cloud Storage that are included as part of this version.\nAll files must be readable using the credentials supplied with this call.',
    )
    zip: Optional[Zip] = Field(default=None, description='Zip File.')


class DiskUtilization(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    targetReadBytesPerSecond: Optional[int] = Field(
        default=None, description='Target bytes read per second.'
    )
    targetReadOpsPerSecond: Optional[int] = Field(
        default=None, description='Target ops read per seconds.'
    )
    targetWriteBytesPerSecond: Optional[int] = Field(
        default=None, description='Target bytes written per second.'
    )
    targetWriteOpsPerSecond: Optional[int] = Field(
        default=None, description='Target ops written per second.'
    )


class EndpointsApiService(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    configId: Optional[str] = Field(
        default=None,
        description='Endpoints service configuration ID as specified by the Service Management API. For example "2016-09-19r1".\n\nBy default, the rollout strategy for Endpoints is "FIXED". This means that Endpoints starts up with a particular configuration ID.\nWhen a new configuration is rolled out, Endpoints must be given the new configuration ID. The configId field is used to give the configuration ID\nand is required in this case.\n\nEndpoints also has a rollout strategy called "MANAGED". When using this, Endpoints fetches the latest configuration and does not need\nthe configuration ID. In this case, configId must be omitted.',
    )
    disableTraceSampling: Optional[bool] = Field(
        default=None,
        description='Enable or disable trace sampling. By default, this is set to false for enabled.',
    )
    name: str = Field(
        ...,
        description='Endpoints service name which is the name of the "service" resource in the Service Management API.\nFor example "myapi.endpoints.myproject.cloud.goog".',
    )
    rolloutStrategy: Optional[str] = Field(
        default=None,
        description='Endpoints rollout strategy. If FIXED, configId must be specified. If MANAGED, configId must be omitted. Default value: "FIXED" Possible values: ["FIXED", "MANAGED"].',
    )


class Entrypoint(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    shell: str = Field(
        ...,
        description='The format should be a shell command that can be fed to bash -c.',
    )


class File(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    sha1Sum: Optional[str] = Field(
        default=None, description='SHA1 checksum of the file.'
    )
    sourceUrl: str = Field(..., description='Source URL.')


class Handler(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    authFailAction: Optional[str] = Field(
        default=None,
        description='Actions to take when the user is not logged in. Possible values: ["AUTH_FAIL_ACTION_REDIRECT", "AUTH_FAIL_ACTION_UNAUTHORIZED"].',
    )
    login: Optional[str] = Field(
        default=None,
        description='Methods to restrict access to a URL based on login status. Possible values: ["LOGIN_OPTIONAL", "LOGIN_ADMIN", "LOGIN_REQUIRED"].',
    )
    redirectHttpResponseCode: Optional[str] = Field(
        default=None,
        description='30x code to use when performing redirects for the secure field. Possible values: ["REDIRECT_HTTP_RESPONSE_CODE_301", "REDIRECT_HTTP_RESPONSE_CODE_302", "REDIRECT_HTTP_RESPONSE_CODE_303", "REDIRECT_HTTP_RESPONSE_CODE_307"].',
    )
    script: Optional[Script] = Field(
        default=None,
        description='Executes a script to handle the requests that match this URL pattern.\nOnly the auto value is supported for Node.js in the App Engine standard environment, for example "script:" "auto".',
    )
    securityLevel: Optional[str] = Field(
        default=None,
        description='Security (HTTPS) enforcement for this URL. Possible values: ["SECURE_DEFAULT", "SECURE_NEVER", "SECURE_OPTIONAL", "SECURE_ALWAYS"].',
    )
    staticFiles: Optional[StaticFiles] = Field(
        default=None,
        description='Files served directly to the user for a given URL, such as images, CSS stylesheets, or JavaScript source files.\nStatic file handlers describe which files in the application directory are static files, and which URLs serve them.',
    )
    urlRegex: Optional[str] = Field(
        default=None,
        description='URL prefix. Uses regular expression syntax, which means regexp special characters must be escaped, but should not contain groupings.\nAll URLs that begin with this prefix are handled by this handler, using the portion of the URL after the prefix as part of the file path.',
    )


class LivenessCheck(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkInterval: Optional[str] = Field(
        default=None, description='Interval between health checks.'
    )
    failureThreshold: Optional[float] = Field(
        default=None,
        description='Number of consecutive failed checks required before considering the VM unhealthy. Default: 4.',
    )
    host: Optional[str] = Field(
        default=None,
        description='Host header to send when performing a HTTP Readiness check. Example: "myapp.appspot.com".',
    )
    initialDelay: Optional[str] = Field(
        default=None,
        description='The initial delay before starting to execute the checks. Default: "300s".',
    )
    path: str = Field(..., description='The request path.')
    successThreshold: Optional[float] = Field(
        default=None,
        description='Number of consecutive successful checks required before considering the VM healthy. Default: 2.',
    )
    timeout: Optional[str] = Field(
        default=None,
        description='Time before the check is considered failed. Default: "4s".',
    )


class ManualScaling(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    instances: int = Field(
        ...,
        description='Number of instances to assign to the service at the start.\n\n**Note:** When managing the number of instances at runtime through the App Engine Admin API or the (now deprecated) Python 2\nModules API set_num_instances() you must use \'lifecycle.ignore_changes = ["manual_scaling"[0].instances]\' to prevent drift detection.',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class Network(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    forwardedPorts: Optional[List[str]] = Field(
        default=None,
        description='List of ports, or port pairs, to forward from the virtual machine to the application container.',
    )
    instanceTag: Optional[str] = Field(
        default=None, description='Tag to apply to the instance during creation.'
    )
    name: str = Field(
        ...,
        description='Google Compute Engine network where the virtual machines are created. Specify the short name, not the resource path.',
    )
    sessionAffinity: Optional[bool] = Field(
        default=None, description='Enable session affinity.'
    )
    subnetwork: Optional[str] = Field(
        default=None,
        description='Google Cloud Platform sub-network where the virtual machines are created. Specify the short name, not the resource path.\n\nIf the network that the instance is being created in is a Legacy network, then the IP address is allocated from the IPv4Range.\nIf the network that the instance is being created in is an auto Subnet Mode Network, then only network name should be specified (not the subnetworkName) and the IP address is created from the IPCidrRange of the subnetwork that exists in that zone for that network.\nIf the network that the instance is being created in is a custom Subnet Mode Network, then the subnetworkName must be specified and the IP address is created from the IPCidrRange of the subnetwork.\nIf specified, the subnetwork must exist in the same region as the App Engine flexible environment application.',
    )


class NetworkUtilization(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    targetReceivedBytesPerSecond: Optional[int] = Field(
        default=None, description='Target bytes received per second.'
    )
    targetReceivedPacketsPerSecond: Optional[int] = Field(
        default=None, description='Target packets received per second.'
    )
    targetSentBytesPerSecond: Optional[int] = Field(
        default=None, description='Target bytes sent per second.'
    )
    targetSentPacketsPerSecond: Optional[int] = Field(
        default=None, description='Target packets sent per second.'
    )


class ReadinessCheck(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    appStartTimeout: Optional[str] = Field(
        default=None,
        description='A maximum time limit on application initialization, measured from moment the application successfully\nreplies to a healthcheck until it is ready to serve traffic. Default: "300s".',
    )
    checkInterval: Optional[str] = Field(
        default=None, description='Interval between health checks.  Default: "5s".'
    )
    failureThreshold: Optional[float] = Field(
        default=None,
        description='Number of consecutive failed checks required before removing traffic. Default: 2.',
    )
    host: Optional[str] = Field(
        default=None,
        description='Host header to send when performing a HTTP Readiness check. Example: "myapp.appspot.com".',
    )
    path: str = Field(..., description='The request path.')
    successThreshold: Optional[float] = Field(
        default=None,
        description='Number of consecutive successful checks required before receiving traffic. Default: 2.',
    )
    timeout: Optional[str] = Field(
        default=None,
        description='Time before the check is considered failed. Default: "4s".',
    )


class RequestUtilization(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    targetConcurrentRequests: Optional[float] = Field(
        default=None, description='Target number of concurrent requests.'
    )
    targetRequestCountPerSecond: Optional[str] = Field(
        default=None, description='Target requests per second.'
    )


class Resources(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cpu: Optional[int] = Field(default=None, description='Number of CPU cores needed.')
    diskGb: Optional[int] = Field(default=None, description='Disk size (GB) needed.')
    memoryGb: Optional[float] = Field(default=None, description='Memory (GB) needed.')
    volumes: Optional[List[Volume]] = Field(
        default=None,
        description='List of ports, or port pairs, to forward from the virtual machine to the application container.',
    )


class Script(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    scriptPath: str = Field(
        ..., description='Path to the script from the application root directory.'
    )


class ServiceRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of an `AppEngineService` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ServiceRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `name` field of an `AppEngineService` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    apiConfig: Optional[ApiConfig] = Field(
        default=None, description='Serving configuration for Google Cloud Endpoints.'
    )
    automaticScaling: Optional[AutomaticScaling] = Field(
        default=None,
        description='Automatic scaling is based on request rate, response latencies, and other application metrics.',
    )
    betaSettings: Optional[Dict[str, str]] = Field(
        default=None,
        description='Metadata settings that are supplied to this version to enable beta runtime features.',
    )
    defaultExpiration: Optional[str] = Field(
        default=None,
        description='Duration that static files should be cached by web proxies and browsers.\nOnly applicable if the corresponding StaticFilesHandler does not specify its own expiration time.',
    )
    deleteServiceOnDestroy: Optional[bool] = Field(
        default=None,
        description="If set to 'true', the service will be deleted if it is the last version.",
    )
    deployment: Optional[Deployment] = Field(
        default=None,
        description='Code and application artifacts that make up this version.',
    )
    endpointsApiService: Optional[EndpointsApiService] = Field(
        default=None,
        description='Code and application artifacts that make up this version.',
    )
    entrypoint: Optional[Entrypoint] = Field(
        default=None, description='The entrypoint for the application.'
    )
    envVariables: Optional[Dict[str, str]] = None
    handlers: Optional[List[Handler]] = Field(
        default=None,
        description='An ordered list of URL-matching patterns that should be applied to incoming requests.\nThe first matching URL handles the request and other request handlers are not attempted.',
    )
    inboundServices: Optional[List[str]] = Field(
        default=None,
        description='A list of the types of messages that this application is able to receive. Possible values: ["INBOUND_SERVICE_MAIL", "INBOUND_SERVICE_MAIL_BOUNCE", "INBOUND_SERVICE_XMPP_ERROR", "INBOUND_SERVICE_XMPP_MESSAGE", "INBOUND_SERVICE_XMPP_SUBSCRIBE", "INBOUND_SERVICE_XMPP_PRESENCE", "INBOUND_SERVICE_CHANNEL_PRESENCE", "INBOUND_SERVICE_WARMUP"].',
    )
    instanceClass: Optional[str] = Field(
        default=None,
        description='Instance class that is used to run this version. Valid values are\nAutomaticScaling: F1, F2, F4, F4_1G\nManualScaling: B1, B2, B4, B8, B4_1G\nDefaults to F1 for AutomaticScaling and B1 for ManualScaling.',
    )
    livenessCheck: LivenessCheck = Field(
        ...,
        description='Health checking configuration for VM instances. Unhealthy instances are killed and replaced with new instances.',
    )
    manualScaling: Optional[ManualScaling] = Field(
        default=None,
        description='A service with manual scaling runs continuously, allowing you to perform complex initialization and rely on the state of its memory over time.',
    )
    network: Optional[Network] = Field(
        default=None, description='Extra network settings.'
    )
    nobuildFilesRegex: Optional[str] = Field(
        default=None,
        description='Files that match this pattern will not be built into this version. Only applicable for Go runtimes.',
    )
    noopOnDestroy: Optional[bool] = Field(
        default=None,
        description="If set to 'true', the application version will not be deleted.",
    )
    project: Optional[str] = Field(default=None, description='Immutable.')
    readinessCheck: ReadinessCheck = Field(
        ...,
        description='Configures readiness health checking for instances. Unhealthy instances are not put into the backend traffic rotation.',
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The versionId of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    resources: Optional[Resources] = Field(
        default=None, description='Machine resources for a version.'
    )
    runtime: str = Field(..., description='Desired runtime. Example python27.')
    runtimeApiVersion: Optional[str] = Field(
        default=None,
        description="The version of the API in the given runtime environment.\nPlease see the app.yaml reference for valid values at 'https://cloud.google.com/appengine/docs/standard/<language>/config/appref'\\\nSubstitute '<language>' with 'python', 'java', 'php', 'ruby', 'go' or 'nodejs'.",
    )
    runtimeChannel: Optional[str] = Field(
        default=None,
        description='The channel of the runtime to use. Only available for some runtimes.',
    )
    runtimeMainExecutablePath: Optional[str] = Field(
        default=None, description="The path or name of the app's main executable."
    )
    serviceAccount: Optional[str] = Field(
        default=None,
        description='The identity that the deployed version will run as. Admin API will use the App Engine Appspot service account as\ndefault if this field is neither provided in app.yaml file nor through CLI flag.',
    )
    serviceRef: Union[ServiceRef, ServiceRef1]
    servingStatus: Optional[str] = Field(
        default=None,
        description='Current serving status of this version. Only the versions with a SERVING status create instances and can be billed. Default value: "SERVING" Possible values: ["SERVING", "STOPPED"].',
    )
    vpcAccessConnector: Optional[VpcAccessConnector] = Field(
        default=None, description='Enables VPC connectivity for standard apps.'
    )


class StaticFiles(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    applicationReadable: Optional[bool] = Field(
        default=None,
        description='Whether files should also be uploaded as code data. By default, files declared in static file handlers are\nuploaded as static data and are only served to end users; they cannot be read by the application. If enabled,\nuploads are charged against both your code and static data storage resource quotas.',
    )
    expiration: Optional[str] = Field(
        default=None,
        description='Time a static file served by this handler should be cached by web proxies and browsers.\nA duration in seconds with up to nine fractional digits, terminated by \'s\'. Example "3.5s".\nDefault is \'0s\'.',
    )
    httpHeaders: Optional[Dict[str, str]] = Field(
        default=None,
        description='HTTP headers to use for all responses from these URLs.\nAn object containing a list of "key:value" value pairs.".',
    )
    mimeType: Optional[str] = Field(
        default=None,
        description="MIME type used to serve all files served by this handler.\nDefaults to file-specific MIME types, which are derived from each file's filename extension.",
    )
    path: Optional[str] = Field(
        default=None,
        description='Path to the static files matched by the URL pattern, from the application root directory.\nThe path can refer to text matched in groupings in the URL pattern.',
    )
    requireMatchingFile: Optional[bool] = Field(
        default=None,
        description='Whether this handler should match the request if the file referenced by the handler does not exist.',
    )
    uploadPathRegex: Optional[str] = Field(
        default=None,
        description='Regular expression that matches the file paths for all files that should be referenced by this handler.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    name: Optional[str] = Field(
        default=None,
        description='Full path to the Version resource in the API. Example, "v1".',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )


class Volume(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(..., description='Unique name for the volume.')
    sizeGb: int = Field(..., description='Volume size in gigabytes.')
    volumeType: str = Field(..., description="Underlying volume type, e.g. 'tmpfs'.")


class VpcAccessConnector(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description='Full Serverless VPC Access Connector name e.g. /projects/my-project/locations/us-central1/connectors/c1.',
    )


class Zip(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    filesCount: Optional[int] = Field(default=None, description='files count.')
    sourceUrl: str = Field(..., description='Source URL.')
