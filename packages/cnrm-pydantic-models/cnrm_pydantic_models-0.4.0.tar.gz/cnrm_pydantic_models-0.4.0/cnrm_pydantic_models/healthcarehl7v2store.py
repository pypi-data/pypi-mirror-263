# generated by datamodel-codegen:
#   filename:  healthcarehl7v2store_v1alpha1.json
#   timestamp: 2024-03-18T21:08:06+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class NotificationConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    pubsubTopic: str = Field(
        ...,
        description='The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.\nPubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.\nIt is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message\nwas published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a\nproject. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given\nCloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.',
    )


class NotificationConfig1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    filter: Optional[str] = Field(
        default=None,
        description='Restricts notifications sent for messages matching a filter. If this is empty, all messages\nare matched. Syntax: https://cloud.google.com/appengine/docs/standard/python/search/query_strings\n\nFields/functions available for filtering are:\n\n* messageType, from the MSH-9.1 field. For example, NOT messageType = "ADT".\n* send_date or sendDate, the YYYY-MM-DD date the message was sent in the dataset\'s timeZone, from the MSH-7 segment. For example, send_date < "2017-01-02".\n* sendTime, the timestamp when the message was sent, using the RFC3339 time format for comparisons, from the MSH-7 segment. For example, sendTime < "2017-01-02T00:00:00-05:00".\n* sendFacility, the care center that the message came from, from the MSH-4 segment. For example, sendFacility = "ABC".\n* PatientId(value, type), which matches if the message lists a patient having an ID of the given value and type in the PID-2, PID-3, or PID-4 segments. For example, PatientId("123456", "MRN").\n* labels.x, a string value of the label with key x as set using the Message.labels map. For example, labels."priority"="high". The operator :* can be used to assert the existence of a label. For example, labels."priority":*.',
    )
    pubsubTopic: str = Field(
        ...,
        description='The Cloud Pub/Sub topic that notifications of changes are published on. Supplied by the client.\nPubsubMessage.Data will contain the resource name. PubsubMessage.MessageId is the ID of this message.\nIt is guaranteed to be unique within the topic. PubsubMessage.PublishTime is the time at which the message\nwas published. Notifications are only sent if the topic is non-empty. Topic names must be scoped to a\nproject. service-PROJECT_NUMBER@gcp-sa-healthcare.iam.gserviceaccount.com must have publisher permissions on the given\nCloud Pub/Sub topic. Not having adequate permissions will cause the calls that send notifications to fail.\n\nIf a notification cannot be published to Cloud Pub/Sub, errors will be logged to Stackdriver.',
    )


class ParserConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowNullHeader: Optional[bool] = Field(
        default=None,
        description='Determines whether messages with no header are allowed.',
    )
    schema_: Optional[str] = Field(
        default=None,
        alias='schema',
        description='JSON encoded string for schemas used to parse messages in this\nstore if schematized parsing is desired.',
    )
    segmentTerminator: Optional[str] = Field(
        default=None,
        description="Byte(s) to be used as the segment terminator. If this is unset, '\\r' will be used as segment terminator.\n\nA base64-encoded string.",
    )
    version: Optional[str] = Field(
        default=None,
        description='Immutable. The version of the unschematized parser to be used when a custom \'schema\' is not set. Default value: "V1" Possible values: ["V1", "V2", "V3"].',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataset: str = Field(
        ...,
        description="Immutable. Identifies the dataset addressed by this request. Must be in the format\n'projects/{project}/locations/{location}/datasets/{dataset}'.",
    )
    notificationConfig: Optional[NotificationConfig] = Field(
        default=None,
        description='DEPRECATED. `notification_config` is deprecated. Use `notification_configs` instead. A nested object resource.',
    )
    notificationConfigs: Optional[List[NotificationConfig1]] = Field(
        default=None,
        description='A list of notification configs. Each configuration uses a filter to determine whether to publish a\nmessage (both Ingest & Create) on the corresponding notification destination. Only the message name\nis sent as part of the notification. Supplied by the client.',
    )
    parserConfig: Optional[ParserConfig] = Field(
        default=None, description='A nested object resource.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    selfLink: Optional[str] = Field(
        default=None, description='The fully qualified name of this dataset.'
    )
