# generated by datamodel-codegen:
#   filename:  deploymentmanagerdeployment_v1alpha1.json
#   timestamp: 2024-03-18T21:07:39+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class Config(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    content: str = Field(
        ..., description='The full YAML contents of your configuration file.'
    )


class Import(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    content: Optional[str] = Field(
        default=None,
        description='The full contents of the template that you want to import.',
    )
    name: Optional[str] = Field(
        default=None,
        description='The name of the template to import, as declared in the YAML\nconfiguration.',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `Project` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ..., description='Allowed value: The `name` field of a `Project` resource.'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createPolicy: Optional[str] = Field(
        default=None,
        description='Immutable. Set the policy to use for creating new resources. Only used on\ncreate and update. Valid values are \'CREATE_OR_ACQUIRE\' (default) or\n\'ACQUIRE\'. If set to \'ACQUIRE\' and resources do not already exist,\nthe deployment will fail. Note that updating this field does not\nactually affect the deployment, just how it is updated. Default value: "CREATE_OR_ACQUIRE" Possible values: ["ACQUIRE", "CREATE_OR_ACQUIRE"].',
    )
    deletePolicy: Optional[str] = Field(
        default=None,
        description='Immutable. Set the policy to use for deleting new resources on update/delete.\nValid values are \'DELETE\' (default) or \'ABANDON\'. If \'DELETE\',\nresource is deleted after removal from Deployment Manager. If\n\'ABANDON\', the resource is only removed from Deployment Manager\nand is not actually deleted. Note that updating this field does not\nactually change the deployment, just how it is updated. Default value: "DELETE" Possible values: ["ABANDON", "DELETE"].',
    )
    description: Optional[str] = Field(
        default=None, description='Optional user-provided description of deployment.'
    )
    preview: Optional[bool] = None
    projectRef: Union[ProjectRef, ProjectRef1] = Field(
        ..., description='The project that this resource belongs to.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    target: Target = Field(
        ...,
        description='Parameters that define your deployment, including the deployment\nconfiguration and relevant templates.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    deploymentId: Optional[str] = Field(
        default=None, description='Unique identifier for deployment. Output only.'
    )
    manifest: Optional[str] = Field(
        default=None,
        description='Output only. URL of the manifest representing the last manifest that\nwas successfully deployed.',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    selfLink: Optional[str] = Field(
        default=None, description='Output only. Server defined URL for the resource.'
    )


class Target(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    config: Config = Field(
        ..., description='The root configuration file to use for this deployment.'
    )
    imports: Optional[List[Import]] = Field(
        default=None,
        description='Specifies import files for this configuration. This can be\nused to import templates or other files. For example, you might\nimport a text file in order to use the file in a template.',
    )
