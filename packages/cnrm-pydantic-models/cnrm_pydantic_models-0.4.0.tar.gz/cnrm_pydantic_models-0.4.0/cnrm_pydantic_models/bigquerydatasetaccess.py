# generated by datamodel-codegen:
#   filename:  bigquerydatasetaccess_v1alpha1.json
#   timestamp: 2024-03-18T21:06:42+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class Dataset(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataset: Dataset1 = Field(
        ..., description='Immutable. The dataset this entry applies to.'
    )
    targetTypes: List[str] = Field(
        ...,
        description='Immutable. Which resources in the dataset this entry applies to. Currently, only views are supported,\nbut additional target types may be added in the future. Possible values: VIEWS.',
    )


class Dataset1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    datasetId: str = Field(
        ..., description='Immutable. The ID of the dataset containing this table.'
    )
    projectId: str = Field(
        ..., description='Immutable. The ID of the project containing this table.'
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `Project` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ..., description='Allowed value: The `name` field of a `Project` resource.'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataset: Optional[Dataset] = Field(
        default=None,
        description='Immutable. Grants all resources of particular types in a particular dataset read access to the current dataset.',
    )
    datasetId: str = Field(
        ...,
        description='Immutable. A unique ID for this dataset, without the project name. The ID\nmust contain only letters (a-z, A-Z), numbers (0-9), or\nunderscores (_). The maximum length is 1,024 characters.',
    )
    domain: Optional[str] = Field(
        default=None,
        description='Immutable. A domain to grant access to. Any users signed in with the\ndomain specified will be granted the specified access.',
    )
    groupByEmail: Optional[str] = Field(
        default=None,
        description='Immutable. An email address of a Google Group to grant access to.',
    )
    iamMember: Optional[str] = Field(
        default=None,
        description="Immutable. Some other type of member that appears in the IAM Policy but isn't a user,\ngroup, domain, or special group. For example: 'allUsers'.",
    )
    projectRef: Union[ProjectRef, ProjectRef1] = Field(
        ..., description='The project that this resource belongs to.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The routine of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    role: Optional[str] = Field(
        default=None,
        description='Immutable. Describes the rights granted to the user specified by the other\nmember of the access object. Basic, predefined, and custom roles are\nsupported. Predefined roles that have equivalent basic roles are\nswapped by the API to their basic counterparts, and will show a diff\npost-create. See\n[official docs](https://cloud.google.com/bigquery/docs/access-control).',
    )
    specialGroup: Optional[str] = Field(
        default=None,
        description="Immutable. A special group to grant access to. Possible values include:\n\n\n* 'projectOwners': Owners of the enclosing project.\n\n\n* 'projectReaders': Readers of the enclosing project.\n\n\n* 'projectWriters': Writers of the enclosing project.\n\n\n* 'allAuthenticatedUsers': All authenticated BigQuery users.",
    )
    userByEmail: Optional[str] = Field(
        default=None,
        description='Immutable. An email address of a user to grant access to. For example:\nfred@example.com.',
    )
    view: Optional[View] = Field(
        default=None,
        description='Immutable. A view from a different dataset to grant access to. Queries\nexecuted against that view will have read access to tables in\nthis dataset. The role field is not required when this field is\nset. If that view is updated by any user, access to the view\nneeds to be granted again via an update operation.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    apiUpdatedMember: Optional[bool] = Field(
        default=None,
        description='If true, represents that that the iam_member in the config was translated to a different member type by the API, and is stored in state as a different member type.',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )


class View(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    datasetId: str = Field(
        ..., description='Immutable. The ID of the dataset containing this table.'
    )
    projectId: str = Field(
        ..., description='Immutable. The ID of the project containing this table.'
    )
    tableId: str = Field(
        ...,
        description='Immutable. The ID of the table. The ID must contain only letters (a-z,\nA-Z), numbers (0-9), or underscores (_). The maximum length\nis 1,024 characters.',
    )
