# generated by datamodel-codegen:
#   filename:  kmskeyringimportjob_v1alpha1.json
#   timestamp: 2024-03-18T21:08:16+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field


class AttestationItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    content: Optional[str] = Field(
        default=None,
        description='The attestation data provided by the HSM when the key operation was performed.\nA base64-encoded string.',
    )
    format: Optional[str] = Field(
        default=None, description='The format of the attestation data.'
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class PublicKeyItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    pem: Optional[str] = Field(
        default=None,
        description='The public key, encoded in PEM format. For more information, see the RFC 7468 sections\nfor General Considerations and Textual Encoding of Subject Public Key Info.',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    importJobId: str = Field(
        ...,
        description='Immutable. It must be unique within a KeyRing and match the regular expression [a-zA-Z0-9_-]{1,63}.',
    )
    importMethod: str = Field(
        ...,
        description='Immutable. The wrapping method to be used for incoming key material. Possible values: ["RSA_OAEP_3072_SHA1_AES_256", "RSA_OAEP_4096_SHA1_AES_256"].',
    )
    keyRing: str = Field(
        ...,
        description="Immutable. The KeyRing that this import job belongs to.\nFormat: ''projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}''.",
    )
    protectionLevel: str = Field(
        ...,
        description='Immutable. The protection level of the ImportJob. This must match the protectionLevel of the\nversionTemplate on the CryptoKey you attempt to import into. Possible values: ["SOFTWARE", "HSM", "EXTERNAL"].',
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The service-generated name of the resource. Used for acquisition only. Leave unset to create a new resource.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    attestation: Optional[List[AttestationItem]] = Field(
        default=None,
        description='Statement that was generated and signed by the key creator (for example, an HSM) at key creation time.\nUse this statement to verify attributes of the key as stored on the HSM, independently of Google.\nOnly present if the chosen ImportMethod is one with a protection level of HSM.',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    expireTime: Optional[str] = Field(
        default=None,
        description='The time at which this resource is scheduled for expiration and can no longer be used.\nThis is in RFC3339 text format.',
    )
    name: Optional[str] = Field(
        default=None,
        description='The resource name for this ImportJob in the format projects/*/locations/*/keyRings/*/importJobs/*.',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    publicKey: Optional[List[PublicKeyItem]] = Field(
        default=None,
        description="The public key with which to wrap key material prior to import. Only returned if state is 'ACTIVE'.",
    )
    state: Optional[str] = Field(
        default=None,
        description='The current state of the ImportJob, indicating if it can be used.',
    )
