# generated by datamodel-codegen:
#   filename:  dlpinspecttemplate_v1beta1.json
#   timestamp: 2024-03-18T21:07:51+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class CloudStoragePath(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    path: Optional[str] = Field(
        default=None,
        description='A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt',
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class CustomInfoType(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dictionary: Optional[Dictionary] = Field(
        default=None, description='A list of phrases to detect as a CustomInfoType.'
    )
    exclusionType: Optional[str] = Field(
        default=None,
        description='If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching. Possible values: EXCLUSION_TYPE_UNSPECIFIED, EXCLUSION_TYPE_EXCLUDE',
    )
    infoType: Optional[InfoType] = Field(
        default=None,
        description='CustomInfoType can either be a new infoType, or an extension of built-in infoType, when the name matches one of existing infoTypes and that infoType is specified in `InspectContent.info_types` field. Specifying the latter adds findings to the one detected by the system. If built-in info type is not specified in `InspectContent.info_types` list then the name is treated as a custom info type.',
    )
    likelihood: Optional[str] = Field(
        default=None,
        description='Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria specified by the rule. Defaults to `VERY_LIKELY` if not specified. Possible values: LIKELIHOOD_UNSPECIFIED, VERY_UNLIKELY, UNLIKELY, POSSIBLE, LIKELY, VERY_LIKELY',
    )
    regex: Optional[Regex] = Field(
        default=None, description='Regular expression based CustomInfoType.'
    )
    storedType: Optional[StoredType] = Field(
        default=None,
        description='Load an existing `StoredInfoType` resource for use in `InspectDataSource`. Not currently supported in `InspectContent`.',
    )
    surrogateType: Optional[Dict[str, Any]] = Field(
        default=None,
        description='Message for detecting output from deidentification transformations that support reversing.',
    )


class CustomInfoType1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dictionary: Optional[Dictionary2] = Field(
        default=None, description='A list of phrases to detect as a CustomInfoType.'
    )
    exclusionType: Optional[str] = Field(
        default=None,
        description='If set to EXCLUSION_TYPE_EXCLUDE this infoType will not cause a finding to be returned. It still can be used for rules matching. Possible values: EXCLUSION_TYPE_UNSPECIFIED, EXCLUSION_TYPE_EXCLUDE',
    )
    infoType: Optional[InfoType] = Field(
        default=None,
        description='CustomInfoType can either be a new infoType, or an extension of built-in infoType, when the name matches one of existing infoTypes and that infoType is specified in `InspectContent.info_types` field. Specifying the latter adds findings to the one detected by the system. If built-in info type is not specified in `InspectContent.info_types` list then the name is treated as a custom info type.',
    )
    likelihood: Optional[str] = Field(
        default=None,
        description='Likelihood to return for this CustomInfoType. This base value can be altered by a detection rule if the finding meets the criteria specified by the rule. Defaults to `VERY_LIKELY` if not specified. Possible values: LIKELIHOOD_UNSPECIFIED, VERY_UNLIKELY, UNLIKELY, POSSIBLE, LIKELY, VERY_LIKELY',
    )
    regex: Optional[Regex] = Field(
        default=None, description='Regular expression based CustomInfoType.'
    )
    storedType: Optional[StoredType1] = Field(
        default=None,
        description='Load an existing `StoredInfoType` resource for use in `InspectDataSource`. Not currently supported in `InspectContent`.',
    )
    surrogateType: Optional[Dict[str, Any]] = Field(
        default=None,
        description='Message for detecting output from deidentification transformations that support reversing.',
    )


class Dictionary(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cloudStoragePath: Optional[CloudStoragePath] = Field(
        default=None,
        description='Newline-delimited file of words in Cloud Storage. Only a single file is accepted.',
    )
    wordList: Optional[WordList] = Field(
        default=None, description='List of words or phrases to search for.'
    )


class Dictionary1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cloudStoragePath: Optional[CloudStoragePath] = Field(
        default=None,
        description='Newline-delimited file of words in Cloud Storage. Only a single file is accepted.',
    )
    wordList: Optional[WordList] = Field(
        default=None, description='List of words or phrases to search for.'
    )


class Dictionary2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cloudStoragePath: Optional[CloudStoragePath] = Field(
        default=None,
        description='Newline-delimited file of words in Cloud Storage. Only a single file is accepted.',
    )
    wordList: Optional[WordList] = Field(
        default=None, description='List of words or phrases to search for.'
    )


class Dictionary3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cloudStoragePath: Optional[CloudStoragePath] = Field(
        default=None,
        description='Newline-delimited file of words in Cloud Storage. Only a single file is accepted.',
    )
    wordList: Optional[WordList] = Field(
        default=None, description='List of words or phrases to search for.'
    )


class ExcludeInfoTypes(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    infoTypes: Optional[List[InfoType]] = Field(
        default=None,
        description='InfoType list in ExclusionRule rule drops a finding when it overlaps or contained within with a finding of an infoType from this list. For example, for `InspectionRuleSet.info_types` containing "PHONE_NUMBER"` and `exclusion_rule` containing `exclude_info_types.info_types` with "EMAIL_ADDRESS" the phone number findings are dropped if they overlap with EMAIL_ADDRESS finding. That leads to "555-222-2222@example.org" to generate only a single finding, namely email address.',
    )


class ExcludeInfoTypes1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    infoTypes: Optional[List[InfoType]] = Field(
        default=None,
        description='InfoType list in ExclusionRule rule drops a finding when it overlaps or contained within with a finding of an infoType from this list. For example, for `InspectionRuleSet.info_types` containing "PHONE_NUMBER"` and `exclusion_rule` containing `exclude_info_types.info_types` with "EMAIL_ADDRESS" the phone number findings are dropped if they overlap with EMAIL_ADDRESS finding. That leads to "555-222-2222@example.org" to generate only a single finding, namely email address.',
    )


class ExclusionRule(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dictionary: Optional[Dictionary1] = Field(
        default=None, description='Dictionary which defines the rule.'
    )
    excludeInfoTypes: Optional[ExcludeInfoTypes] = Field(
        default=None,
        description='Set of infoTypes for which findings would affect this rule.',
    )
    matchingType: Optional[str] = Field(
        default=None,
        description='How the rule is applied, see MatchingType documentation for details. Possible values: MATCHING_TYPE_UNSPECIFIED, MATCHING_TYPE_FULL_MATCH, MATCHING_TYPE_PARTIAL_MATCH, MATCHING_TYPE_INVERSE_MATCH',
    )
    regex: Optional[Regex] = Field(
        default=None, description='Regular expression which defines the rule.'
    )


class ExclusionRule1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dictionary: Optional[Dictionary3] = Field(
        default=None, description='Dictionary which defines the rule.'
    )
    excludeInfoTypes: Optional[ExcludeInfoTypes1] = Field(
        default=None,
        description='Set of infoTypes for which findings would affect this rule.',
    )
    matchingType: Optional[str] = Field(
        default=None,
        description='How the rule is applied, see MatchingType documentation for details. Possible values: MATCHING_TYPE_UNSPECIFIED, MATCHING_TYPE_FULL_MATCH, MATCHING_TYPE_PARTIAL_MATCH, MATCHING_TYPE_INVERSE_MATCH',
    )
    regex: Optional[Regex] = Field(
        default=None, description='Regular expression which defines the rule.'
    )


class HotwordRegex(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    groupIndexes: Optional[List[int]] = Field(
        default=None,
        description='The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.',
    )
    pattern: Optional[str] = Field(
        default=None,
        description='Pattern defining the regular expression. Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.',
    )


class HotwordRule(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hotwordRegex: Optional[HotwordRegex] = Field(
        default=None,
        description='Regular expression pattern defining what qualifies as a hotword.',
    )
    likelihoodAdjustment: Optional[LikelihoodAdjustment] = Field(
        default=None,
        description='Likelihood adjustment to apply to all matching findings.',
    )
    proximity: Optional[Proximity] = Field(
        default=None,
        description='Proximity of the finding within which the entire hotword must reside. The total length of the window cannot exceed 1000 characters. Note that the finding itself will be included in the window, so that hotwords may be used to match substrings of the finding itself. For example, the certainty of a phone number regex "(d{3}) d{3}-d{4}" could be adjusted upwards if the area code is known to be the local area code of a company office using the hotword regex "(xxx)", where "xxx" is the area code in question.',
    )


class HotwordRule1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hotwordRegex: Optional[HotwordRegex] = Field(
        default=None,
        description='Regular expression pattern defining what qualifies as a hotword.',
    )
    likelihoodAdjustment: Optional[LikelihoodAdjustment] = Field(
        default=None,
        description='Likelihood adjustment to apply to all matching findings.',
    )
    proximity: Optional[Proximity] = Field(
        default=None,
        description='Proximity of the finding within which the entire hotword must reside. The total length of the window cannot exceed 1000 characters. Note that the finding itself will be included in the window, so that hotwords may be used to match substrings of the finding itself. For example, the certainty of a phone number regex "(d{3}) d{3}-d{4}" could be adjusted upwards if the area code is known to be the local area code of a company office using the hotword regex "(xxx)", where "xxx" is the area code in question.',
    )


class InfoType(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the information type. Either a name of your choosing when creating a CustomInfoType, or one of the names listed at https://cloud.google.com/dlp/docs/infotypes-reference when specifying a built-in type. When sending Cloud DLP results to Data Catalog, infoType names should conform to the pattern `[A-Za-z0-9$-_]{1,64}`.',
    )


class InspectConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    contentOptions: Optional[List[str]] = Field(
        default=None,
        description='List of options defining data content to scan. If empty, text, images, and other content will be included.',
    )
    customInfoTypes: Optional[List[CustomInfoType]] = Field(
        default=None,
        description='CustomInfoTypes provided by the user. See https://cloud.google.com/dlp/docs/creating-custom-infotypes to learn more.',
    )
    excludeInfoTypes: Optional[bool] = Field(
        default=None,
        description='When true, excludes type information of the findings.',
    )
    includeQuote: Optional[bool] = Field(
        default=None,
        description='When true, a contextual quote from the data that triggered a finding is included in the response; see Finding.quote.',
    )
    infoTypes: Optional[List[InfoType]] = Field(
        default=None,
        description='Restricts what info_types to look for. The values must correspond to InfoType values returned by ListInfoTypes or listed at https://cloud.google.com/dlp/docs/infotypes-reference. When no InfoTypes or CustomInfoTypes are specified in a request, the system may automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated. If you need precise control and predictability as to what detectors are run you should specify specific InfoTypes listed in the reference, otherwise a default list will be used, which may change over time.',
    )
    limits: Optional[Limits] = Field(
        default=None,
        description='Configuration to control the number of findings returned.',
    )
    minLikelihood: Optional[str] = Field(
        default=None,
        description='Only returns findings equal or above this threshold. The default is POSSIBLE. See https://cloud.google.com/dlp/docs/likelihood to learn more. Possible values: LIKELIHOOD_UNSPECIFIED, VERY_UNLIKELY, UNLIKELY, POSSIBLE, LIKELY, VERY_LIKELY',
    )
    ruleSet: Optional[List[RuleSetItem]] = Field(
        default=None,
        description='Set of rules to apply to the findings for this InspectConfig. Exclusion rules, contained in the set are executed in the end, other rules are executed in the order they are specified for each info type.',
    )


class InspectConfig1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    contentOptions: Optional[List[str]] = Field(
        default=None,
        description='List of options defining data content to scan. If empty, text, images, and other content will be included.',
    )
    customInfoTypes: Optional[List[CustomInfoType1]] = Field(
        default=None,
        description='CustomInfoTypes provided by the user. See https://cloud.google.com/dlp/docs/creating-custom-infotypes to learn more.',
    )
    excludeInfoTypes: Optional[bool] = Field(
        default=None,
        description='When true, excludes type information of the findings.',
    )
    includeQuote: Optional[bool] = Field(
        default=None,
        description='When true, a contextual quote from the data that triggered a finding is included in the response; see Finding.quote.',
    )
    infoTypes: Optional[List[InfoType]] = Field(
        default=None,
        description='Restricts what info_types to look for. The values must correspond to InfoType values returned by ListInfoTypes or listed at https://cloud.google.com/dlp/docs/infotypes-reference. When no InfoTypes or CustomInfoTypes are specified in a request, the system may automatically choose what detectors to run. By default this may be all types, but may change over time as detectors are updated. If you need precise control and predictability as to what detectors are run you should specify specific InfoTypes listed in the reference, otherwise a default list will be used, which may change over time.',
    )
    limits: Optional[Limits1] = Field(
        default=None,
        description='Configuration to control the number of findings returned.',
    )
    minLikelihood: Optional[str] = Field(
        default=None,
        description='Only returns findings equal or above this threshold. The default is POSSIBLE. See https://cloud.google.com/dlp/docs/likelihood to learn more. Possible values: LIKELIHOOD_UNSPECIFIED, VERY_UNLIKELY, UNLIKELY, POSSIBLE, LIKELY, VERY_LIKELY',
    )
    ruleSet: Optional[List[RuleSetItem1]] = Field(
        default=None,
        description='Set of rules to apply to the findings for this InspectConfig. Exclusion rules, contained in the set are executed in the end, other rules are executed in the order they are specified for each info type.',
    )


class LikelihoodAdjustment(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    fixedLikelihood: Optional[str] = Field(
        default=None,
        description='Set the likelihood of a finding to a fixed value. Possible values: LIKELIHOOD_UNSPECIFIED, VERY_UNLIKELY, UNLIKELY, POSSIBLE, LIKELY, VERY_LIKELY',
    )
    relativeLikelihood: Optional[int] = Field(
        default=None,
        description='Increase or decrease the likelihood by the specified number of levels. For example, if a finding would be `POSSIBLE` without the detection rule and `relative_likelihood` is 1, then it is upgraded to `LIKELY`, while a value of -1 would downgrade it to `UNLIKELY`. Likelihood may never drop below `VERY_UNLIKELY` or exceed `VERY_LIKELY`, so applying an adjustment of 1 followed by an adjustment of -1 when base likelihood is `VERY_LIKELY` will result in a final likelihood of `LIKELY`.',
    )


class Limits(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    maxFindingsPerInfoType: Optional[List[MaxFindingsPerInfoTypeItem]] = Field(
        default=None,
        description='Configuration of findings limit given for specified infoTypes.',
    )
    maxFindingsPerItem: Optional[int] = Field(
        default=None,
        description='Max number of findings that will be returned for each item scanned. When set within `InspectJobConfig`, the maximum returned is 2000 regardless if this is set higher. When set within `InspectContentRequest`, this field is ignored.',
    )
    maxFindingsPerRequest: Optional[int] = Field(
        default=None,
        description='Max number of findings that will be returned per request/job. When set within `InspectContentRequest`, the maximum returned is 2000 regardless if this is set higher.',
    )


class Limits1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    maxFindingsPerInfoType: Optional[List[MaxFindingsPerInfoTypeItem1]] = Field(
        default=None,
        description='Configuration of findings limit given for specified infoTypes.',
    )
    maxFindingsPerItem: Optional[int] = Field(
        default=None,
        description='Max number of findings that will be returned for each item scanned. When set within `InspectJobConfig`, the maximum returned is 2000 regardless if this is set higher. When set within `InspectContentRequest`, this field is ignored.',
    )
    maxFindingsPerRequest: Optional[int] = Field(
        default=None,
        description='Max number of findings that will be returned per request/job. When set within `InspectContentRequest`, the maximum returned is 2000 regardless if this is set higher.',
    )


class MaxFindingsPerInfoTypeItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    infoType: Optional[InfoType] = Field(
        default=None,
        description='Type of information the findings limit applies to. Only one limit per info_type should be provided. If InfoTypeLimit does not have an info_type, the DLP API applies the limit against all info_types that are found but not specified in another InfoTypeLimit.',
    )
    maxFindings: Optional[int] = Field(
        default=None, description='Max findings limit for the given infoType.'
    )


class MaxFindingsPerInfoTypeItem1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    infoType: Optional[InfoType] = Field(
        default=None,
        description='Type of information the findings limit applies to. Only one limit per info_type should be provided. If InfoTypeLimit does not have an info_type, the DLP API applies the limit against all info_types that are found but not specified in another InfoTypeLimit.',
    )
    maxFindings: Optional[int] = Field(
        default=None, description='Max findings limit for the given infoType.'
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Optional[Union[Spec, Spec1]] = None
    status: Optional[Status] = None


class NameRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Resource name of the requested `StoredInfoType`, for example `organizations/433245324/storedInfoTypes/432452342` or `projects/project-id/storedInfoTypes/432452342`.\n\nAllowed value: The Google Cloud resource name of a `DLPStoredInfoType` resource (format: `{{parent}}/storedInfoTypes/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NameRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Resource name of the requested `StoredInfoType`, for example `organizations/433245324/storedInfoTypes/432452342` or `projects/project-id/storedInfoTypes/432452342`.\n\nAllowed value: The Google Cloud resource name of a `DLPStoredInfoType` resource (format: `{{parent}}/storedInfoTypes/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NameRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Resource name of the requested `StoredInfoType`, for example `organizations/433245324/storedInfoTypes/432452342` or `projects/project-id/storedInfoTypes/432452342`.\n\nAllowed value: The Google Cloud resource name of a `DLPStoredInfoType` resource (format: `{{parent}}/storedInfoTypes/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NameRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Resource name of the requested `StoredInfoType`, for example `organizations/433245324/storedInfoTypes/432452342` or `projects/project-id/storedInfoTypes/432452342`.\n\nAllowed value: The Google Cloud resource name of a `DLPStoredInfoType` resource (format: `{{parent}}/storedInfoTypes/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class OrganizationRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The Google Cloud resource name of a Google Cloud Organization (format: `organizations/{{name}}`).',
    )
    name: str = Field(
        ...,
        description="[WARNING] Organization not yet supported in Config Connector, use 'external' field to reference existing resources.\nName of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class OrganizationRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The Google Cloud resource name of a Google Cloud Organization (format: `organizations/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description="[WARNING] Organization not yet supported in Config Connector, use 'external' field to reference existing resources.\nName of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class OrganizationRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The Google Cloud resource name of a Google Cloud Organization (format: `organizations/{{name}}`).',
    )
    name: str = Field(
        ...,
        description="[WARNING] Organization not yet supported in Config Connector, use 'external' field to reference existing resources.\nName of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class OrganizationRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The Google Cloud resource name of a Google Cloud Organization (format: `organizations/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description="[WARNING] Organization not yet supported in Config Connector, use 'external' field to reference existing resources.\nName of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Proximity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    windowAfter: Optional[int] = Field(
        default=None, description='Number of characters after the finding to consider.'
    )
    windowBefore: Optional[int] = Field(
        default=None, description='Number of characters before the finding to consider.'
    )


class Regex(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    groupIndexes: Optional[List[int]] = Field(
        default=None,
        description='The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.',
    )
    pattern: Optional[str] = Field(
        default=None,
        description='Pattern defining the regular expression. Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.',
    )


class Rule(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    exclusionRule: Optional[ExclusionRule] = Field(
        default=None, description='Exclusion rule.'
    )
    hotwordRule: Optional[HotwordRule] = None


class Rule1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    exclusionRule: Optional[ExclusionRule1] = Field(
        default=None, description='Exclusion rule.'
    )
    hotwordRule: Optional[HotwordRule1] = None


class RuleSetItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    infoTypes: Optional[List[InfoType]] = Field(
        default=None, description='List of infoTypes this rule set is applied to.'
    )
    rules: Optional[List[Rule]] = Field(
        default=None,
        description='Set of rules to be applied to infoTypes. The rules are applied in order.',
    )


class RuleSetItem1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    infoTypes: Optional[List[InfoType]] = Field(
        default=None, description='List of infoTypes this rule set is applied to.'
    )
    rules: Optional[List[Rule1]] = Field(
        default=None,
        description='Set of rules to be applied to infoTypes. The rules are applied in order.',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = Field(
        default=None, description='Short description (max 256 chars).'
    )
    displayName: Optional[str] = Field(
        default=None, description='Display name (max 256 chars).'
    )
    inspectConfig: Optional[InspectConfig] = Field(
        default=None,
        description='The core content of the template. Configuration of the scanning process.',
    )
    location: Optional[str] = Field(
        default=None, description='Immutable. The location of the resource'
    )
    organizationRef: Union[OrganizationRef, OrganizationRef1] = Field(
        ...,
        description='Immutable. The Organization that this resource belongs to. Only one of [organizationRef, projectRef] may be specified.',
    )
    projectRef: Optional[Union[ProjectRef, ProjectRef1]] = Field(
        default=None,
        description='Immutable. The Project that this resource belongs to. Only one of [organizationRef, projectRef] may be specified.',
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The service-generated name of the resource. Used for acquisition only. Leave unset to create a new resource.',
    )


class Spec1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = Field(
        default=None, description='Short description (max 256 chars).'
    )
    displayName: Optional[str] = Field(
        default=None, description='Display name (max 256 chars).'
    )
    inspectConfig: Optional[InspectConfig1] = Field(
        default=None,
        description='The core content of the template. Configuration of the scanning process.',
    )
    location: Optional[str] = Field(
        default=None, description='Immutable. The location of the resource'
    )
    organizationRef: Optional[Union[OrganizationRef2, OrganizationRef3]] = Field(
        default=None,
        description='Immutable. The Organization that this resource belongs to. Only one of [organizationRef, projectRef] may be specified.',
    )
    projectRef: Union[ProjectRef2, ProjectRef3] = Field(
        ...,
        description='Immutable. The Project that this resource belongs to. Only one of [organizationRef, projectRef] may be specified.',
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The service-generated name of the resource. Used for acquisition only. Leave unset to create a new resource.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    createTime: Optional[AwareDatetime] = Field(
        default=None,
        description='Output only. The creation timestamp of an inspectTemplate.',
    )
    locationId: Optional[str] = Field(
        default=None,
        description='Output only. The geographic location where this resource is stored.',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    updateTime: Optional[AwareDatetime] = Field(
        default=None,
        description='Output only. The last update timestamp of an inspectTemplate.',
    )


class StoredType(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createTime: Optional[AwareDatetime] = Field(
        default=None,
        description='Timestamp indicating when the version of the `StoredInfoType` used for inspection was created. Output-only field, populated by the system.',
    )
    nameRef: Optional[Union[NameRef, NameRef1]] = None


class StoredType1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createTime: Optional[AwareDatetime] = Field(
        default=None,
        description='Timestamp indicating when the version of the `StoredInfoType` used for inspection was created. Output-only field, populated by the system.',
    )
    nameRef: Optional[Union[NameRef2, NameRef3]] = None


class WordList(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    words: Optional[List[str]] = Field(
        default=None,
        description='Words or phrases defining the dictionary. The dictionary must contain at least one phrase and every phrase must contain at least 2 characters that are letters or digits. [required]',
    )
