# generated by datamodel-codegen:
#   filename:  identityplatformconfig_v1beta1.json
#   timestamp: 2024-03-18T21:08:12+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class Anonymous(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: Optional[bool] = Field(
        default=None,
        description='Whether anonymous user auth is enabled for the project or not.',
    )


class BlockingFunctions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    triggers: Optional[Dict[str, Triggers]] = Field(
        default=None,
        description='Map of Trigger to event type. Key should be one of the supported event types: "beforeCreate", "beforeSignIn"',
    )


class ChangeEmailTemplate(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    body: Optional[str] = Field(default=None, description='Immutable. Email body')
    bodyFormat: Optional[str] = Field(
        default=None,
        description='Email body format Possible values: BODY_FORMAT_UNSPECIFIED, PLAIN_TEXT, HTML',
    )
    replyTo: Optional[str] = Field(default=None, description='Reply-to address')
    senderDisplayName: Optional[str] = Field(
        default=None, description='Sender display name'
    )
    senderLocalPart: Optional[str] = Field(
        default=None, description='Local part of From address'
    )
    subject: Optional[str] = Field(default=None, description='Subject of the email')


class ChangeEmailTemplate1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    customized: Optional[bool] = Field(
        default=None,
        description='Output only. Whether the body or subject of the email is customized.',
    )


class Client(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    permissions: Optional[Permissions] = Field(
        default=None,
        description="Configuration related to restricting a user's ability to affect their account.",
    )


class Client1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    apiKey: Optional[str] = Field(
        default=None,
        description='Output only. API key that can be used when making requests for this project.',
    )
    firebaseSubdomain: Optional[str] = Field(
        default=None, description='Output only. Firebase subdomain.'
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class DefaultTenantLocationRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='The default cloud parent org or folder that the tenant project should be created under. The parent resource name should be in the format of "<type>/<number>", such as "folders/123" or "organizations/456". If the value is not set, the tenant will be created under the same organization or folder as the agent project.\n\nAllowed values:\n* The Google Cloud resource name of a `Folder` resource (format: `folders/{{name}}`).\n* The Google Cloud resource name of a Google Cloud Organization (format: `organizations/{{name}}`).',
    )
    kind: str = Field(..., description='Kind of the referent. Allowed values: Folder')
    name: str = Field(
        ...,
        description="[WARNING] Organization not yet supported in Config Connector, use 'external' field to reference existing resources.\nName of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class DefaultTenantLocationRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='The default cloud parent org or folder that the tenant project should be created under. The parent resource name should be in the format of "<type>/<number>", such as "folders/123" or "organizations/456". If the value is not set, the tenant will be created under the same organization or folder as the agent project.\n\nAllowed values:\n* The Google Cloud resource name of a `Folder` resource (format: `folders/{{name}}`).\n* The Google Cloud resource name of a Google Cloud Organization (format: `organizations/{{name}}`).',
    )
    kind: Optional[str] = Field(
        default=None, description='Kind of the referent. Allowed values: Folder'
    )
    name: Optional[str] = Field(
        default=None,
        description="[WARNING] Organization not yet supported in Config Connector, use 'external' field to reference existing resources.\nName of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class DnsInfo(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    useCustomDomain: Optional[bool] = Field(
        default=None, description='Whether to use custom domain.'
    )


class DnsInfo1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    customDomain: Optional[str] = Field(
        default=None, description='Output only. The applied verified custom domain.'
    )
    customDomainState: Optional[str] = Field(
        default=None,
        description='Output only. The current verification state of the custom domain. The custom domain will only be used once the domain verification is successful. Possible values: VERIFICATION_STATE_UNSPECIFIED, NOT_STARTED, IN_PROGRESS, FAILED, SUCCEEDED',
    )
    domainVerificationRequestTime: Optional[AwareDatetime] = Field(
        default=None,
        description='Output only. The timestamp of initial request for the current domain verification.',
    )
    pendingCustomDomain: Optional[str] = Field(
        default=None,
        description="Output only. The custom domain that's to be verified.",
    )


class Email(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: Optional[bool] = Field(
        default=None,
        description='Whether email auth is enabled for the project or not.',
    )
    passwordRequired: Optional[bool] = Field(
        default=None,
        description='Whether a password is required for email auth or not. If true, both an email and password must be provided to sign in. If false, a user may sign in via either email/password or email link.',
    )


class Email1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hashConfig: Optional[HashConfig] = Field(
        default=None, description='Output only. Hash config information.'
    )


class FunctionUriRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='HTTP URI trigger for the Cloud Function.\n\nAllowed value: The `httpsTrigger.url` field of a `CloudFunctionsFunction` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class FunctionUriRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='HTTP URI trigger for the Cloud Function.\n\nAllowed value: The `httpsTrigger.url` field of a `CloudFunctionsFunction` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class HashConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    algorithm: Optional[str] = Field(
        default=None,
        description='Output only. Different password hash algorithms used in Identity Toolkit. Possible values: HASH_ALGORITHM_UNSPECIFIED, HMAC_SHA256, HMAC_SHA1, HMAC_MD5, SCRYPT, PBKDF_SHA1, MD5, HMAC_SHA512, SHA1, BCRYPT, PBKDF2_SHA256, SHA256, SHA512, STANDARD_SCRYPT',
    )
    memoryCost: Optional[int] = Field(
        default=None,
        description='Output only. Memory cost for hash calculation. Used by scrypt and other similar password derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field.',
    )
    rounds: Optional[int] = Field(
        default=None,
        description='Output only. How many rounds for hash calculation. Used by scrypt and other similar password derivation algorithms.',
    )
    saltSeparator: Optional[str] = Field(
        default=None,
        description='Output only. Non-printable character to be inserted between the salt and plain text password in base64.',
    )
    signerKey: Optional[str] = Field(
        default=None, description='Output only. Signer key in base64.'
    )


class Mfa(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    state: Optional[str] = Field(
        default=None,
        description='Whether MultiFactor Authentication has been enabled for this project. Possible values: STATE_UNSPECIFIED, DISABLED, ENABLED, MANDATORY',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class Monitoring(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    requestLogging: Optional[RequestLogging] = Field(
        default=None,
        description='Configuration for logging requests made to this project to Stackdriver Logging',
    )


class MultiTenant(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowTenants: Optional[bool] = Field(
        default=None, description='Whether this project can have tenants or not.'
    )
    defaultTenantLocationRef: Optional[
        Union[DefaultTenantLocationRef, DefaultTenantLocationRef1]
    ] = None


class Notification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    defaultLocale: Optional[str] = Field(
        default=None,
        description='Default locale used for email and SMS in IETF BCP 47 format.',
    )
    sendEmail: Optional[SendEmail] = Field(
        default=None, description='Options for email sending.'
    )
    sendSms: Optional[SendSms] = Field(
        default=None, description='Options for SMS sending.'
    )


class Notification1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    sendEmail: Optional[SendEmail1] = None
    sendSms: Optional[SendSms1] = None


class Password(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class Password1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom1 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class Permissions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    disabledUserDeletion: Optional[bool] = Field(
        default=None,
        description='When true, end users cannot delete their account on the associated project through any of our API methods',
    )
    disabledUserSignup: Optional[bool] = Field(
        default=None,
        description='When true, end users cannot sign up for a new account on the associated project through any of our API methods',
    )


class PhoneNumber(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: Optional[bool] = Field(
        default=None,
        description='Whether phone number auth is enabled for the project or not.',
    )
    testPhoneNumbers: Optional[Dict[str, str]] = Field(
        default=None, description='A map of that can be used for phone auth testing.'
    )


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='The project of the resource\n\nAllowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='The project of the resource\n\nAllowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Quota(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    signUpQuotaConfig: Optional[SignUpQuotaConfig] = Field(
        default=None,
        description='Quota for the Signup endpoint, if overwritten. Signup quota is measured in sign ups per project per hour per IP.',
    )


class RequestLogging(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: Optional[bool] = Field(
        default=None, description='Whether logging is enabled for this project or not.'
    )


class ResetPasswordTemplate(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    body: Optional[str] = Field(default=None, description='Email body')
    bodyFormat: Optional[str] = Field(
        default=None,
        description='Email body format Possible values: BODY_FORMAT_UNSPECIFIED, PLAIN_TEXT, HTML',
    )
    replyTo: Optional[str] = Field(default=None, description='Reply-to address')
    senderDisplayName: Optional[str] = Field(
        default=None, description='Sender display name'
    )
    senderLocalPart: Optional[str] = Field(
        default=None, description='Local part of From address'
    )
    subject: Optional[str] = Field(default=None, description='Subject of the email')


class ResetPasswordTemplate1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    customized: Optional[bool] = Field(
        default=None,
        description='Output only. Whether the body or subject of the email is customized.',
    )


class RevertSecondFactorAdditionTemplate(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    body: Optional[str] = Field(default=None, description='Immutable. Email body')
    bodyFormat: Optional[str] = Field(
        default=None,
        description='Email body format Possible values: BODY_FORMAT_UNSPECIFIED, PLAIN_TEXT, HTML',
    )
    replyTo: Optional[str] = Field(default=None, description='Reply-to address')
    senderDisplayName: Optional[str] = Field(
        default=None, description='Sender display name'
    )
    senderLocalPart: Optional[str] = Field(
        default=None, description='Local part of From address'
    )
    subject: Optional[str] = Field(default=None, description='Subject of the email')


class RevertSecondFactorAdditionTemplate1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    customized: Optional[bool] = Field(
        default=None,
        description='Output only. Whether the body or subject of the email is customized.',
    )


class SecretKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: str = Field(..., description='Key that identifies the value to be extracted.')
    name: str = Field(..., description='Name of the Secret to extract a value from.')


class SendEmail(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    callbackUri: Optional[str] = Field(
        default=None, description='action url in email template.'
    )
    changeEmailTemplate: Optional[ChangeEmailTemplate] = Field(
        default=None, description='Email template for change email'
    )
    dnsInfo: Optional[DnsInfo] = Field(
        default=None, description='Information of custom domain DNS verification.'
    )
    method: Optional[str] = Field(
        default=None,
        description='The method used for sending an email. Possible values: METHOD_UNSPECIFIED, DEFAULT, CUSTOM_SMTP',
    )
    resetPasswordTemplate: Optional[ResetPasswordTemplate] = Field(
        default=None, description='Email template for reset password'
    )
    revertSecondFactorAdditionTemplate: Optional[RevertSecondFactorAdditionTemplate] = (
        Field(
            default=None,
            description='Email template for reverting second factor addition emails',
        )
    )
    smtp: Optional[Smtp] = Field(default=None, description='Use a custom SMTP relay')
    verifyEmailTemplate: Optional[VerifyEmailTemplate] = Field(
        default=None, description='Email template for verify email'
    )


class SendEmail1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    changeEmailTemplate: Optional[ChangeEmailTemplate1] = None
    dnsInfo: Optional[DnsInfo1] = None
    resetPasswordTemplate: Optional[ResetPasswordTemplate1] = None
    revertSecondFactorAdditionTemplate: Optional[
        RevertSecondFactorAdditionTemplate1
    ] = None
    verifyEmailTemplate: Optional[VerifyEmailTemplate1] = None


class SendSms(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    useDeviceLocale: Optional[bool] = Field(
        default=None, description='Whether to use the accept_language header for SMS.'
    )


class SendSms1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    smsTemplate: Optional[SmsTemplate] = Field(
        default=None,
        description='Output only. The template to use when sending an SMS.',
    )


class SignIn(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowDuplicateEmails: Optional[bool] = Field(
        default=None,
        description='Whether to allow more than one account to have the same email.',
    )
    anonymous: Optional[Anonymous] = Field(
        default=None,
        description='Configuration options related to authenticating an anonymous user.',
    )
    email: Optional[Email] = Field(
        default=None,
        description='Configuration options related to authenticating a user by their email address.',
    )
    phoneNumber: Optional[PhoneNumber] = Field(
        default=None,
        description='Configuration options related to authenticated a user by their phone number.',
    )


class SignIn1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    email: Optional[Email1] = None
    hashConfig: Optional[HashConfig] = Field(
        default=None, description='Output only. Hash config information.'
    )


class SignUpQuotaConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    quota: Optional[int] = Field(
        default=None,
        description="Corresponds to the 'refill_token_count' field in QuotaServer config",
    )
    quotaDuration: Optional[str] = Field(
        default=None, description='How long this quota will be active for'
    )
    startTime: Optional[AwareDatetime] = Field(
        default=None, description='When this quota will take affect'
    )


class SmsTemplate(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    content: Optional[str] = Field(
        default=None,
        description="Output only. The SMS's content. Can contain the following placeholders which will be replaced with the appropriate values: %APP_NAME% - For Android or iOS apps, the app's display name. For web apps, the domain hosting the application. %LOGIN_CODE% - The OOB code being sent in the SMS.",
    )


class Smtp(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    host: Optional[str] = Field(default=None, description='SMTP relay host')
    password: Optional[Union[Password, Password1]] = Field(
        default=None, description='SMTP relay password'
    )
    port: Optional[int] = Field(default=None, description='SMTP relay port')
    securityMode: Optional[str] = Field(
        default=None,
        description='SMTP security mode. Possible values: SECURITY_MODE_UNSPECIFIED, SSL, START_TLS',
    )
    senderEmail: Optional[str] = Field(
        default=None, description='Sender email for the SMTP relay'
    )
    username: Optional[str] = Field(default=None, description='SMTP relay username')


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    authorizedDomains: Optional[List[str]] = Field(
        default=None, description='List of domains authorized for OAuth redirects'
    )
    blockingFunctions: Optional[BlockingFunctions] = Field(
        default=None, description='Configuration related to blocking functions.'
    )
    client: Optional[Client] = Field(
        default=None,
        description='Options related to how clients making requests on behalf of a project should be configured.',
    )
    mfa: Optional[Mfa] = Field(
        default=None,
        description="Configuration for this project's multi-factor authentication, including whether it is active and what factors can be used for the second factor",
    )
    monitoring: Optional[Monitoring] = Field(
        default=None,
        description='Configuration related to monitoring project activity.',
    )
    multiTenant: Optional[MultiTenant] = Field(
        default=None, description='Configuration related to multi-tenant functionality.'
    )
    notification: Optional[Notification] = Field(
        default=None,
        description='Configuration related to sending notifications to users.',
    )
    projectRef: Union[ProjectRef, ProjectRef1] = Field(
        ..., description='Immutable. The Project that this resource belongs to.'
    )
    quota: Optional[Quota] = Field(
        default=None, description='Configuration related to quotas.'
    )
    signIn: Optional[SignIn] = Field(
        default=None, description='Configuration related to local sign in methods.'
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    client: Optional[Client1] = None
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    notification: Optional[Notification1] = None
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    signIn: Optional[SignIn1] = None
    subtype: Optional[str] = Field(
        default=None,
        description='Output only. The subtype of this config. Possible values: SUBTYPE_UNSPECIFIED, IDENTITY_PLATFORM, FIREBASE_AUTH',
    )


class Triggers(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    functionUriRef: Optional[Union[FunctionUriRef, FunctionUriRef1]] = None
    updateTime: Optional[AwareDatetime] = Field(
        default=None, description='When the trigger was changed.'
    )


class ValueFrom(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class VerifyEmailTemplate(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    body: Optional[str] = Field(default=None, description='Immutable. Email body')
    bodyFormat: Optional[str] = Field(
        default=None,
        description='Email body format Possible values: BODY_FORMAT_UNSPECIFIED, PLAIN_TEXT, HTML',
    )
    replyTo: Optional[str] = Field(default=None, description='Reply-to address')
    senderDisplayName: Optional[str] = Field(
        default=None, description='Sender display name'
    )
    senderLocalPart: Optional[str] = Field(
        default=None, description='Local part of From address'
    )
    subject: Optional[str] = Field(default=None, description='Subject of the email')


class VerifyEmailTemplate1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    customized: Optional[bool] = Field(
        default=None,
        description='Output only. Whether the body or subject of the email is customized.',
    )
