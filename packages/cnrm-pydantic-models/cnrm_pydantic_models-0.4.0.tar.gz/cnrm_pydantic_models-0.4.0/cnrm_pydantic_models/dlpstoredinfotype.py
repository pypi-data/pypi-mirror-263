# generated by datamodel-codegen:
#   filename:  dlpstoredinfotype_v1beta1.json
#   timestamp: 2024-03-18T21:07:52+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class BigQueryField(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field: Optional[FieldModel] = Field(
        default=None, description='Designated field in the BigQuery table.'
    )
    table: Optional[Table] = Field(
        default=None, description='Source table of the field.'
    )


class BigQueryField1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field: Optional[FieldModel] = Field(
        default=None, description='Designated field in the BigQuery table.'
    )
    table: Optional[Table1] = Field(
        default=None, description='Source table of the field.'
    )


class CloudStorageFileSet(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    url: str = Field(
        ...,
        description='The url, in the format `gs:///`. Trailing wildcard in the path is allowed.',
    )


class CloudStoragePath(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    path: str = Field(
        ...,
        description='A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt',
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class DatasetRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Dataset ID of the table.\n\nAllowed value: The Google Cloud resource name of a `BigQueryDataset` resource (format: `projects/{{project}}/datasets/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class DatasetRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Dataset ID of the table.\n\nAllowed value: The Google Cloud resource name of a `BigQueryDataset` resource (format: `projects/{{project}}/datasets/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class DatasetRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Dataset ID of the table.\n\nAllowed value: The Google Cloud resource name of a `BigQueryDataset` resource (format: `projects/{{project}}/datasets/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class DatasetRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Dataset ID of the table.\n\nAllowed value: The Google Cloud resource name of a `BigQueryDataset` resource (format: `projects/{{project}}/datasets/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Dictionary(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cloudStoragePath: Optional[CloudStoragePath] = Field(
        default=None,
        description='Newline-delimited file of words in Cloud Storage. Only a single file is accepted.',
    )
    wordList: Optional[WordList] = Field(
        default=None, description='List of words or phrases to search for.'
    )


class Dictionary1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cloudStoragePath: Optional[CloudStoragePath] = Field(
        default=None,
        description='Newline-delimited file of words in Cloud Storage. Only a single file is accepted.',
    )
    wordList: Optional[WordList] = Field(
        default=None, description='List of words or phrases to search for.'
    )


class FieldModel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Optional[str] = Field(default=None, description='Name describing the field.')


class LargeCustomDictionary(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    bigQueryField: Optional[BigQueryField] = Field(
        default=None,
        description='Field in a BigQuery table where each cell represents a dictionary phrase.',
    )
    cloudStorageFileSet: Optional[CloudStorageFileSet] = Field(
        default=None,
        description='Set of files containing newline-delimited lists of dictionary phrases.',
    )
    outputPath: Optional[OutputPath] = Field(
        default=None,
        description='Location to store dictionary artifacts in Google Cloud Storage. These files will only be accessible by project owners and the DLP API. If any of these artifacts are modified, the dictionary is considered invalid and can no longer be used.',
    )


class LargeCustomDictionary1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    bigQueryField: Optional[BigQueryField1] = Field(
        default=None,
        description='Field in a BigQuery table where each cell represents a dictionary phrase.',
    )
    cloudStorageFileSet: Optional[CloudStorageFileSet] = Field(
        default=None,
        description='Set of files containing newline-delimited lists of dictionary phrases.',
    )
    outputPath: Optional[OutputPath] = Field(
        default=None,
        description='Location to store dictionary artifacts in Google Cloud Storage. These files will only be accessible by project owners and the DLP API. If any of these artifacts are modified, the dictionary is considered invalid and can no longer be used.',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Optional[Union[Spec, Spec1]] = None
    status: Optional[Status] = None


class OrganizationRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The Google Cloud resource name of a Google Cloud Organization (format: `organizations/{{name}}`).',
    )
    name: str = Field(
        ...,
        description="[WARNING] Organization not yet supported in Config Connector, use 'external' field to reference existing resources.\nName of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class OrganizationRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The Google Cloud resource name of a Google Cloud Organization (format: `organizations/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description="[WARNING] Organization not yet supported in Config Connector, use 'external' field to reference existing resources.\nName of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class OrganizationRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The Google Cloud resource name of a Google Cloud Organization (format: `organizations/{{name}}`).',
    )
    name: str = Field(
        ...,
        description="[WARNING] Organization not yet supported in Config Connector, use 'external' field to reference existing resources.\nName of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class OrganizationRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The Google Cloud resource name of a Google Cloud Organization (format: `organizations/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description="[WARNING] Organization not yet supported in Config Connector, use 'external' field to reference existing resources.\nName of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class OutputPath(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    path: str = Field(
        ...,
        description='A url representing a file or path (no wildcards) in Cloud Storage. Example: gs://[BUCKET_NAME]/dictionary.txt',
    )


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='The Google Cloud Platform project ID of the project containing the table. If omitted, project ID is inferred from the API call.\n\nAllowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='The Google Cloud Platform project ID of the project containing the table. If omitted, project ID is inferred from the API call.\n\nAllowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='The Google Cloud Platform project ID of the project containing the table. If omitted, project ID is inferred from the API call.\n\nAllowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='The Google Cloud Platform project ID of the project containing the table. If omitted, project ID is inferred from the API call.\n\nAllowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Regex(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    groupIndexes: Optional[List[int]] = Field(
        default=None,
        description='The index of the submatch to extract as findings. When not specified, the entire match is returned. No more than 3 may be included.',
    )
    pattern: str = Field(
        ...,
        description='Pattern defining the regular expression. Its syntax (https://github.com/google/re2/wiki/Syntax) can be found under the google/re2 repository on GitHub.',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = Field(
        default=None,
        description='Description of the StoredInfoType (max 256 characters).',
    )
    dictionary: Optional[Dictionary] = Field(
        default=None, description='Store dictionary-based CustomInfoType.'
    )
    displayName: Optional[str] = Field(
        default=None,
        description='Display name of the StoredInfoType (max 256 characters).',
    )
    largeCustomDictionary: Optional[LargeCustomDictionary] = Field(
        default=None,
        description='StoredInfoType where findings are defined by a dictionary of phrases.',
    )
    location: Optional[str] = Field(
        default=None, description='Immutable. The location of the resource'
    )
    organizationRef: Union[OrganizationRef, OrganizationRef1] = Field(
        ...,
        description='Immutable. The Organization that this resource belongs to. Only one of [organizationRef, projectRef] may be specified.',
    )
    projectRef: Optional[Union[ProjectRef2, ProjectRef3]] = Field(
        default=None,
        description='Immutable. The Project that this resource belongs to. Only one of [organizationRef, projectRef] may be specified.',
    )
    regex: Optional[Regex] = Field(
        default=None, description='Store regular expression-based StoredInfoType.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The service-generated name of the resource. Used for acquisition only. Leave unset to create a new resource.',
    )


class Spec1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = Field(
        default=None,
        description='Description of the StoredInfoType (max 256 characters).',
    )
    dictionary: Optional[Dictionary1] = Field(
        default=None, description='Store dictionary-based CustomInfoType.'
    )
    displayName: Optional[str] = Field(
        default=None,
        description='Display name of the StoredInfoType (max 256 characters).',
    )
    largeCustomDictionary: Optional[LargeCustomDictionary1] = Field(
        default=None,
        description='StoredInfoType where findings are defined by a dictionary of phrases.',
    )
    location: Optional[str] = Field(
        default=None, description='Immutable. The location of the resource'
    )
    organizationRef: Optional[Union[OrganizationRef2, OrganizationRef3]] = Field(
        default=None,
        description='Immutable. The Organization that this resource belongs to. Only one of [organizationRef, projectRef] may be specified.',
    )
    projectRef: Union[ProjectRef6, ProjectRef7] = Field(
        ...,
        description='Immutable. The Project that this resource belongs to. Only one of [organizationRef, projectRef] may be specified.',
    )
    regex: Optional[Regex] = Field(
        default=None, description='Store regular expression-based StoredInfoType.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The service-generated name of the resource. Used for acquisition only. Leave unset to create a new resource.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )


class Table(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    datasetRef: Optional[Union[DatasetRef, DatasetRef1]] = None
    projectRef: Optional[Union[ProjectRef, ProjectRef1]] = None
    tableRef: Optional[Union[TableRef, TableRef1]] = None


class Table1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    datasetRef: Optional[Union[DatasetRef2, DatasetRef3]] = None
    projectRef: Optional[Union[ProjectRef4, ProjectRef5]] = None
    tableRef: Optional[Union[TableRef2, TableRef3]] = None


class TableRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Name of the table.\n\nAllowed value: The Google Cloud resource name of a `BigQueryTable` resource (format: `projects/{{project}}/datasets/{{dataset_id}}/tables/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class TableRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Name of the table.\n\nAllowed value: The Google Cloud resource name of a `BigQueryTable` resource (format: `projects/{{project}}/datasets/{{dataset_id}}/tables/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class TableRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Name of the table.\n\nAllowed value: The Google Cloud resource name of a `BigQueryTable` resource (format: `projects/{{project}}/datasets/{{dataset_id}}/tables/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class TableRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Name of the table.\n\nAllowed value: The Google Cloud resource name of a `BigQueryTable` resource (format: `projects/{{project}}/datasets/{{dataset_id}}/tables/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class WordList(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    words: List[str] = Field(
        ...,
        description='Words or phrases defining the dictionary. The dictionary must contain at least one phrase and every phrase must contain at least 2 characters that are letters or digits. [required]',
    )
