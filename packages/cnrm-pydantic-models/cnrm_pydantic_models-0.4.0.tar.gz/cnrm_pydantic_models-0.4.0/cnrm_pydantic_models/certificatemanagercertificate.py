# generated by datamodel-codegen:
#   filename:  certificatemanagercertificate_v1beta1.json
#   timestamp: 2024-03-18T21:06:48+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class AuthorizationAttemptInfoItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    details: Optional[str] = Field(
        default=None,
        description="Human readable explanation for reaching the state. Provided to help\naddress the configuration issues.\nNot guaranteed to be stable. For programmatic access use 'failure_reason' field.",
    )
    domain: Optional[str] = Field(
        default=None, description='Domain name of the authorization attempt.'
    )
    failureReason: Optional[str] = Field(
        default=None,
        description='Reason for failure of the authorization attempt for the domain.',
    )
    state: Optional[str] = Field(
        default=None,
        description='State of the domain for managed certificate issuance.',
    )


class CertificatePem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class CertificatePem1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom1 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class DnsAuthorizationsRefs(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: string of the format `projects/{{project}}/locations/global/dnsAuthorizations/{{value}}`, where {{value}} is the `name` field of a `CertificateManagerDNSAuthorization` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class DnsAuthorizationsRefs1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: string of the format `projects/{{project}}/locations/global/dnsAuthorizations/{{value}}`, where {{value}} is the `name` field of a `CertificateManagerDNSAuthorization` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class IssuanceConfigRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: string of the format `projects/{{project}}/locations/{{location}}/certificateIssuanceConfigs/{{name}}`, where {{value}} is the `name` field of a `CertificateManagerCertificateIssuanceConfig` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class IssuanceConfigRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: string of the format `projects/{{project}}/locations/{{location}}/certificateIssuanceConfigs/{{name}}`, where {{value}} is the `name` field of a `CertificateManagerCertificateIssuanceConfig` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Managed(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    authorizationAttemptInfo: Optional[List[AuthorizationAttemptInfoItem]] = Field(
        default=None,
        description='Detailed state of the latest authorization attempt for each domain\nspecified for this Managed Certificate.',
    )
    dnsAuthorizationsRefs: Optional[
        List[Union[DnsAuthorizationsRefs, DnsAuthorizationsRefs1]]
    ] = None
    domains: Optional[List[str]] = Field(
        default=None,
        description='Immutable. The domains for which a managed SSL certificate will be generated.\nWildcard domains are only supported with DNS challenge resolution.',
    )
    issuanceConfigRef: Optional[Union[IssuanceConfigRef, IssuanceConfigRef1]] = Field(
        default=None,
        description='Only the `external` field is supported to configure the reference.\n\nImmutable. The resource name for a CertificateIssuanceConfig used to configure private PKI certificates in the format projects/*/locations/*/certificateIssuanceConfigs/*.\nIf this field is not set, the certificates will instead be publicly signed as documented at https://cloud.google.com/load-balancing/docs/ssl-certificates/google-managed-certs#caa.\nEither issuanceConfig or dnsAuthorizations should be specified, but not both.',
    )
    provisioningIssue: Optional[List[ProvisioningIssueItem]] = Field(
        default=None,
        description='Information about issues with provisioning this Managed Certificate.',
    )
    state: Optional[str] = Field(
        default=None, description='A state of this Managed Certificate.'
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class PemPrivateKey(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom2] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class PemPrivateKey1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom3 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class PrivateKeyPem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom4] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class PrivateKeyPem1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom5 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `Project` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ..., description='Allowed value: The `name` field of a `Project` resource.'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProvisioningIssueItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    details: Optional[str] = Field(
        default=None,
        description="Human readable explanation about the issue. Provided to help address\nthe configuration issues.\nNot guaranteed to be stable. For programmatic access use 'reason' field.",
    )
    reason: Optional[str] = Field(
        default=None, description='Reason for provisioning failures.'
    )


class SecretKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: str = Field(..., description='Key that identifies the value to be extracted.')
    name: str = Field(..., description='Name of the Secret to extract a value from.')


class SelfManaged(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    certificatePem: Optional[Union[CertificatePem, CertificatePem1]] = Field(
        default=None,
        description='DEPRECATED. `certificate_pem` is deprecated. Use `pem_certificate` instead. Immutable. The certificate chain in PEM-encoded form.\n\nLeaf certificate comes first, followed by intermediate ones if any.',
    )
    pemCertificate: Optional[str] = Field(
        default=None,
        description='Immutable. The certificate chain in PEM-encoded form.\n\nLeaf certificate comes first, followed by intermediate ones if any.',
    )
    pemPrivateKey: Optional[Union[PemPrivateKey, PemPrivateKey1]] = Field(
        default=None,
        description='Immutable. The private key of the leaf certificate in PEM-encoded form.',
    )
    privateKeyPem: Optional[Union[PrivateKeyPem, PrivateKeyPem1]] = Field(
        default=None,
        description='DEPRECATED. `private_key_pem` is deprecated. Use `pem_private_key` instead. Immutable. The private key of the leaf certificate in PEM-encoded form.',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = Field(
        default=None, description='A human-readable description of the resource.'
    )
    location: str = Field(
        ...,
        description='Immutable. The Certificate Manager location. If not specified, "global" is used.',
    )
    managed: Optional[Managed] = Field(
        default=None,
        description="Immutable. Configuration and state of a Managed Certificate.\nCertificate Manager provisions and renews Managed Certificates\nautomatically, for as long as it's authorized to do so.",
    )
    projectRef: Union[ProjectRef, ProjectRef1] = Field(
        ..., description='The project that this resource belongs to.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    scope: Optional[str] = Field(
        default=None,
        description='Immutable. The scope of the certificate.\n\nDEFAULT: Certificates with default scope are served from core Google data centers.\nIf unsure, choose this option.\n\nEDGE_CACHE: Certificates with scope EDGE_CACHE are special-purposed certificates,\nserved from non-core Google data centers.\n\nALL_REGIONS: Certificates with ALL_REGIONS scope are served from all GCP regions (You can only use ALL_REGIONS with global certs).\nsee https://cloud.google.com/compute/docs/regions-zones.',
    )
    selfManaged: Optional[SelfManaged] = Field(
        default=None,
        description="Immutable. Certificate data for a SelfManaged Certificate.\nSelfManaged Certificates are uploaded by the user. Updating such\ncertificates before they expire remains the user's responsibility.",
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )


class ValueFrom(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )
