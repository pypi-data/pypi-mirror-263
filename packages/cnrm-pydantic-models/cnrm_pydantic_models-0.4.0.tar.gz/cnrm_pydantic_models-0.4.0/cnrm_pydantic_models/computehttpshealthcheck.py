# generated by datamodel-codegen:
#   filename:  computehttpshealthcheck_v1beta1.json
#   timestamp: 2024-03-18T21:07:03+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Optional[Spec] = None
    status: Optional[Status] = None


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    checkIntervalSec: Optional[int] = Field(
        default=None,
        description='How often (in seconds) to send a health check. The default value is 5\nseconds.',
    )
    description: Optional[str] = Field(
        default=None,
        description='An optional description of this resource. Provide this property when\nyou create the resource.',
    )
    healthyThreshold: Optional[int] = Field(
        default=None,
        description='A so-far unhealthy instance will be marked healthy after this many\nconsecutive successes. The default value is 2.',
    )
    host: Optional[str] = Field(
        default=None,
        description='The value of the host header in the HTTPS health check request. If\nleft empty (default value), the public IP on behalf of which this\nhealth check is performed will be used.',
    )
    port: Optional[int] = Field(
        default=None,
        description='The TCP port number for the HTTPS health check request.\nThe default value is 443.',
    )
    requestPath: Optional[str] = Field(
        default=None,
        description='The request path of the HTTPS health check request.\nThe default value is /.',
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    timeoutSec: Optional[int] = Field(
        default=None,
        description='How long (in seconds) to wait before claiming failure.\nThe default value is 5 seconds.  It is invalid for timeoutSec to have\ngreater value than checkIntervalSec.',
    )
    unhealthyThreshold: Optional[int] = Field(
        default=None,
        description='A so-far healthy instance will be marked unhealthy after this many\nconsecutive failures. The default value is 2.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    creationTimestamp: Optional[str] = Field(
        default=None, description='Creation timestamp in RFC3339 text format.'
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    selfLink: Optional[str] = None
