# generated by datamodel-codegen:
#   filename:  identityplatformprojectdefaultconfig_v1alpha1.json
#   timestamp: 2024-03-18T21:08:13+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class Anonymous(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: bool = Field(
        ...,
        description='Whether anonymous user auth is enabled for the project or not.',
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class Email(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: Optional[bool] = Field(
        default=None,
        description='Whether email auth is enabled for the project or not.',
    )
    passwordRequired: Optional[bool] = Field(
        default=None,
        description='Whether a password is required for email auth or not. If true, both an email and\npassword must be provided to sign in. If false, a user may sign in via either\nemail/password or email link.',
    )


class HashConfigItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    algorithm: Optional[str] = Field(
        default=None,
        description='Different password hash algorithms used in Identity Toolkit.',
    )
    memoryCost: Optional[int] = Field(
        default=None,
        description='Memory cost for hash calculation. Used by scrypt and other similar password derivation algorithms. See https://tools.ietf.org/html/rfc7914 for explanation of field.',
    )
    rounds: Optional[int] = Field(
        default=None,
        description='How many rounds for hash calculation. Used by scrypt and other similar password derivation algorithms.',
    )
    saltSeparator: Optional[str] = Field(
        default=None,
        description='Non-printable character to be inserted between the salt and plain text password in base64.',
    )
    signerKey: Optional[str] = Field(default=None, description='Signer key in base64.')


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class PhoneNumber(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: Optional[bool] = Field(
        default=None,
        description='Whether phone number auth is enabled for the project or not.',
    )
    testPhoneNumbers: Optional[Dict[str, str]] = Field(
        default=None,
        description='A map of <test phone number, fake code> that can be used for phone auth testing.',
    )


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `Project` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ..., description='Allowed value: The `name` field of a `Project` resource.'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SignIn(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowDuplicateEmails: Optional[bool] = Field(
        default=None,
        description='Whether to allow more than one account to have the same email.',
    )
    anonymous: Optional[Anonymous] = Field(
        default=None,
        description='Configuration options related to authenticating an anonymous user.',
    )
    email: Optional[Email] = Field(
        default=None,
        description='Configuration options related to authenticating a user by their email address.',
    )
    hashConfig: Optional[List[HashConfigItem]] = Field(
        default=None, description='Output only. Hash config information.'
    )
    phoneNumber: Optional[PhoneNumber] = Field(
        default=None,
        description='Configuration options related to authenticated a user by their phone number.',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    projectRef: Union[ProjectRef, ProjectRef1] = Field(
        ..., description='The project that this resource belongs to.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The service-generated name of the resource. Used for acquisition only. Leave unset to create a new resource.',
    )
    signIn: Optional[SignIn] = Field(
        default=None, description='Configuration related to local sign in methods.'
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    name: Optional[str] = Field(
        default=None,
        description='The name of the Config resource. Example: "projects/my-awesome-project/config".',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
