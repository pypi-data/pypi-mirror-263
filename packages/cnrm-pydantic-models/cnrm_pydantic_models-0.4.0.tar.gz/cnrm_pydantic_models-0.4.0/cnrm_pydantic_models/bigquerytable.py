# generated by datamodel-codegen:
#   filename:  bigquerytable_v1beta1.json
#   timestamp: 2024-03-18T21:06:44+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class AvroOptions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    useAvroLogicalTypes: bool = Field(
        ...,
        description='If sourceFormat is set to "AVRO", indicates whether to interpret logical types as the corresponding BigQuery data type (for example, TIMESTAMP), instead of using the raw type (for example, INTEGER).',
    )


class ColumnReferences(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    referencedColumn: str = Field(
        ...,
        description='The column in the primary key that are referenced by the referencingColumn.',
    )
    referencingColumn: str = Field(
        ..., description='The column that composes the foreign key.'
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class CsvOptions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowJaggedRows: Optional[bool] = Field(
        default=None,
        description='Indicates if BigQuery should accept rows that are missing trailing optional columns.',
    )
    allowQuotedNewlines: Optional[bool] = Field(
        default=None,
        description='Indicates if BigQuery should allow quoted data sections that contain newline characters in a CSV file. The default value is false.',
    )
    encoding: Optional[str] = Field(
        default=None,
        description='The character encoding of the data. The supported values are UTF-8 or ISO-8859-1.',
    )
    fieldDelimiter: Optional[str] = Field(
        default=None, description='The separator for fields in a CSV file.'
    )
    quote: str
    skipLeadingRows: Optional[int] = Field(
        default=None,
        description='The number of rows at the top of a CSV file that BigQuery will skip when reading the data.',
    )


class DatasetRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `BigQueryDataset` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class DatasetRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `name` field of a `BigQueryDataset` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class EncryptionConfiguration(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kmsKeyRef: Union[KmsKeyRef, KmsKeyRef1]
    kmsKeyVersion: Optional[str] = Field(
        default=None,
        description='The self link or full name of the kms key version used to encrypt this table.',
    )


class ExternalDataConfiguration(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    autodetect: bool = Field(
        ...,
        description='Let BigQuery try to autodetect the schema and format of the table.',
    )
    avroOptions: Optional[AvroOptions] = Field(
        default=None,
        description='Additional options if source_format is set to "AVRO".',
    )
    compression: Optional[str] = Field(
        default=None,
        description='The compression type of the data source. Valid values are "NONE" or "GZIP".',
    )
    connectionId: Optional[str] = Field(
        default=None,
        description='The connection specifying the credentials to be used to read external storage, such as Azure Blob, Cloud Storage, or S3. The connectionId can have the form "{{project}}.{{location}}.{{connection_id}}" or "projects/{{project}}/locations/{{location}}/connections/{{connection_id}}".',
    )
    csvOptions: Optional[CsvOptions] = Field(
        default=None,
        description='Additional properties to set if source_format is set to "CSV".',
    )
    fileSetSpecType: Optional[str] = Field(
        default=None,
        description='Specifies how source URIs are interpreted for constructing the file set to load.  By default source URIs are expanded against the underlying storage.  Other options include specifying manifest files. Only applicable to object storage systems.',
    )
    googleSheetsOptions: Optional[GoogleSheetsOptions] = Field(
        default=None,
        description='Additional options if source_format is set to "GOOGLE_SHEETS".',
    )
    hivePartitioningOptions: Optional[HivePartitioningOptions] = Field(
        default=None,
        description='When set, configures hive partitioning support. Not all storage formats support hive partitioning -- requesting hive partitioning on an unsupported format will lead to an error, as will providing an invalid specification.',
    )
    ignoreUnknownValues: Optional[bool] = Field(
        default=None,
        description='Indicates if BigQuery should allow extra values that are not represented in the table schema. If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. The default value is false.',
    )
    jsonOptions: Optional[JsonOptions] = Field(
        default=None,
        description='Additional properties to set if sourceFormat is set to JSON.".',
    )
    maxBadRecords: Optional[int] = Field(
        default=None,
        description='The maximum number of bad records that BigQuery can ignore when reading data.',
    )
    metadataCacheMode: Optional[str] = Field(
        default=None,
        description='Metadata Cache Mode for the table. Set this to enable caching of metadata from external data source.',
    )
    objectMetadata: Optional[str] = Field(
        default=None,
        description='Object Metadata is used to create Object Tables. Object Tables contain a listing of objects (with their metadata) found at the sourceUris. If ObjectMetadata is set, sourceFormat should be omitted.',
    )
    parquetOptions: Optional[ParquetOptions] = Field(
        default=None,
        description='Additional properties to set if sourceFormat is set to PARQUET.".',
    )
    referenceFileSchemaUri: Optional[str] = Field(
        default=None,
        description='When creating an external table, the user can provide a reference file with the table schema. This is enabled for the following formats: AVRO, PARQUET, ORC.',
    )
    schema_: Optional[str] = Field(
        default=None,
        alias='schema',
        description='Immutable. A JSON schema for the external table. Schema is required for CSV and JSON formats and is disallowed for Google Cloud Bigtable, Cloud Datastore backups, and Avro formats when using external tables.',
    )
    sourceFormat: Optional[str] = Field(
        default=None,
        description=' Please see sourceFormat under ExternalDataConfiguration in Bigquery\'s public API documentation (https://cloud.google.com/bigquery/docs/reference/rest/v2/tables#externaldataconfiguration) for supported formats. To use "GOOGLE_SHEETS" the scopes must include "googleapis.com/auth/drive.readonly".',
    )
    sourceUris: List[str] = Field(
        ...,
        description='A list of the fully-qualified URIs that point to your data in Google Cloud.',
    )


class ForeignKey(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    columnReferences: ColumnReferences = Field(
        ..., description='The pair of the foreign key column and primary key column.'
    )
    name: Optional[str] = Field(
        default=None, description='Set only if the foreign key constraint is named.'
    )
    referencedTable: ReferencedTable = Field(
        ...,
        description='The table that holds the primary key and is referenced by this foreign key.',
    )


class GoogleSheetsOptions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    range: Optional[str] = Field(
        default=None,
        description='Range of a sheet to query from. Only used when non-empty. At least one of range or skip_leading_rows must be set. Typical format: "sheet_name!top_left_cell_id:bottom_right_cell_id" For example: "sheet1!A1:B20".',
    )
    skipLeadingRows: Optional[int] = Field(
        default=None,
        description='The number of rows at the top of the sheet that BigQuery will skip when reading the data. At least one of range or skip_leading_rows must be set.',
    )


class HivePartitioningOptions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    mode: Optional[str] = Field(
        default=None,
        description='When set, what mode of hive partitioning to use when reading data.',
    )
    requirePartitionFilter: Optional[bool] = Field(
        default=None,
        description='If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified.',
    )
    sourceUriPrefix: Optional[str] = Field(
        default=None,
        description='When hive partition detection is requested, a common for all source uris must be required. The prefix must end immediately before the partition key encoding begins.',
    )


class JsonOptions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    encoding: Optional[str] = Field(
        default=None,
        description='The character encoding of the data. The supported values are UTF-8, UTF-16BE, UTF-16LE, UTF-32BE, and UTF-32LE. The default value is UTF-8.',
    )


class KmsKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class MaterializedView(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowNonIncrementalDefinition: Optional[bool] = Field(
        default=None,
        description='Immutable. Allow non incremental materialized view definition. The default value is false.',
    )
    enableRefresh: Optional[bool] = Field(
        default=None,
        description='Specifies if BigQuery should automatically refresh materialized view when the base table is updated. The default is true.',
    )
    query: str = Field(..., description='Immutable. A query whose result is persisted.')
    refreshIntervalMs: Optional[int] = Field(
        default=None,
        description='Specifies maximum frequency at which this materialized view will be refreshed. The default is 1800000.',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class ParquetOptions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enableListInference: Optional[bool] = Field(
        default=None,
        description='Indicates whether to use schema inference specifically for Parquet LIST logical type.',
    )
    enumAsString: Optional[bool] = Field(
        default=None,
        description='Indicates whether to infer Parquet ENUM logical type as STRING instead of BYTES by default.',
    )


class PrimaryKey(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    columns: List[str] = Field(
        ..., description='The columns that are composed of the primary key constraint.'
    )


class Range(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    end: int = Field(..., description='End of the range partitioning, exclusive.')
    interval: int = Field(
        ..., description='The width of each range within the partition.'
    )
    start: int = Field(..., description='Start of the range partitioning, inclusive.')


class RangePartitioning(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field: str = Field(
        ...,
        description='Immutable. The field used to determine how to create a range-based partition.',
    )
    range: Range = Field(
        ...,
        description='Information required to partition based on ranges. Structure is documented below.',
    )


class ReferencedTable(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    datasetId: str = Field(
        ..., description='The ID of the dataset containing this table.'
    )
    projectId: str = Field(
        ..., description='The ID of the project containing this table.'
    )
    tableId: str = Field(
        ...,
        description='The ID of the table. The ID must contain only letters (a-z, A-Z), numbers (0-9), or underscores (_). The maximum length is 1,024 characters. Certain operations allow suffixing of the table ID with a partition decorator, such as sample_table$20190123.',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    clustering: Optional[List[str]] = Field(
        default=None,
        description='Specifies column names to use for data clustering. Up to four top-level columns are allowed, and should be specified in descending priority order.',
    )
    datasetRef: Union[DatasetRef, DatasetRef1]
    description: Optional[str] = Field(
        default=None, description='The field description.'
    )
    encryptionConfiguration: Optional[EncryptionConfiguration] = Field(
        default=None,
        description='Immutable. Specifies how the table should be encrypted. If left blank, the table will be encrypted with a Google-managed key; that process is transparent to the user.',
    )
    expirationTime: Optional[int] = Field(
        default=None,
        description='The time when this table expires, in milliseconds since the epoch. If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed.',
    )
    externalDataConfiguration: Optional[ExternalDataConfiguration] = Field(
        default=None,
        description='Describes the data format, location, and other properties of a table stored outside of BigQuery. By defining these properties, the data source can then be queried as if it were a standard BigQuery table.',
    )
    friendlyName: Optional[str] = Field(
        default=None, description='A descriptive name for the table.'
    )
    materializedView: Optional[MaterializedView] = Field(
        default=None,
        description='If specified, configures this table as a materialized view.',
    )
    maxStaleness: Optional[str] = Field(
        default=None,
        description='The maximum staleness of data that could be returned when the table (or stale MV) is queried. Staleness encoded as a string encoding of sql IntervalValue type.',
    )
    rangePartitioning: Optional[RangePartitioning] = Field(
        default=None,
        description='If specified, configures range-based partitioning for this table.',
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The tableId of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    schema_: Optional[str] = Field(
        default=None, alias='schema', description='A JSON schema for the table.'
    )
    tableConstraints: Optional[TableConstraints] = Field(
        default=None, description='Defines the primary key and foreign keys.'
    )
    timePartitioning: Optional[TimePartitioning] = Field(
        default=None,
        description='If specified, configures time-based partitioning for this table.',
    )
    view: Optional[View] = Field(
        default=None, description='If specified, configures this table as a view.'
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    creationTime: Optional[int] = Field(
        default=None,
        description='The time when this table was created, in milliseconds since the epoch.',
    )
    etag: Optional[str] = Field(default=None, description='A hash of the resource.')
    lastModifiedTime: Optional[int] = Field(
        default=None,
        description='The time when this table was last modified, in milliseconds since the epoch.',
    )
    location: Optional[str] = Field(
        default=None,
        description='The geographic location where the table resides. This value is inherited from the dataset.',
    )
    numBytes: Optional[int] = Field(
        default=None,
        description='The geographic location where the table resides. This value is inherited from the dataset.',
    )
    numLongTermBytes: Optional[int] = Field(
        default=None,
        description='The number of bytes in the table that are considered "long-term storage".',
    )
    numRows: Optional[int] = Field(
        default=None,
        description='The number of rows of data in this table, excluding any data in the streaming buffer.',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    selfLink: Optional[str] = Field(
        default=None, description='The URI of the created resource.'
    )
    type: Optional[str] = Field(default=None, description='Describes the table type.')


class TableConstraints(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    foreignKeys: Optional[List[ForeignKey]] = Field(
        default=None,
        description='Present only if the table has a foreign key. The foreign key is not enforced.',
    )
    primaryKey: Optional[PrimaryKey] = Field(
        default=None,
        description="Represents a primary key constraint on a table's columns. Present only if the table has a primary key. The primary key is not enforced.",
    )


class TimePartitioning(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    expirationMs: Optional[int] = Field(
        default=None,
        description='Number of milliseconds for which to keep the storage for a partition.',
    )
    field: Optional[str] = Field(
        default=None,
        description='Immutable. The field used to determine how to create a time-based partition. If time-based partitioning is enabled without this value, the table is partitioned based on the load time.',
    )
    requirePartitionFilter: Optional[bool] = Field(
        default=None,
        description='If set to true, queries over this table require a partition filter that can be used for partition elimination to be specified.',
    )
    type: str = Field(
        ...,
        description='The supported types are DAY, HOUR, MONTH, and YEAR, which will generate one partition per day, hour, month, and year, respectively.',
    )


class View(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    query: str = Field(
        ..., description='A query that BigQuery executes when the view is referenced.'
    )
    useLegacySql: Optional[bool] = Field(
        default=None,
        description="Specifies whether to use BigQuery's legacy SQL for this view. The default value is true. If set to false, the view will use BigQuery's standard SQL.",
    )
