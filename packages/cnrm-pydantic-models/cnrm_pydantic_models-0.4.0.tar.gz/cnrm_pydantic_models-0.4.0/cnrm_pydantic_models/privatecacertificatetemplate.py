# generated by datamodel-codegen:
#   filename:  privatecacertificatetemplate_v1beta1.json
#   timestamp: 2024-03-18T21:08:41+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class AdditionalExtension(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    objectIdPath: List[int] = Field(
        ...,
        description='Required. The parts of an OID path. The most significant parts of the path come first.',
    )


class AdditionalExtension1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    critical: Optional[bool] = Field(
        default=None,
        description='Optional. Indicates whether or not this extension is critical (i.e., if the client does not know how to handle this extension, the client should consider this to be an error).',
    )
    objectId: ObjectId = Field(
        ..., description='Required. The OID for this X.509 extension.'
    )
    value: str = Field(..., description='Required. The value of this X.509 extension.')


class BaseKeyUsage(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    certSign: Optional[bool] = Field(
        default=None, description='The key may be used to sign certificates.'
    )
    contentCommitment: Optional[bool] = Field(
        default=None,
        description='The key may be used for cryptographic commitments. Note that this may also be referred to as "non-repudiation".',
    )
    crlSign: Optional[bool] = Field(
        default=None,
        description='The key may be used sign certificate revocation lists.',
    )
    dataEncipherment: Optional[bool] = Field(
        default=None, description='The key may be used to encipher data.'
    )
    decipherOnly: Optional[bool] = Field(
        default=None, description='The key may be used to decipher only.'
    )
    digitalSignature: Optional[bool] = Field(
        default=None, description='The key may be used for digital signatures.'
    )
    encipherOnly: Optional[bool] = Field(
        default=None, description='The key may be used to encipher only.'
    )
    keyAgreement: Optional[bool] = Field(
        default=None, description='The key may be used in a key agreement protocol.'
    )
    keyEncipherment: Optional[bool] = Field(
        default=None, description='The key may be used to encipher other keys.'
    )


class CaOptions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    isCa: Optional[bool] = Field(
        default=None,
        description='Optional. Refers to the "CA" X.509 extension, which is a boolean value. When this value is missing, the extension will be omitted from the CA certificate.',
    )
    maxIssuerPathLength: Optional[int] = Field(
        default=None,
        description='Optional. Refers to the path length restriction X.509 extension. For a CA certificate, this value describes the depth of subordinate CA certificates that are allowed. If this value is less than 0, the request will fail. If this value is missing, the max path length will be omitted from the CA certificate.',
    )


class CelExpression(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = Field(
        default=None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        default=None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        default=None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        default=None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class ExtendedKeyUsage(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    clientAuth: Optional[bool] = Field(
        default=None,
        description='Corresponds to OID 1.3.6.1.5.5.7.3.2. Officially described as "TLS WWW client authentication", though regularly used for non-WWW TLS.',
    )
    codeSigning: Optional[bool] = Field(
        default=None,
        description='Corresponds to OID 1.3.6.1.5.5.7.3.3. Officially described as "Signing of downloadable executable code client authentication".',
    )
    emailProtection: Optional[bool] = Field(
        default=None,
        description='Corresponds to OID 1.3.6.1.5.5.7.3.4. Officially described as "Email protection".',
    )
    ocspSigning: Optional[bool] = Field(
        default=None,
        description='Corresponds to OID 1.3.6.1.5.5.7.3.9. Officially described as "Signing OCSP responses".',
    )
    serverAuth: Optional[bool] = Field(
        default=None,
        description='Corresponds to OID 1.3.6.1.5.5.7.3.1. Officially described as "TLS WWW server authentication", though regularly used for non-WWW TLS.',
    )
    timeStamping: Optional[bool] = Field(
        default=None,
        description='Corresponds to OID 1.3.6.1.5.5.7.3.8. Officially described as "Binding the hash of an object to a time".',
    )


class IdentityConstraints(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowSubjectAltNamesPassthrough: bool = Field(
        ...,
        description='Required. If this is true, the SubjectAltNames extension may be copied from a certificate request into the signed certificate. Otherwise, the requested SubjectAltNames will be discarded.',
    )
    allowSubjectPassthrough: bool = Field(
        ...,
        description='Required. If this is true, the Subject field may be copied from a certificate request into the signed certificate. Otherwise, the requested Subject will be discarded.',
    )
    celExpression: Optional[CelExpression] = Field(
        default=None,
        description='Optional. A CEL expression that may be used to validate the resolved X.509 Subject and/or Subject Alternative Name before a certificate is signed. To see the full allowed syntax and some examples, see https://cloud.google.com/certificate-authority-service/docs/using-cel',
    )


class KeyUsage(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    baseKeyUsage: Optional[BaseKeyUsage] = Field(
        default=None,
        description='Describes high-level ways in which a key may be used.',
    )
    extendedKeyUsage: Optional[ExtendedKeyUsage] = Field(
        default=None, description='Detailed scenarios in which a key may be used.'
    )
    unknownExtendedKeyUsages: Optional[List[UnknownExtendedKeyUsage]] = Field(
        default=None,
        description='Used to describe extended key usages that are not listed in the KeyUsage.ExtendedKeyUsageOptions message.',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class ObjectId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    objectIdPath: List[int] = Field(
        ...,
        description='Required. The parts of an OID path. The most significant parts of the path come first.',
    )


class PassthroughExtensions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    additionalExtensions: Optional[List[AdditionalExtension]] = Field(
        default=None,
        description='Optional. A set of ObjectIds identifying custom X.509 extensions. Will be combined with known_extensions to determine the full set of X.509 extensions.',
    )
    knownExtensions: Optional[List[str]] = Field(
        default=None,
        description='Optional. A set of named X.509 extensions. Will be combined with additional_extensions to determine the full set of X.509 extensions.',
    )


class PolicyId(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    objectIdPath: List[int] = Field(
        ...,
        description='Required. The parts of an OID path. The most significant parts of the path come first.',
    )


class PredefinedValues(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    additionalExtensions: Optional[List[AdditionalExtension1]] = Field(
        default=None, description='Optional. Describes custom X.509 extensions.'
    )
    aiaOcspServers: Optional[List[str]] = Field(
        default=None,
        description='Optional. Describes Online Certificate Status Protocol (OCSP) endpoint addresses that appear in the "Authority Information Access" extension in the certificate.',
    )
    caOptions: Optional[CaOptions] = Field(
        default=None,
        description='Optional. Describes options in this X509Parameters that are relevant in a CA certificate.',
    )
    keyUsage: Optional[KeyUsage] = Field(
        default=None,
        description='Optional. Indicates the intended use for keys that correspond to a certificate.',
    )
    policyIds: Optional[List[PolicyId]] = Field(
        default=None,
        description='Optional. Describes the X.509 certificate policy object identifiers, per https://tools.ietf.org/html/rfc5280#section-4.2.1.4.',
    )


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='The project for the resource\n\nAllowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='The project for the resource\n\nAllowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = Field(
        default=None,
        description='Optional. A human-readable description of scenarios this template is intended for.',
    )
    identityConstraints: Optional[IdentityConstraints] = Field(
        default=None,
        description="Optional. Describes constraints on identities that may be appear in Certificates issued using this template. If this is omitted, then this template will not add restrictions on a certificate's identity.",
    )
    location: str = Field(..., description='Immutable. The location for the resource')
    passthroughExtensions: Optional[PassthroughExtensions] = Field(
        default=None,
        description="Optional. Describes the set of X.509 extensions that may appear in a Certificate issued using this CertificateTemplate. If a certificate request sets extensions that don't appear in the passthrough_extensions, those extensions will be dropped. If the issuing CaPool's IssuancePolicy defines baseline_values that don't appear here, the certificate issuance request will fail. If this is omitted, then this template will not add restrictions on a certificate's X.509 extensions. These constraints do not apply to X.509 extensions set in this CertificateTemplate's predefined_values.",
    )
    predefinedValues: Optional[PredefinedValues] = Field(
        default=None,
        description="Optional. A set of X.509 values that will be applied to all issued certificates that use this template. If the certificate request includes conflicting values for the same properties, they will be overwritten by the values defined here. If the issuing CaPool's IssuancePolicy defines conflicting baseline_values for the same properties, the certificate issuance request will fail.",
    )
    projectRef: Union[ProjectRef, ProjectRef1] = Field(
        ..., description='Immutable. The Project that this resource belongs to.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    createTime: Optional[AwareDatetime] = Field(
        default=None,
        description='Output only. The time at which this CertificateTemplate was created.',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    updateTime: Optional[AwareDatetime] = Field(
        default=None,
        description='Output only. The time at which this CertificateTemplate was updated.',
    )


class UnknownExtendedKeyUsage(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    objectIdPath: List[int] = Field(
        ...,
        description='Required. The parts of an OID path. The most significant parts of the path come first.',
    )
