# generated by datamodel-codegen:
#   filename:  osconfigospolicyassignment_v1beta1.json
#   timestamp: 2024-03-18T21:08:38+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class Apt(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(..., description='Required. Package name.')


class Apt1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    archiveType: str = Field(
        ...,
        description='Required. Type of archive files in this repository. Possible values: ARCHIVE_TYPE_UNSPECIFIED, DEB, DEB_SRC',
    )
    components: List[str] = Field(
        ...,
        description='Required. List of components for this repository. Must contain at least one item.',
    )
    distribution: str = Field(
        ..., description='Required. Distribution of this repository.'
    )
    gpgKey: Optional[str] = Field(
        default=None,
        description='URI of the key file for this repository. The agent maintains a keyring at `/etc/apt/trusted.gpg.d/osconfig_agent_managed.gpg`.',
    )
    uri: str = Field(..., description='Required. URI for this repository.')


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class Deb(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    pullDeps: Optional[bool] = Field(
        default=None,
        description='Whether dependencies should also be installed. - install when false: `dpkg -i package` - install when true: `apt-get update && apt-get -y install package.deb`',
    )
    source: Source = Field(..., description='Required. A deb package.')


class DisruptionBudget(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    fixed: Optional[int] = Field(default=None, description='Specifies a fixed value.')
    percent: Optional[int] = Field(
        default=None,
        description='Specifies the relative value defined as a percentage, which will be multiplied by a reference value.',
    )


class Enforce(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    args: Optional[List[str]] = Field(
        default=None,
        description='Optional arguments to pass to the source during execution.',
    )
    file: Optional[File] = Field(default=None, description='A remote or local file.')
    interpreter: str = Field(
        ...,
        description='Required. The script interpreter to use. Possible values: INTERPRETER_UNSPECIFIED, NONE, SHELL, POWERSHELL',
    )
    outputFilePath: Optional[str] = Field(
        default=None,
        description='Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.',
    )
    script: Optional[str] = Field(
        default=None,
        description='An inline script. The size of the script is limited to 1024 characters.',
    )


class ExclusionLabel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    labels: Optional[Dict[str, str]] = Field(
        default=None,
        description='Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected.',
    )


class Exec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enforce: Optional[Enforce] = Field(
        default=None,
        description='What to run to bring this resource into the desired state. An exit code of 100 indicates "success", any other exit code indicates a failure running enforce.',
    )
    validate_: Validate = Field(
        ...,
        alias='validate',
        description='Required. What to run to validate this resource is in the desired state. An exit code of 100 indicates "in desired state", and exit code of 101 indicates "not in desired state". Any other exit code indicates a failure running validate.',
    )


class File(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowInsecure: Optional[bool] = Field(
        default=None,
        description='Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.',
    )
    gcs: Optional[Gcs] = Field(default=None, description='A Cloud Storage object.')
    localPath: Optional[str] = Field(
        default=None, description='A local path within the VM to use.'
    )
    remote: Optional[Remote] = Field(default=None, description='A generic remote file.')


class File1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowInsecure: Optional[bool] = Field(
        default=None,
        description='Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.',
    )
    gcs: Optional[Gcs] = Field(default=None, description='A Cloud Storage object.')
    localPath: Optional[str] = Field(
        default=None, description='A local path within the VM to use.'
    )
    remote: Optional[Remote] = Field(default=None, description='A generic remote file.')


class File2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    content: Optional[str] = Field(
        default=None,
        description='A a file with this content. The size of the content is limited to 1024 characters.',
    )
    file: Optional[File3] = Field(default=None, description='A remote or local source.')
    path: str = Field(
        ..., description='Required. The absolute path of the file within the VM.'
    )
    permissions: Optional[str] = Field(
        default=None,
        description='Consists of three octal digits which represent, in order, the permissions of the owner, group, and other users for the file (similarly to the numeric mode used in the linux chmod utility). Each digit represents a three bit number with the 4 bit corresponding to the read permissions, the 2 bit corresponds to the write bit, and the one bit corresponds to the execute permission. Default behavior is 755. Below are some examples of permissions and their associated values: read, write, and execute: 7 read and execute: 5 read and write: 6 read only: 4',
    )
    state: str = Field(
        ...,
        description='Required. Desired state of the file. Possible values: OS_POLICY_COMPLIANCE_STATE_UNSPECIFIED, COMPLIANT, NON_COMPLIANT, UNKNOWN, NO_OS_POLICIES_APPLICABLE',
    )


class File3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowInsecure: Optional[bool] = Field(
        default=None,
        description='Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.',
    )
    gcs: Optional[Gcs] = Field(default=None, description='A Cloud Storage object.')
    localPath: Optional[str] = Field(
        default=None, description='A local path within the VM to use.'
    )
    remote: Optional[Remote] = Field(default=None, description='A generic remote file.')


class Gcs(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    bucket: str = Field(
        ..., description='Required. Bucket of the Cloud Storage object.'
    )
    generation: Optional[int] = Field(
        default=None, description='Generation number of the Cloud Storage object.'
    )
    object: str = Field(..., description='Required. Name of the Cloud Storage object.')


class Goo(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(..., description='Required. The name of the repository.')
    url: str = Field(..., description='Required. The url of the repository.')


class Googet(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(..., description='Required. Package name.')


class InclusionLabel(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    labels: Optional[Dict[str, str]] = Field(
        default=None,
        description='Labels are identified by key/value pairs in this map. A VM should contain all the key/value pairs specified in this map to be selected.',
    )


class InstanceFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    all: Optional[bool] = Field(
        default=None,
        description='Target all VMs in the project. If true, no other criteria is permitted.',
    )
    exclusionLabels: Optional[List[ExclusionLabel]] = Field(
        default=None,
        description='List of label sets used for VM exclusion. If the list has more than one label set, the VM is excluded if any of the label sets are applicable for the VM.',
    )
    inclusionLabels: Optional[List[InclusionLabel]] = Field(
        default=None,
        description='List of label sets used for VM inclusion. If the list has more than one `LabelSet`, the VM is included if any of the label sets are applicable for the VM.',
    )
    inventories: Optional[List[Inventory]] = Field(
        default=None,
        description='List of inventories to select VMs. A VM is selected if its inventory data matches at least one of the following inventories.',
    )


class Inventory(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    osShortName: str = Field(..., description='Required. The OS short name')
    osVersion: Optional[str] = Field(
        default=None,
        description='The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*` An empty string matches all OS versions.',
    )


class InventoryFilter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    osShortName: str = Field(..., description='Required. The OS short name')
    osVersion: Optional[str] = Field(
        default=None,
        description='The OS version Prefix matches are supported if asterisk(*) is provided as the last character. For example, to match all versions with a major version of `7`, specify the following value for this field `7.*` An empty string matches all OS versions.',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class Msi(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    properties: Optional[List[str]] = Field(
        default=None,
        description='Additional properties to use during installation. This should be in the format of Property=Setting. Appended to the defaults of `ACTION=INSTALL REBOOT=ReallySuppress`.',
    )
    source: Source1 = Field(..., description='Required. The MSI package.')
    additionalProperties: Optional[Any] = None


class OsPolicy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowNoResourceGroupMatch: Optional[bool] = Field(
        default=None,
        description='This flag determines the OS policy compliance status when none of the resource groups within the policy are applicable for a VM. Set this value to `true` if the policy needs to be reported as compliant even if the policy has nothing to validate or enforce.',
    )
    description: Optional[str] = Field(
        default=None,
        description='Policy description. Length of the description is limited to 1024 characters.',
    )
    id: str = Field(
        ...,
        description='Required. The id of the OS policy with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the assignment.',
    )
    mode: str = Field(
        ...,
        description='Required. Policy mode Possible values: MODE_UNSPECIFIED, VALIDATION, ENFORCEMENT',
    )
    resourceGroups: List[ResourceGroup] = Field(
        ...,
        description='Required. List of resource groups for the policy. For a particular VM, resource groups are evaluated in the order specified and the first resource group that is applicable is selected and the rest are ignored. If none of the resource groups are applicable for a VM, the VM is considered to be non-compliant w.r.t this policy. This behavior can be toggled by the flag `allow_no_resource_group_match`',
    )


class Pkg(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    apt: Optional[Apt] = Field(default=None, description='A package managed by Apt.')
    deb: Optional[Deb] = Field(default=None, description='A deb package file.')
    desiredState: str = Field(
        ...,
        description='Required. The desired state the agent should maintain for this package. Possible values: DESIRED_STATE_UNSPECIFIED, INSTALLED, REMOVED',
    )
    googet: Optional[Googet] = Field(
        default=None, description='A package managed by GooGet.'
    )
    msi: Optional[Msi] = Field(default=None, description='An MSI package.')
    rpm: Optional[Rpm] = Field(default=None, description='An rpm package file.')
    yum: Optional[Yum] = Field(default=None, description='A package managed by YUM.')
    zypper: Optional[Zypper] = Field(
        default=None, description='A package managed by Zypper.'
    )


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='The project for the resource\n\nAllowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='The project for the resource\n\nAllowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Remote(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    sha256Checksum: Optional[str] = Field(
        default=None, description='SHA256 checksum of the remote file.'
    )
    uri: str = Field(
        ...,
        description='Required. URI from which to fetch the object. It should contain both the protocol and path following the format `{protocol}://{location}`.',
    )


class Repository(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    apt: Optional[Apt1] = Field(default=None, description='An Apt Repository.')
    goo: Optional[Goo] = Field(default=None, description='A Goo Repository.')
    yum: Optional[Yum1] = Field(default=None, description='A Yum Repository.')
    zypper: Optional[Zypper1] = Field(default=None, description='A Zypper Repository.')


class Resource(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    exec: Optional[Exec] = Field(default=None, description='Exec resource')
    file: Optional[File2] = Field(default=None, description='File resource')
    id: str = Field(
        ...,
        description='Required. The id of the resource with the following restrictions: * Must contain only lowercase letters, numbers, and hyphens. * Must start with a letter. * Must be between 1-63 characters. * Must end with a number or a letter. * Must be unique within the OS policy.',
    )
    pkg: Optional[Pkg] = Field(default=None, description='Package resource')
    repository: Optional[Repository] = Field(
        default=None, description='Package repository resource'
    )


class ResourceGroup(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    inventoryFilters: Optional[List[InventoryFilter]] = Field(
        default=None,
        description="List of inventory filters for the resource group. The resources in this resource group are applied to the target VM if it satisfies at least one of the following inventory filters. For example, to apply this resource group to VMs running either `RHEL` or `CentOS` operating systems, specify 2 items for the list with following values: inventory_filters[0].os_short_name='rhel' and inventory_filters[1].os_short_name='centos' If the list is empty, this resource group will be applied to the target VM unconditionally.",
    )
    resources: List[Resource] = Field(
        ...,
        description='Required. List of resources configured for this resource group. The resources are executed in the exact order specified here.',
    )


class Rollout(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    disruptionBudget: DisruptionBudget = Field(
        ...,
        description='Required. The maximum number (or percentage) of VMs per zone to disrupt at any given moment.',
    )
    minWaitDuration: str = Field(
        ...,
        description='Required. This determines the minimum duration of time to wait after the configuration changes are applied through the current rollout. A VM continues to count towards the `disruption_budget` at least until this duration of time has passed after configuration changes are applied.',
    )


class Rpm(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    pullDeps: Optional[bool] = Field(
        default=None,
        description='Whether dependencies should also be installed. - install when false: `rpm --upgrade --replacepkgs package.rpm` - install when true: `yum -y install package.rpm` or `zypper -y install package.rpm`',
    )
    source: Source2 = Field(..., description='Required. An rpm package.')


class Source(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowInsecure: Optional[bool] = Field(
        default=None,
        description='Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.',
    )
    gcs: Optional[Gcs] = Field(default=None, description='A Cloud Storage object.')
    localPath: Optional[str] = Field(
        default=None, description='A local path within the VM to use.'
    )
    remote: Optional[Remote] = Field(default=None, description='A generic remote file.')


class Source1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowInsecure: Optional[bool] = Field(
        default=None,
        description='Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.',
    )
    gcs: Optional[Gcs] = Field(default=None, description='A Cloud Storage object.')
    localPath: Optional[str] = Field(
        default=None, description='A local path within the VM to use.'
    )
    remote: Optional[Remote] = Field(default=None, description='A generic remote file.')


class Source2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowInsecure: Optional[bool] = Field(
        default=None,
        description='Defaults to false. When false, files are subject to validations based on the file type: Remote: A checksum must be specified. Cloud Storage: An object generation number must be specified.',
    )
    gcs: Optional[Gcs] = Field(default=None, description='A Cloud Storage object.')
    localPath: Optional[str] = Field(
        default=None, description='A local path within the VM to use.'
    )
    remote: Optional[Remote] = Field(default=None, description='A generic remote file.')


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = Field(
        default=None,
        description='OS policy assignment description. Length of the description is limited to 1024 characters.',
    )
    instanceFilter: InstanceFilter = Field(
        ..., description='Required. Filter to select VMs.'
    )
    location: str = Field(..., description='Immutable. The location for the resource')
    osPolicies: List[OsPolicy] = Field(
        ..., description='Required. List of OS policies to be applied to the VMs.'
    )
    projectRef: Union[ProjectRef, ProjectRef1] = Field(
        ..., description='Immutable. The Project that this resource belongs to.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    rollout: Rollout = Field(
        ...,
        description='Required. Rollout to deploy the OS policy assignment. A rollout is triggered in the following situations: 1) OSPolicyAssignment is created. 2) OSPolicyAssignment is updated and the update contains changes to one of the following fields: - instance_filter - os_policies 3) OSPolicyAssignment is deleted.',
    )
    skipAwaitRollout: Optional[bool] = Field(
        default=None,
        description='Set to true to skip awaiting rollout during resource creation and update.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    baseline: Optional[bool] = Field(
        default=None,
        description='Output only. Indicates that this revision has been successfully rolled out in this zone and new VMs will be assigned OS policies from this revision. For a given OS policy assignment, there is only one revision with a value of `true` for this field.',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    deleted: Optional[bool] = Field(
        default=None,
        description='Output only. Indicates that this revision deletes the OS policy assignment.',
    )
    etag: Optional[str] = Field(
        default=None,
        description="The etag for this OS policy assignment. If this is provided on update, it must match the server's etag.",
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    reconciling: Optional[bool] = Field(
        default=None,
        description='Output only. Indicates that reconciliation is in progress for the revision. This value is `true` when the `rollout_state` is one of: * IN_PROGRESS * CANCELLING',
    )
    revisionCreateTime: Optional[AwareDatetime] = Field(
        default=None,
        description='Output only. The timestamp that the revision was created.',
    )
    revisionId: Optional[str] = Field(
        default=None,
        description='Output only. The assignment revision ID A new revision is committed whenever a rollout is triggered for a OS policy assignment',
    )
    rolloutState: Optional[str] = Field(
        default=None,
        description='Output only. OS policy assignment rollout state Possible values: ROLLOUT_STATE_UNSPECIFIED, IN_PROGRESS, CANCELLING, CANCELLED, SUCCEEDED',
    )
    uid: Optional[str] = Field(
        default=None,
        description='Output only. Server generated unique id for the OS policy assignment resource.',
    )


class Validate(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    args: Optional[List[str]] = Field(
        default=None,
        description='Optional arguments to pass to the source during execution.',
    )
    file: Optional[File1] = Field(default=None, description='A remote or local file.')
    interpreter: str = Field(
        ...,
        description='Required. The script interpreter to use. Possible values: INTERPRETER_UNSPECIFIED, NONE, SHELL, POWERSHELL',
    )
    outputFilePath: Optional[str] = Field(
        default=None,
        description='Only recorded for enforce Exec. Path to an output file (that is created by this Exec) whose content will be recorded in OSPolicyResourceCompliance after a successful run. Absence or failure to read this file will result in this ExecResource being non-compliant. Output file size is limited to 100K bytes.',
    )
    script: Optional[str] = Field(
        default=None,
        description='An inline script. The size of the script is limited to 1024 characters.',
    )


class Yum(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(..., description='Required. Package name.')


class Yum1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    baseUrl: str = Field(
        ..., description='Required. The location of the repository directory.'
    )
    displayName: Optional[str] = Field(
        default=None, description='The display name of the repository.'
    )
    gpgKeys: Optional[List[str]] = Field(default=None, description='URIs of GPG keys.')
    id: str = Field(
        ...,
        description='Required. A one word, unique name for this repository. This is the `repo id` in the yum config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for resource conflicts.',
    )


class Zypper(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(..., description='Required. Package name.')


class Zypper1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    baseUrl: str = Field(
        ..., description='Required. The location of the repository directory.'
    )
    displayName: Optional[str] = Field(
        default=None, description='The display name of the repository.'
    )
    gpgKeys: Optional[List[str]] = Field(default=None, description='URIs of GPG keys.')
    id: str = Field(
        ...,
        description='Required. A one word, unique name for this repository. This is the `repo id` in the zypper config file and also the `display_name` if `display_name` is omitted. This id is also used as the unique identifier when checking for GuestPolicy conflicts.',
    )
