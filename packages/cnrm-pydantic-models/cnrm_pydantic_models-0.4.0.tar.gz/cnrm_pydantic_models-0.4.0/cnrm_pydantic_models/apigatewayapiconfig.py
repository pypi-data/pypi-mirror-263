# generated by datamodel-codegen:
#   filename:  apigatewayapiconfig_v1alpha1.json
#   timestamp: 2024-03-18T21:06:32+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class BackendConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    googleServiceAccount: str = Field(
        ...,
        description='Immutable. Google Cloud IAM service account used to sign OIDC tokens for backends that have authentication configured\n(https://cloud.google.com/service-infrastructure/docs/service-management/reference/rest/v1/services.configs#backend).',
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class Document(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    contents: str = Field(
        ..., description='Immutable. Base64 encoded content of the file.'
    )
    path: str = Field(
        ...,
        description='Immutable. The file path (full or relative path). This is typically the path of the file when it is uploaded.',
    )


class FileDescriptorSet(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    contents: str = Field(
        ..., description='Immutable. Base64 encoded content of the file.'
    )
    path: str = Field(
        ...,
        description='Immutable. The file path (full or relative path). This is typically the path of the file when it is uploaded.',
    )


class GatewayConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    backendConfig: BackendConfig = Field(
        ...,
        description='Backend settings that are applied to all backends of the Gateway.',
    )


class GrpcService(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    fileDescriptorSet: FileDescriptorSet = Field(
        ...,
        description='Immutable. Input only. File descriptor set, generated by protoc.\nTo generate, use protoc with imports and source info included. For an example test.proto file, the following command would put the value in a new file named out.pb.\n\n$ protoc --include_imports --include_source_info test.proto -o out.pb.',
    )
    source: Optional[List[SourceItem]] = Field(
        default=None,
        description="Uncompiled proto files associated with the descriptor set, used for display purposes (server-side compilation is not supported). These should match the inputs to 'protoc' command used to generate fileDescriptorSet.",
    )


class ManagedServiceConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    contents: str = Field(
        ..., description='Immutable. Base64 encoded content of the file.'
    )
    path: str = Field(
        ...,
        description='Immutable. The file path (full or relative path). This is typically the path of the file when it is uploaded.',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class OpenapiDocument(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    document: Document = Field(
        ..., description='The OpenAPI Specification document file.'
    )


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `Project` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ..., description='Allowed value: The `name` field of a `Project` resource.'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SourceItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    contents: str = Field(
        ..., description='Immutable. Base64 encoded content of the file.'
    )
    path: str = Field(
        ...,
        description='Immutable. The file path (full or relative path). This is typically the path of the file when it is uploaded.',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    api: str = Field(..., description='Immutable. The API to attach the config to.')
    apiConfigIdPrefix: Optional[str] = Field(
        default=None,
        description='Immutable. Creates a unique name beginning with the specified prefix. If this and api_config_id are unspecified, a random value is chosen for the name.',
    )
    displayName: Optional[str] = Field(
        default=None, description='A user-visible name for the API.'
    )
    gatewayConfig: Optional[GatewayConfig] = Field(
        default=None,
        description='Immutable. Immutable. Gateway specific configuration.\nIf not specified, backend authentication will be set to use OIDC authentication using the default compute service account.',
    )
    grpcServices: Optional[List[GrpcService]] = Field(
        default=None,
        description='gRPC service definition files. If specified, openapiDocuments must not be included.',
    )
    managedServiceConfigs: Optional[List[ManagedServiceConfig]] = Field(
        default=None,
        description='Optional. Service Configuration files. At least one must be included when using gRPC service definitions. See https://cloud.google.com/endpoints/docs/grpc/grpc-service-config#service_configuration_overview for the expected file contents.\nIf multiple files are specified, the files are merged with the following rules: * All singular scalar fields are merged using "last one wins" semantics in the order of the files uploaded. * Repeated fields are concatenated. * Singular embedded messages are merged using these rules for nested fields.',
    )
    openapiDocuments: Optional[List[OpenapiDocument]] = Field(
        default=None,
        description='OpenAPI specification documents. If specified, grpcServices and managedServiceConfigs must not be included.',
    )
    projectRef: Union[ProjectRef, ProjectRef1] = Field(
        ..., description='The project that this resource belongs to.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The apiConfigId of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    name: Optional[str] = Field(
        default=None, description='The resource name of the API Config.'
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    serviceConfigId: Optional[str] = Field(
        default=None,
        description='The ID of the associated Service Config (https://cloud.google.com/service-infrastructure/docs/glossary#config).',
    )
