# generated by datamodel-codegen:
#   filename:  containerattachedcluster_v1beta1.json
#   timestamp: 2024-03-18T21:07:30+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class Authorization(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    adminUsers: Optional[List[str]] = Field(
        default=None,
        description="Users that can perform operations as a cluster admin. A managed\nClusterRoleBinding will be created to grant the 'cluster-admin' ClusterRole\nto the users. Up to ten admin users can be provided.\n\nFor more info on RBAC, see\nhttps://kubernetes.io/docs/reference/access-authn-authz/rbac/#user-facing-roles.",
    )


class BinaryAuthorization(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    evaluationMode: Optional[str] = Field(
        default=None,
        description='Configure Binary Authorization evaluation mode. Possible values: ["DISABLED", "PROJECT_SINGLETON_POLICY_ENFORCE"].',
    )


class ComponentConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enableComponents: Optional[List[str]] = Field(
        default=None,
        description='The components to be enabled. Possible values: ["SYSTEM_COMPONENTS", "WORKLOADS"].',
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class Error(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    message: Optional[str] = Field(
        default=None, description='Human-friendly description of the error.'
    )


class Fleet(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    membership: Optional[str] = Field(
        default=None,
        description='The name of the managed Hub Membership resource associated to this\ncluster. Membership names are formatted as\nprojects/<project-number>/locations/global/membership/<cluster-id>.',
    )
    projectRef: Union[ProjectRef, ProjectRef1] = Field(
        ...,
        description='The number of the Fleet host project where this cluster will be registered.',
    )


class LoggingConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    componentConfig: Optional[ComponentConfig] = Field(
        default=None, description='The configuration of the logging components.'
    )


class ManagedPrometheusConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: Optional[bool] = Field(
        default=None, description='Enable Managed Collection.'
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class MonitoringConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    managedPrometheusConfig: Optional[ManagedPrometheusConfig] = Field(
        default=None,
        description='Enable Google Cloud Managed Service for Prometheus in the cluster.',
    )


class OidcConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    issuerUrl: str = Field(
        ...,
        description="Immutable. A JSON Web Token (JWT) issuer URI. 'issuer' must start with 'https://'.",
    )
    jwks: Optional[str] = Field(
        default=None,
        description='Immutable. OIDC verification keys in JWKS format (RFC 7517).',
    )


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: string of the format `projects/{{value}}`, where {{value}} is the `number` field of a `Project` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: string of the format `projects/{{value}}`, where {{value}} is the `number` field of a `Project` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `Project` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ..., description='Allowed value: The `name` field of a `Project` resource.'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    annotations: Optional[Dict[str, str]] = Field(
        default=None,
        description='Optional. Annotations on the cluster. This field has the same\nrestrictions as Kubernetes annotations. The total size of all keys and\nvalues combined is limited to 256k. Key can have 2 segments: prefix (optional)\nand name (required), separated by a slash (/). Prefix must be a DNS subdomain.\nName must be 63 characters or less, begin and end with alphanumerics,\nwith dashes (-), underscores (_), dots (.), and alphanumerics between.',
    )
    authorization: Optional[Authorization] = Field(
        default=None, description='Configuration related to the cluster RBAC settings.'
    )
    binaryAuthorization: Optional[BinaryAuthorization] = Field(
        default=None, description='Binary Authorization configuration.'
    )
    deletionPolicy: Optional[str] = Field(
        default=None, description='Policy to determine what flags to send on delete.'
    )
    description: Optional[str] = Field(
        default=None,
        description='A human readable description of this attached cluster. Cannot be longer\nthan 255 UTF-8 encoded bytes.',
    )
    distribution: str = Field(
        ...,
        description='Immutable. The Kubernetes distribution of the underlying attached cluster. Supported values:\n"eks", "aks".',
    )
    fleet: Fleet = Field(..., description='Fleet configuration.')
    location: str = Field(..., description='Immutable. The location for the resource.')
    loggingConfig: Optional[LoggingConfig] = Field(
        default=None, description='Logging configuration.'
    )
    monitoringConfig: Optional[MonitoringConfig] = Field(
        default=None, description='Monitoring configuration.'
    )
    oidcConfig: OidcConfig = Field(
        ...,
        description="OIDC discovery information of the target cluster.\n\nKubernetes Service Account (KSA) tokens are JWT tokens signed by the cluster\nAPI server. This fields indicates how GCP services\nvalidate KSA tokens in order to allow system workloads (such as GKE Connect\nand telemetry agents) to authenticate back to GCP.\n\nBoth clusters with public and private issuer URLs are supported.\nClusters with public issuers only need to specify the 'issuer_url' field\nwhile clusters with private issuers need to provide both\n'issuer_url' and 'jwks'.",
    )
    platformVersion: str = Field(
        ..., description="The platform version for the cluster (e.g. '1.23.0-gke.1')."
    )
    projectRef: Union[ProjectRef2, ProjectRef3] = Field(
        ...,
        description='The ID of the project in which the resource belongs. If it is not provided, the provider project is used.',
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    clusterRegion: Optional[str] = Field(
        default=None,
        description='Output only. The region where this cluster runs.\n\nFor EKS clusters, this is an AWS region. For AKS clusters,\nthis is an Azure region.',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    createTime: Optional[str] = Field(
        default=None,
        description='Output only. The time at which this cluster was created.',
    )
    errors: Optional[List[Error]] = Field(
        default=None, description='A set of errors found in the cluster.'
    )
    kubernetesVersion: Optional[str] = Field(
        default=None, description='The Kubernetes version of the cluster.'
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    reconciling: Optional[bool] = Field(
        default=None,
        description='If set, there are currently changes in flight to the cluster.',
    )
    state: Optional[str] = Field(
        default=None,
        description='The current state of the cluster. Possible values:\nSTATE_UNSPECIFIED, PROVISIONING, RUNNING, RECONCILING, STOPPING, ERROR,\nDEGRADED.',
    )
    uid: Optional[str] = Field(
        default=None, description='A globally unique identifier for the cluster.'
    )
    updateTime: Optional[str] = Field(
        default=None, description='The time at which this cluster was last updated.'
    )
    workloadIdentityConfig: Optional[List[WorkloadIdentityConfigItem]] = Field(
        default=None, description='Workload Identity settings.'
    )


class WorkloadIdentityConfigItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    identityProvider: Optional[str] = Field(
        default=None,
        description='The ID of the OIDC Identity Provider (IdP) associated to\nthe Workload Identity Pool.',
    )
    issuerUri: Optional[str] = Field(
        default=None, description='The OIDC issuer URL for this cluster.'
    )
    workloadPool: Optional[str] = Field(
        default=None,
        description='The Workload Identity Pool associated to the cluster.',
    )
