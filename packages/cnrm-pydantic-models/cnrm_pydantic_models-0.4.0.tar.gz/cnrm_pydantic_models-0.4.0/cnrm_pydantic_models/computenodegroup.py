# generated by datamodel-codegen:
#   filename:  computenodegroup_v1beta1.json
#   timestamp: 2024-03-18T21:07:10+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class AutoscalingPolicy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    maxNodes: Optional[int] = Field(
        default=None,
        description='Immutable. Maximum size of the node group. Set to a value less than or equal\nto 100 and greater than or equal to min-nodes.',
    )
    minNodes: Optional[int] = Field(
        default=None,
        description='Immutable. Minimum size of the node group. Must be less\nthan or equal to max-nodes. The default value is 0.',
    )
    mode: Optional[str] = Field(
        default=None,
        description='Immutable. The autoscaling mode. Set to one of the following:\n  - OFF: Disables the autoscaler.\n  - ON: Enables scaling in and scaling out.\n  - ONLY_SCALE_OUT: Enables only scaling out.\n  You must use this mode if your node groups are configured to\n  restart their hosted VMs on minimal servers. Possible values: ["OFF", "ON", "ONLY_SCALE_OUT"].',
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class IdRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `Project` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class IdRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ..., description='Allowed value: The `name` field of a `Project` resource.'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class MaintenanceWindow(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    startTime: str = Field(
        ...,
        description='Immutable. instances.start time of the window. This must be in UTC format that resolves to one of 00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example, both 13:00-5 and 08:00 are valid.',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class NodeTemplateRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeNodeTemplate` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NodeTemplateRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeNodeTemplate` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectIdRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `Project` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectIdRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ..., description='Allowed value: The `name` field of a `Project` resource.'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectMapItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    idRef: Union[IdRef, IdRef1] = Field(
        ..., description='The key of this project config in the parent map.'
    )
    projectIdRef: Union[ProjectIdRef, ProjectIdRef1] = Field(
        ...,
        description='The project id/number should be the same as the key of this project\nconfig in the project map.',
    )


class ShareSettings(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    projectMap: Optional[List[ProjectMapItem]] = Field(
        default=None,
        description="Immutable. A map of project id and project config. This is only valid when shareType's value is SPECIFIC_PROJECTS.",
    )
    shareType: str = Field(
        ...,
        description='Immutable. Node group sharing type. Possible values: ["ORGANIZATION", "SPECIFIC_PROJECTS", "LOCAL"].',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    autoscalingPolicy: Optional[AutoscalingPolicy] = Field(
        default=None,
        description='Immutable. If you use sole-tenant nodes for your workloads, you can use the node\ngroup autoscaler to automatically manage the sizes of your node groups.',
    )
    description: Optional[str] = Field(
        default=None,
        description='Immutable. An optional textual description of the resource.',
    )
    initialSize: Optional[int] = Field(
        default=None,
        description="Immutable. The initial number of nodes in the node group. One of 'initial_size' or 'size' must be specified.",
    )
    maintenancePolicy: Optional[str] = Field(
        default=None,
        description='Immutable. Specifies how to handle instances when a node in the group undergoes maintenance. Set to one of: DEFAULT, RESTART_IN_PLACE, or MIGRATE_WITHIN_NODE_GROUP. The default value is DEFAULT.',
    )
    maintenanceWindow: Optional[MaintenanceWindow] = Field(
        default=None,
        description='Immutable. contains properties for the timeframe of maintenance.',
    )
    nodeTemplateRef: Union[NodeTemplateRef, NodeTemplateRef1] = Field(
        ..., description='The node template to which this node group belongs.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    shareSettings: Optional[ShareSettings] = Field(
        default=None, description='Immutable. Share settings for the node group.'
    )
    size: Optional[int] = Field(
        default=None,
        description="Immutable. The total number of nodes in the node group. One of 'initial_size' or 'size' must be specified.",
    )
    zone: str = Field(
        ..., description='Immutable. Zone where this node group is located.'
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    creationTimestamp: Optional[str] = Field(
        default=None, description='Creation timestamp in RFC3339 text format.'
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    selfLink: Optional[str] = None
