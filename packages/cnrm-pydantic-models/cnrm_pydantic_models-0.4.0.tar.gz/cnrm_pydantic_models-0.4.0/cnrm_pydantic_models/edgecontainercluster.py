# generated by datamodel-codegen:
#   filename:  edgecontainercluster_v1beta1.json
#   timestamp: 2024-03-18T21:07:55+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class AdminUsers(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    usernameRef: Union[UsernameRef, UsernameRef1]


class Authorization(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    adminUsers: AdminUsers = Field(
        ...,
        description='User that will be granted the cluster-admin role on the cluster, providing\nfull access to the cluster. Currently, this is a singular field, but will\nbe expanded to allow multiple admins in the future.',
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class ControlPlane(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    local: Optional[Local] = Field(
        default=None, description='Immutable. Local control plane configuration.'
    )
    remote: Optional[Remote] = Field(
        default=None, description='Immutable. Remote control plane configuration.'
    )


class ControlPlaneEncryption(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kmsKeyActiveVersion: Optional[str] = Field(
        default=None,
        description='The Cloud KMS CryptoKeyVersion currently in use for protecting control\nplane disks. Only applicable if kms_key is set.',
    )
    kmsKeyRef: Optional[Union[KmsKeyRef, KmsKeyRef1]] = None
    kmsKeyState: Optional[str] = Field(
        default=None,
        description="Availability of the Cloud KMS CryptoKey. If not 'KEY_AVAILABLE', then\nnodes may go offline as they cannot access their local data. This can be\ncaused by a lack of permissions to use the key, or if the key is disabled\nor deleted.",
    )
    kmsStatus: Optional[List[KmsStatu]] = Field(
        default=None,
        description="Error status returned by Cloud KMS when using this key. This field may be\npopulated only if 'kms_key_state' is not 'KMS_KEY_STATE_KEY_AVAILABLE'.\nIf populated, this field contains the error status reported by Cloud KMS.",
    )


class Fleet(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    membership: Optional[str] = Field(
        default=None,
        description="The name of the managed Hub Membership resource associated to this cluster.\nMembership names are formatted as\n'projects/<project-number>/locations/global/membership/<cluster-id>'.",
    )
    projectRef: Union[ProjectRef, ProjectRef1] = Field(
        ...,
        description='The number of the Fleet host project where this cluster will be registered.',
    )


class Ingress(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    disabled: Optional[bool] = Field(
        default=None, description='Whether Ingress is disabled.'
    )
    ipv4Vip: Optional[str] = Field(default=None, description='Ingress VIP.')


class KmsKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsStatu(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    code: Optional[int] = Field(
        default=None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    message: Optional[str] = Field(
        default=None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class Local(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    machineFilter: Optional[str] = Field(
        default=None,
        description='Only machines matching this filter will be allowed to host control\nplane nodes. The filtering language accepts strings like "name=<name>",\nand is documented here: [AIP-160](https://google.aip.dev/160).',
    )
    nodeCount: Optional[int] = Field(
        default=None,
        description='The number of nodes to serve as replicas of the Control Plane.\nOnly 1 and 3 are supported.',
    )
    nodeLocation: Optional[str] = Field(
        default=None,
        description="Immutable. Name of the Google Distributed Cloud Edge zones where this node pool\nwill be created. For example: 'us-central1-edge-customer-a'.",
    )
    sharedDeploymentPolicy: Optional[str] = Field(
        default=None,
        description='Policy configuration about how user applications are deployed. Possible values: ["SHARED_DEPLOYMENT_POLICY_UNSPECIFIED", "ALLOWED", "DISALLOWED"].',
    )


class MaintenanceEvent(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createTime: Optional[str] = Field(
        default=None,
        description='The time when the maintenance event request was created.',
    )
    endTime: Optional[str] = Field(
        default=None,
        description='The time when the maintenance event ended, either successfully or not. If\nthe maintenance event is split into multiple maintenance windows,\nend_time is only updated when the whole flow ends.',
    )
    operation: Optional[str] = Field(
        default=None,
        description='The operation for running the maintenance event. Specified in the format\nprojects/*/locations/*/operations/*. If the maintenance event is split\ninto multiple operations (e.g. due to maintenance windows), the latest\none is recorded.',
    )
    schedule: Optional[str] = Field(
        default=None, description='The schedule of the maintenance event.'
    )
    startTime: Optional[str] = Field(
        default=None, description='The time when the maintenance event started.'
    )
    state: Optional[str] = Field(
        default=None, description='Indicates the maintenance event state.'
    )
    targetVersion: Optional[str] = Field(
        default=None, description='The target version of the cluster.'
    )
    type: Optional[str] = Field(
        default=None, description='Indicates the maintenance event type.'
    )
    updateTime: Optional[str] = Field(
        default=None,
        description='The time when the maintenance event message was updated.',
    )
    uuid: Optional[str] = Field(
        default=None, description='UUID of the maintenance event.'
    )


class MaintenancePolicy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    window: Window = Field(
        ...,
        description='Specifies the maintenance window in which maintenance may be performed.',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class Networking(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    clusterIpv4CidrBlocks: List[str] = Field(
        ...,
        description='Immutable. All pods in the cluster are assigned an RFC1918 IPv4 address from these\nblocks. Only a single block is supported. This field cannot be changed\nafter creation.',
    )
    clusterIpv6CidrBlocks: Optional[List[str]] = Field(
        default=None,
        description='Immutable. If specified, dual stack mode is enabled and all pods in the cluster are\nassigned an IPv6 address from these blocks alongside from an IPv4\naddress. Only a single block is supported. This field cannot be changed\nafter creation.',
    )
    networkType: Optional[str] = Field(
        default=None,
        description='IP addressing type of this cluster i.e. SINGLESTACK_V4 vs DUALSTACK_V4_V6.',
    )
    servicesIpv4CidrBlocks: List[str] = Field(
        ...,
        description='Immutable. All services in the cluster are assigned an RFC1918 IPv4 address from these\nblocks. Only a single block is supported. This field cannot be changed\nafter creation.',
    )
    servicesIpv6CidrBlocks: Optional[List[str]] = Field(
        default=None,
        description='Immutable. If specified, dual stack mode is enabled and all services in the cluster are\nassigned an IPv6 address from these blocks alongside from an IPv4\naddress. Only a single block is supported. This field cannot be changed\nafter creation.',
    )


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: string of the format `projects/{{value}}`, where {{value}} is the `number` field of a `Project` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: string of the format `projects/{{value}}`, where {{value}} is the `number` field of a `Project` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `Project` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ..., description='Allowed value: The `name` field of a `Project` resource.'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class RecurringWindow(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    recurrence: Optional[str] = Field(
        default=None,
        description='An RRULE (https://tools.ietf.org/html/rfc5545#section-3.8.5.3) for how\nthis window recurs. They go on for the span of time between the start and\nend time.',
    )
    window: Optional[Window1] = Field(
        default=None, description='Represents an arbitrary window of time.'
    )


class Remote(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nodeLocation: Optional[str] = Field(
        default=None,
        description="Immutable. Name of the Google Distributed Cloud Edge zones where this node pool\nwill be created. For example: 'us-central1-edge-customer-a'.",
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    authorization: Authorization = Field(
        ...,
        description='Immutable. RBAC policy that will be applied and managed by GEC.',
    )
    controlPlane: Optional[ControlPlane] = Field(
        default=None, description='The configuration of the cluster control plane.'
    )
    controlPlaneEncryption: Optional[ControlPlaneEncryption] = Field(
        default=None,
        description='Remote control plane disk encryption options. This field is only used when\nenabling CMEK support.',
    )
    defaultMaxPodsPerNode: Optional[int] = Field(
        default=None,
        description='The default maximum number of pods per node used if a maximum value is not\nspecified explicitly for a node pool in this cluster. If unspecified, the\nKubernetes default value will be used.',
    )
    externalLoadBalancerIpv4AddressPools: Optional[List[str]] = Field(
        default=None,
        description='Address pools for cluster data plane external load balancing.',
    )
    fleet: Fleet = Field(
        ...,
        description='Immutable. Fleet related configuration.\nFleets are a Google Cloud concept for logically organizing clusters,\nletting you use and manage multi-cluster capabilities and apply\nconsistent policies across your systems.',
    )
    location: str = Field(..., description='Immutable. The location of the resource.')
    maintenancePolicy: Optional[MaintenancePolicy] = Field(
        default=None, description='Cluster-wide maintenance policy configuration.'
    )
    networking: Networking = Field(
        ...,
        description='Fleet related configuration.\nFleets are a Google Cloud concept for logically organizing clusters,\nletting you use and manage multi-cluster capabilities and apply\nconsistent policies across your systems.',
    )
    projectRef: Union[ProjectRef2, ProjectRef3] = Field(
        ..., description='The project that this resource belongs to.'
    )
    releaseChannel: Optional[str] = Field(
        default=None,
        description='The release channel a cluster is subscribed to. Possible values: ["RELEASE_CHANNEL_UNSPECIFIED", "NONE", "REGULAR"].',
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    systemAddonsConfig: Optional[SystemAddonsConfig] = Field(
        default=None,
        description='Config that customers are allowed to define for GDCE system add-ons.',
    )
    targetVersion: Optional[str] = Field(
        default=None, description='The target cluster version. For example: "1.5.0".'
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    clusterCaCertificate: Optional[str] = Field(
        default=None,
        description="The PEM-encoded public certificate of the cluster's CA.",
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    controlPlaneVersion: Optional[str] = Field(
        default=None, description='The control plane release version.'
    )
    createTime: Optional[str] = Field(
        default=None,
        description='The time the cluster was created, in RFC3339 text format.',
    )
    endpoint: Optional[str] = Field(
        default=None, description='The IP address of the Kubernetes API server.'
    )
    maintenanceEvents: Optional[List[MaintenanceEvent]] = Field(
        default=None,
        description='All the maintenance events scheduled for the cluster, including the ones\nongoing, planned for the future and done in the past (up to 90 days).',
    )
    nodeVersion: Optional[str] = Field(
        default=None,
        description='The lowest release version among all worker nodes. This field can be empty\nif the cluster does not have any worker nodes.',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    port: Optional[int] = Field(
        default=None, description='The port number of the Kubernetes API server.'
    )
    status: Optional[str] = Field(
        default=None, description='Indicates the status of the cluster.'
    )
    updateTime: Optional[str] = Field(
        default=None,
        description='The time the cluster was last updated, in RFC3339 text format.',
    )


class SystemAddonsConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ingress: Optional[Ingress] = Field(
        default=None,
        description='Config for the Ingress add-on which allows customers to create an Ingress\nobject to manage external access to the servers in a cluster. The add-on\nconsists of istiod and istio-ingress.',
    )


class UsernameRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class UsernameRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Window(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    recurringWindow: RecurringWindow = Field(
        ..., description='Represents an arbitrary window of time that recurs.'
    )


class Window1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    endTime: Optional[str] = Field(
        default=None,
        description='The time that the window ends. The end time must take place after the\nstart time.',
    )
    startTime: Optional[str] = Field(
        default=None, description='The time that the window first starts.'
    )
