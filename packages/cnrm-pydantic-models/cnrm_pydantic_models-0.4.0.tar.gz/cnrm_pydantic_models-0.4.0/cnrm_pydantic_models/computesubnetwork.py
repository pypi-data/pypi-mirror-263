# generated by datamodel-codegen:
#   filename:  computesubnetwork_v1beta1.json
#   timestamp: 2024-03-18T21:07:22+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class LogConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    aggregationInterval: Optional[str] = Field(
        default=None,
        description='Can only be specified if VPC flow logging for this subnetwork is enabled.\nToggles the aggregation interval for collecting flow logs. Increasing the\ninterval time will reduce the amount of generated flow logs for long\nlasting connections. Default is an interval of 5 seconds per connection. Default value: "INTERVAL_5_SEC" Possible values: ["INTERVAL_5_SEC", "INTERVAL_30_SEC", "INTERVAL_1_MIN", "INTERVAL_5_MIN", "INTERVAL_10_MIN", "INTERVAL_15_MIN"].',
    )
    filterExpr: Optional[str] = Field(
        default=None,
        description="Export filter used to define which VPC flow logs should be logged, as as CEL expression. See\nhttps://cloud.google.com/vpc/docs/flow-logs#filtering for details on how to format this field.\nThe default value is 'true', which evaluates to include everything.",
    )
    flowSampling: Optional[float] = Field(
        default=None,
        description='Can only be specified if VPC flow logging for this subnetwork is enabled.\nThe value of the field must be in [0, 1]. Set the sampling rate of VPC\nflow logs within the subnetwork where 1.0 means all collected logs are\nreported and 0.0 means no logs are reported. Default is 0.5 which means\nhalf of all collected logs are reported.',
    )
    metadata: Optional[str] = Field(
        default=None,
        description='Can only be specified if VPC flow logging for this subnetwork is enabled.\nConfigures whether metadata fields should be added to the reported VPC\nflow logs. Default value: "INCLUDE_ALL_METADATA" Possible values: ["EXCLUDE_ALL_METADATA", "INCLUDE_ALL_METADATA", "CUSTOM_METADATA"].',
    )
    metadataFields: Optional[List[str]] = Field(
        default=None,
        description='List of metadata fields that should be added to reported logs.\nCan only be specified if VPC flow logs for this subnetwork is enabled and "metadata" is set to CUSTOM_METADATA.',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class NetworkRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeNetwork` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NetworkRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeNetwork` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SecondaryIpRangeItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ipCidrRange: str = Field(
        ...,
        description='The range of IP addresses belonging to this subnetwork secondary\nrange. Provide this property when you create the subnetwork.\nRanges must be unique and non-overlapping with all primary and\nsecondary IP ranges within a network. Only IPv4 is supported.',
    )
    rangeName: str = Field(
        ...,
        description='The name associated with this subnetwork secondary range, used\nwhen adding an alias IP range to a VM instance. The name must\nbe 1-63 characters long, and comply with RFC1035. The name\nmust be unique within the subnetwork.',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = Field(
        default=None,
        description='Immutable. An optional description of this resource. Provide this property when\nyou create the resource. This field can be set only at resource\ncreation time.',
    )
    ipCidrRange: str = Field(
        ...,
        description='The range of internal addresses that are owned by this subnetwork.\nProvide this property when you create the subnetwork. For example,\n10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and\nnon-overlapping within a network. Only IPv4 is supported.',
    )
    ipv6AccessType: Optional[str] = Field(
        default=None,
        description='The access type of IPv6 address this subnet holds. It\'s immutable and can only be specified during creation\nor the first time the subnet is updated into IPV4_IPV6 dual stack. If the ipv6_type is EXTERNAL then this subnet\ncannot enable direct path. Possible values: ["EXTERNAL", "INTERNAL"].',
    )
    logConfig: Optional[LogConfig] = Field(
        default=None,
        description="This field denotes the VPC flow logging options for this subnetwork. If\nlogging is enabled, logs are exported to Cloud Logging. Flow logging\nisn't supported if the subnet 'purpose' field is set to subnetwork is\n'REGIONAL_MANAGED_PROXY' or 'GLOBAL_MANAGED_PROXY'.",
    )
    networkRef: Union[NetworkRef, NetworkRef1] = Field(
        ...,
        description='The network this subnet belongs to. Only networks that are in the\ndistributed mode can have subnetworks.',
    )
    privateIpGoogleAccess: Optional[bool] = Field(
        default=None,
        description='When enabled, VMs in this subnetwork without external IP addresses can\naccess Google APIs and services by using Private Google Access.',
    )
    privateIpv6GoogleAccess: Optional[str] = Field(
        default=None,
        description='The private IPv6 google access type for the VMs in this subnet.',
    )
    purpose: Optional[str] = Field(
        default=None,
        description="Immutable. The purpose of the resource. This field can be either 'PRIVATE_RFC_1918', 'REGIONAL_MANAGED_PROXY', 'GLOBAL_MANAGED_PROXY', or 'PRIVATE_SERVICE_CONNECT'.\nA subnet with purpose set to 'REGIONAL_MANAGED_PROXY' is a user-created subnetwork that is reserved for regional Envoy-based load balancers.\nA subnetwork in a given region with purpose set to 'GLOBAL_MANAGED_PROXY' is a proxy-only subnet and is shared between all the cross-regional Envoy-based load balancers.\nA subnetwork with purpose set to 'PRIVATE_SERVICE_CONNECT' reserves the subnet for hosting a Private Service Connect published service.\nNote that 'REGIONAL_MANAGED_PROXY' is the preferred setting for all regional Envoy load balancers.\nIf unspecified, the purpose defaults to 'PRIVATE_RFC_1918'.",
    )
    region: str = Field(
        ..., description='Immutable. The GCP region for this subnetwork.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    role: Optional[str] = Field(
        default=None,
        description='The role of subnetwork.\nCurrently, this field is only used when \'purpose\' is \'REGIONAL_MANAGED_PROXY\'.\nThe value can be set to \'ACTIVE\' or \'BACKUP\'.\nAn \'ACTIVE\' subnetwork is one that is currently being used for Envoy-based load balancers in a region.\nA \'BACKUP\' subnetwork is one that is ready to be promoted to \'ACTIVE\' or is currently draining. Possible values: ["ACTIVE", "BACKUP"].',
    )
    secondaryIpRange: Optional[List[SecondaryIpRangeItem]] = None
    stackType: Optional[str] = Field(
        default=None,
        description='The stack type for this subnet to identify whether the IPv6 feature is enabled or not.\nIf not specified IPV4_ONLY will be used. Possible values: ["IPV4_ONLY", "IPV4_IPV6"].',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    creationTimestamp: Optional[str] = Field(
        default=None, description='Creation timestamp in RFC3339 text format.'
    )
    externalIpv6Prefix: Optional[str] = Field(
        default=None,
        description='The range of external IPv6 addresses that are owned by this subnetwork.',
    )
    fingerprint: Optional[str] = Field(
        default=None,
        description='DEPRECATED. This field is not useful for users, and has been removed as an output. Fingerprint of this resource. This field is used internally during updates of this resource.',
    )
    gatewayAddress: Optional[str] = Field(
        default=None,
        description='The gateway address for default routes to reach destination addresses\noutside this subnetwork.',
    )
    internalIpv6Prefix: Optional[str] = Field(
        default=None,
        description='The internal IPv6 address range that is assigned to this subnetwork.',
    )
    ipv6CidrRange: Optional[str] = Field(
        default=None,
        description='The range of internal IPv6 addresses that are owned by this subnetwork.',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    selfLink: Optional[str] = None
