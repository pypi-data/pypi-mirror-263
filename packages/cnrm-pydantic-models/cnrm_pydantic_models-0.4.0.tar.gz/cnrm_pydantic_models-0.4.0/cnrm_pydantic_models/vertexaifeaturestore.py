# generated by datamodel-codegen:
#   filename:  vertexaifeaturestore_v1alpha1.json
#   timestamp: 2024-03-18T21:08:58+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class EncryptionSpec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kmsKeyName: str = Field(
        ...,
        description='The Cloud KMS resource identifier of the customer managed encryption key used to protect a resource. Has the form: projects/my-project/locations/my-region/keyRings/my-kr/cryptoKeys/my-key. The key needs to be in the same region as where the compute resource is created.',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class OnlineServingConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    fixedNodeCount: Optional[int] = Field(
        default=None,
        description='The number of nodes for each cluster. The number of nodes will not scale automatically but can be scaled manually by providing different values when updating.',
    )
    scaling: Optional[Scaling] = Field(
        default=None,
        description='Online serving scaling configuration. Only one of fixedNodeCount and scaling can be set. Setting one will reset the other.',
    )


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `Project` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ..., description='Allowed value: The `name` field of a `Project` resource.'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Scaling(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    maxNodeCount: int = Field(
        ...,
        description="The maximum number of nodes to scale up to. Must be greater than minNodeCount, and less than or equal to 10 times of 'minNodeCount'.",
    )
    minNodeCount: int = Field(
        ...,
        description='The minimum number of nodes to scale down to. Must be greater than or equal to 1.',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    encryptionSpec: Optional[EncryptionSpec] = Field(
        default=None,
        description='If set, both of the online and offline data storage will be secured by this key.',
    )
    forceDestroy: Optional[bool] = Field(
        default=None,
        description='If set to true, any EntityTypes and Features for this Featurestore will also be deleted.',
    )
    onlineServingConfig: Optional[OnlineServingConfig] = Field(
        default=None, description='Config for online serving resources.'
    )
    onlineStorageTtlDays: Optional[int] = Field(
        default=None,
        description='TTL in days for feature values that will be stored in online serving storage. The Feature Store online storage periodically removes obsolete feature values older than onlineStorageTtlDays since the feature generation time. Note that onlineStorageTtlDays should be less than or equal to offlineStorageTtlDays for each EntityType under a featurestore. If not set, default to 4000 days.',
    )
    projectRef: Union[ProjectRef, ProjectRef1] = Field(
        ..., description='The project that this resource belongs to.'
    )
    region: str = Field(
        ..., description='Immutable. The region of the dataset. eg us-central1.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    createTime: Optional[str] = Field(
        default=None,
        description='The timestamp of when the featurestore was created in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.',
    )
    etag: Optional[str] = Field(
        default=None,
        description='Used to perform consistent read-modify-write updates.',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    updateTime: Optional[str] = Field(
        default=None,
        description='The timestamp of when the featurestore was last updated in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits.',
    )
