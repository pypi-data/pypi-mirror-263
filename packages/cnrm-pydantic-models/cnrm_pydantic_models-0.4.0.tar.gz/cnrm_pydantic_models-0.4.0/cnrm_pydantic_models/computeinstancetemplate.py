# generated by datamodel-codegen:
#   filename:  computeinstancetemplate_v1beta1.json
#   timestamp: 2024-03-18T21:07:07+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class AccessConfigItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    natIpRef: Optional[Union[NatIpRef, NatIpRef1]] = None
    networkTier: Optional[str] = Field(
        default=None,
        description='Immutable. The networking tier used for configuring this instance template. This field can take the following values: PREMIUM, STANDARD, FIXED_STANDARD. If this field is not specified, it is assumed to be PREMIUM.',
    )
    publicPtrDomainName: Optional[str] = Field(
        default=None,
        description='The DNS domain name for the public PTR record.The DNS domain name for the public PTR record.',
    )


class AdvancedMachineFeatures(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enableNestedVirtualization: Optional[bool] = Field(
        default=None,
        description='Immutable. Whether to enable nested virtualization or not.',
    )
    threadsPerCore: Optional[int] = Field(
        default=None,
        description='Immutable. The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.',
    )
    visibleCoreCount: Optional[int] = Field(
        default=None,
        description="Immutable. The number of physical cores to expose to an instance. Multiply by the number of threads per core to compute the total number of virtual CPUs to expose to the instance. If unset, the number of cores is inferred from the instance\\'s nominal CPU count and the underlying platform\\'s SMT width.",
    )


class AliasIpRangeItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ipCidrRange: str = Field(
        ...,
        description='Immutable. The IP CIDR range represented by this alias IP range. This IP CIDR range must belong to the specified subnetwork and cannot contain IP addresses reserved by system or used by other network interfaces. At the time of writing only a netmask (e.g. /24) may be supplied, with a CIDR format resulting in an API error.',
    )
    subnetworkRangeName: Optional[str] = Field(
        default=None,
        description='Immutable. The subnetwork secondary range name specifying the secondary range from which to allocate the IP CIDR range for this alias IP range. If left unspecified, the primary range of the subnetwork will be used.',
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class ConfidentialInstanceConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enableConfidentialCompute: bool = Field(
        ...,
        description='Immutable. Defines whether the instance should have confidential compute enabled.',
    )


class DiskEncryptionKey(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kmsKeyRef: Union[KmsKeyRef, KmsKeyRef1]


class DiskItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    autoDelete: Optional[bool] = Field(
        default=None,
        description='Immutable. Whether or not the disk should be auto-deleted. This defaults to true.',
    )
    boot: Optional[bool] = Field(
        default=None, description='Immutable. Indicates that this is a boot disk.'
    )
    deviceName: Optional[str] = Field(
        default=None,
        description='Immutable. A unique device name that is reflected into the /dev/ tree of a Linux operating system running within the instance. If not specified, the server chooses a default device name to apply to this disk.',
    )
    diskEncryptionKey: Optional[DiskEncryptionKey] = Field(
        default=None,
        description='Immutable. Encrypts or decrypts a disk using a customer-supplied encryption key.',
    )
    diskName: Optional[str] = Field(
        default=None,
        description='Immutable. Name of the disk. When not provided, this defaults to the name of the instance.',
    )
    diskSizeGb: Optional[int] = Field(
        default=None,
        description='Immutable. The size of the image in gigabytes. If not specified, it will inherit the size of its base image. For SCRATCH disks, the size must be one of 375 or 3000 GB, with a default of 375 GB.',
    )
    diskType: Optional[str] = Field(
        default=None,
        description='Immutable. The Google Compute Engine disk type. Such as "pd-ssd", "local-ssd", "pd-balanced" or "pd-standard".',
    )
    interface: Optional[str] = Field(
        default=None,
        description='Immutable. Specifies the disk interface to use for attaching this disk.',
    )
    labels: Optional[Dict[str, str]] = Field(
        default=None,
        description='Immutable. A set of key/value label pairs to assign to disks,.',
    )
    mode: Optional[str] = Field(
        default=None,
        description='Immutable. The mode in which to attach this disk, either READ_WRITE or READ_ONLY. If you are attaching or creating a boot disk, this must read-write mode.',
    )
    provisionedIops: Optional[int] = Field(
        default=None,
        description='Immutable. Indicates how many IOPS to provision for the disk. This sets the number of I/O operations per second that the disk can handle. Values must be between 10,000 and 120,000. For more details, see the [Extreme persistent disk documentation](https://cloud.google.com/compute/docs/disks/extreme-persistent-disk).',
    )
    resourcePolicies: Optional[List[Union[ResourcePolicies, ResourcePolicies1]]] = None
    sourceDiskRef: Optional[Union[SourceDiskRef, SourceDiskRef1]] = None
    sourceImageEncryptionKey: Optional[SourceImageEncryptionKey] = Field(
        default=None,
        description='Immutable. The customer-supplied encryption key of the source\nimage. Required if the source image is protected by a\ncustomer-supplied encryption key.\n\nInstance templates do not store customer-supplied\nencryption keys, so you cannot create disks for\ninstances in a managed instance group if the source\nimages are encrypted with your own keys.',
    )
    sourceImageRef: Optional[Union[SourceImageRef, SourceImageRef1]] = None
    sourceSnapshotEncryptionKey: Optional[SourceSnapshotEncryptionKey] = Field(
        default=None,
        description='Immutable. The customer-supplied encryption key of the source snapshot.',
    )
    sourceSnapshotRef: Optional[Union[SourceSnapshotRef, SourceSnapshotRef1]] = Field(
        default=None,
        description='The source snapshot to create this disk. When creating a new\ninstance, one of initializeParams.sourceSnapshot,\ninitializeParams.sourceImage, or disks.source is required except for\nlocal SSD.',
    )
    type: Optional[str] = Field(
        default=None,
        description='Immutable. The type of Google Compute Engine disk, can be either "SCRATCH" or "PERSISTENT".',
    )


class GuestAcceleratorItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    count: int = Field(
        ...,
        description='Immutable. The number of the guest accelerator cards exposed to this instance.',
    )
    type: str = Field(
        ...,
        description='Immutable. The accelerator type resource to expose to this instance. E.g. nvidia-tesla-k80.',
    )


class Ipv6AccessConfigItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    externalIpv6: Optional[str] = Field(
        default=None,
        description='The first IPv6 address of the external IPv6 range associated with this instance, prefix length is stored in externalIpv6PrefixLength in ipv6AccessConfig. The field is output only, an IPv6 address from a subnetwork associated with the instance will be allocated dynamically.',
    )
    externalIpv6PrefixLength: Optional[str] = Field(
        default=None, description='The prefix length of the external IPv6 range.'
    )
    name: Optional[str] = Field(
        default=None, description='The name of this access configuration.'
    )
    networkTier: str = Field(
        ...,
        description='The service-level to be provided for IPv6 traffic when the subnet has an external subnet. Only PREMIUM tier is valid for IPv6.',
    )
    publicPtrDomainName: Optional[str] = Field(
        default=None,
        description='The domain name to be used when creating DNSv6 records for the external IPv6 ranges.',
    )


class KmsKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeySelfLinkRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeySelfLinkRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeySelfLinkRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeySelfLinkRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyServiceAccountRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyServiceAccountRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyServiceAccountRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyServiceAccountRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class LocalSsdRecoveryTimeoutItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nanos: Optional[int] = Field(
        default=None,
        description="Immutable. Span of time that's a fraction of a second at nanosecond\nresolution. Durations less than one second are represented\nwith a 0 seconds field and a positive nanos field. Must\nbe from 0 to 999,999,999 inclusive.",
    )
    seconds: int = Field(
        ...,
        description='Immutable. Span of time at a resolution of a second.\nMust be from 0 to 315,576,000,000 inclusive.',
    )


class MaxRunDuration(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nanos: Optional[int] = Field(
        default=None,
        description="Immutable. Span of time that's a fraction of a second at nanosecond\nresolution. Durations less than one second are represented\nwith a 0 seconds field and a positive nanos field. Must\nbe from 0 to 999,999,999 inclusive.",
    )
    seconds: int = Field(
        ...,
        description='Immutable. Span of time at a resolution of a second.\nMust be from 0 to 315,576,000,000 inclusive.',
    )


class Metadatum(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: str
    value: str


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class NatIpRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `address` field of a `ComputeAddress` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NatIpRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `address` field of a `ComputeAddress` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NetworkInterfaceItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accessConfig: Optional[List[AccessConfigItem]] = None
    aliasIpRange: Optional[List[AliasIpRangeItem]] = Field(
        default=None,
        description='Immutable. An array of alias IP ranges for this network interface. Can only be specified for network interfaces on subnet-mode networks.',
    )
    internalIpv6PrefixLength: Optional[int] = Field(
        default=None,
        description='The prefix length of the primary internal IPv6 range.',
    )
    ipv6AccessConfig: Optional[List[Ipv6AccessConfigItem]] = Field(
        default=None,
        description='An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.',
    )
    ipv6AccessType: Optional[str] = Field(
        default=None,
        description='One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork.',
    )
    ipv6Address: Optional[str] = Field(
        default=None,
        description="An IPv6 internal network address for this network interface. If not specified, Google Cloud will automatically assign an internal IPv6 address from the instance's subnetwork.",
    )
    name: Optional[str] = Field(
        default=None, description='The name of the network_interface.'
    )
    networkAttachment: Optional[str] = Field(
        default=None,
        description='Immutable. The URL of the network attachment that this interface should connect to in the following format: projects/{projectNumber}/regions/{region_name}/networkAttachments/{network_attachment_name}.',
    )
    networkIp: Optional[str] = Field(
        default=None,
        description='Immutable. The private IP address to assign to the instance. If empty, the address will be automatically assigned.',
    )
    networkRef: Optional[Union[NetworkRef, NetworkRef1]] = None
    nicType: Optional[str] = Field(
        default=None,
        description='Immutable. The type of vNIC to be used on this interface. Possible values:GVNIC, VIRTIO_NET.',
    )
    queueCount: Optional[int] = Field(
        default=None,
        description="Immutable. The networking queue count that's specified by users for the network interface. Both Rx and Tx queues will be set to this number. It will be empty if not specified.",
    )
    stackType: Optional[str] = Field(
        default=None,
        description='The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used.',
    )
    subnetworkProject: Optional[str] = Field(
        default=None,
        description='Immutable. The ID of the project in which the subnetwork belongs. If it is not provided, the provider project is used.',
    )
    subnetworkRef: Optional[Union[SubnetworkRef, SubnetworkRef1]] = None


class NetworkPerformanceConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    totalEgressBandwidthTier: str = Field(
        ...,
        description='Immutable. The egress bandwidth tier to enable. Possible values:TIER_1, DEFAULT.',
    )


class NetworkRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeNetwork` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NetworkRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeNetwork` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NodeAffinity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[Dict[str, Any]] = None


class ReservationAffinity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    specificReservation: Optional[SpecificReservation] = Field(
        default=None,
        description='Immutable. Specifies the label selector for the reservation to use.',
    )
    type: str = Field(
        ...,
        description='Immutable. The type of reservation from which this instance can consume resources.',
    )


class ResourcePolicies(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeResourcePolicy` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ResourcePolicies1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeResourcePolicy` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ResourcePolicies2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeResourcePolicy` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ResourcePolicies3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeResourcePolicy` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Scheduling(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    automaticRestart: Optional[bool] = Field(
        default=None,
        description='Immutable. Specifies whether the instance should be automatically restarted if it is terminated by Compute Engine (not terminated by a user). This defaults to true.',
    )
    instanceTerminationAction: Optional[str] = Field(
        default=None,
        description='Immutable. Specifies the action GCE should take when SPOT VM is preempted.',
    )
    localSsdRecoveryTimeout: Optional[List[LocalSsdRecoveryTimeoutItem]] = Field(
        default=None,
        description='Specifies the maximum amount of time a Local Ssd Vm should wait while\n  recovery of the Local Ssd state is attempted. Its value should be in\n  between 0 and 168 hours with hour granularity and the default value being 1\n  hour.',
    )
    maintenanceInterval: Optional[str] = Field(
        default=None,
        description='Specifies the frequency of planned maintenance events. The accepted values are: PERIODIC.',
    )
    maxRunDuration: Optional[MaxRunDuration] = Field(
        default=None,
        description='Immutable. The timeout for new network connections to hosts.',
    )
    minNodeCpus: Optional[int] = Field(
        default=None, description='Minimum number of cpus for the instance.'
    )
    nodeAffinities: Optional[List[NodeAffinity]] = None
    onHostMaintenance: Optional[str] = Field(
        default=None,
        description='Immutable. Defines the maintenance behavior for this instance.',
    )
    preemptible: Optional[bool] = Field(
        default=None,
        description='Immutable. Allows instance to be preempted. This defaults to false.',
    )
    provisioningModel: Optional[str] = Field(
        default=None,
        description='Immutable. Whether the instance is spot. If this is set as SPOT.',
    )


class ServiceAccount(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    scopes: List[str] = Field(
        ...,
        description='Immutable. A list of service scopes. Both OAuth2 URLs and gcloud short names are supported. To allow full access to all Cloud APIs, use the cloud-platform scope.',
    )
    serviceAccountRef: Optional[Union[ServiceAccountRef, ServiceAccountRef1]] = None


class ServiceAccountRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ServiceAccountRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ShieldedInstanceConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enableIntegrityMonitoring: Optional[bool] = Field(
        default=None,
        description='Immutable. Compare the most recent boot measurements to the integrity policy baseline and return a pair of pass/fail results depending on whether they match or not. Defaults to true.',
    )
    enableSecureBoot: Optional[bool] = Field(
        default=None,
        description='Immutable. Verify the digital signature of all boot components, and halt the boot process if signature verification fails. Defaults to false.',
    )
    enableVtpm: Optional[bool] = Field(
        default=None,
        description='Immutable. Use a virtualized trusted platform module, which is a specialized computer chip you can use to encrypt objects like keys and certificates. Defaults to true.',
    )


class SourceDiskRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `ComputeDisk` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SourceDiskRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ..., description='Allowed value: The `name` field of a `ComputeDisk` resource.'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SourceImageEncryptionKey(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kmsKeySelfLinkRef: Union[KmsKeySelfLinkRef, KmsKeySelfLinkRef1] = Field(
        ...,
        description='The self link of the encryption key that is stored in Google Cloud\nKMS.',
    )
    kmsKeyServiceAccountRef: Optional[
        Union[KmsKeyServiceAccountRef, KmsKeyServiceAccountRef1]
    ] = Field(
        default=None,
        description='The service account being used for the encryption request for the\ngiven KMS key. If absent, the Compute Engine default service account\nis used.',
    )


class SourceImageRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeImage` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SourceImageRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeImage` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SourceSnapshotEncryptionKey(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kmsKeySelfLinkRef: Union[KmsKeySelfLinkRef2, KmsKeySelfLinkRef3] = Field(
        ...,
        description='The self link of the encryption key that is stored in Google Cloud\nKMS.',
    )
    kmsKeyServiceAccountRef: Optional[
        Union[KmsKeyServiceAccountRef2, KmsKeyServiceAccountRef3]
    ] = Field(
        default=None,
        description='The service account being used for the encryption request for the\ngiven KMS key. If absent, the Compute Engine default service account\nis used.',
    )


class SourceSnapshotRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeSnapshot` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SourceSnapshotRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeSnapshot` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    advancedMachineFeatures: Optional[AdvancedMachineFeatures] = Field(
        default=None,
        description='Immutable. Controls for advanced machine-related behavior features.',
    )
    canIpForward: Optional[bool] = Field(
        default=None,
        description='Immutable. Whether to allow sending and receiving of packets with non-matching source or destination IPs. This defaults to false.',
    )
    confidentialInstanceConfig: Optional[ConfidentialInstanceConfig] = Field(
        default=None,
        description='Immutable. The Confidential VM config being used by the instance. on_host_maintenance has to be set to TERMINATE or this will fail to create.',
    )
    description: Optional[str] = Field(
        default=None, description='Immutable. A brief description of this resource.'
    )
    disk: List[DiskItem] = Field(
        ...,
        description='Immutable. Disks to attach to instances created from this template. This can be specified multiple times for multiple disks.',
    )
    enableDisplay: Optional[bool] = Field(
        default=None,
        description='Immutable. Enable Virtual Displays on this instance. Note: allow_stopping_for_update must be set to true in order to update this field.',
    )
    guestAccelerator: Optional[List[GuestAcceleratorItem]] = Field(
        default=None,
        description='Immutable. List of the type and count of accelerator cards attached to the instance.',
    )
    instanceDescription: Optional[str] = Field(
        default=None, description='Immutable. A description of the instance.'
    )
    machineType: str = Field(
        ...,
        description='Immutable. The machine type to create. To create a machine with a custom type (such as extended memory), format the value like custom-VCPUS-MEM_IN_MB like custom-6-20480 for 6 vCPU and 20GB of RAM.',
    )
    metadata: Optional[List[Metadatum]] = None
    metadataStartupScript: Optional[str] = Field(
        default=None,
        description='Immutable. An alternative to using the startup-script metadata key, mostly to match the compute_instance resource. This replaces the startup-script metadata key on the created instance and thus the two mechanisms are not allowed to be used simultaneously.',
    )
    minCpuPlatform: Optional[str] = Field(
        default=None,
        description='Immutable. Specifies a minimum CPU platform. Applicable values are the friendly names of CPU platforms, such as Intel Haswell or Intel Skylake.',
    )
    namePrefix: Optional[str] = Field(
        default=None,
        description='Immutable. Creates a unique name beginning with the specified prefix. Conflicts with name.',
    )
    networkInterface: Optional[List[NetworkInterfaceItem]] = Field(
        default=None,
        description='Immutable. Networks to attach to instances created from this template. This can be specified multiple times for multiple networks.',
    )
    networkPerformanceConfig: Optional[NetworkPerformanceConfig] = Field(
        default=None,
        description='Immutable. Configures network performance settings for the instance. If not specified, the instance will be created with its default network performance configuration.',
    )
    region: Optional[str] = Field(
        default=None,
        description='Immutable. An instance template is a global resource that is not bound to a zone or a region. However, you can still specify some regional resources in an instance template, which restricts the template to the region where that resource resides. For example, a custom subnetwork resource is tied to a specific region. Defaults to the region of the Provider if no value is given.',
    )
    reservationAffinity: Optional[ReservationAffinity] = Field(
        default=None,
        description='Immutable. Specifies the reservations that this instance can consume from.',
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    resourcePolicies: Optional[List[Union[ResourcePolicies2, ResourcePolicies3]]] = None
    scheduling: Optional[Scheduling] = Field(
        default=None, description='Immutable. The scheduling strategy to use.'
    )
    serviceAccount: Optional[ServiceAccount] = Field(
        default=None,
        description='Immutable. Service account to attach to the instance.',
    )
    shieldedInstanceConfig: Optional[ShieldedInstanceConfig] = Field(
        default=None,
        description='Immutable. Enable Shielded VM on this instance. Shielded VM provides verifiable integrity to prevent against malware and rootkits. Defaults to disabled. Note: shielded_instance_config can only be used with boot images with shielded vm support.',
    )
    tags: Optional[List[str]] = Field(
        default=None, description='Immutable. Tags to attach to the instance.'
    )


class SpecificReservation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: str = Field(
        ...,
        description='Immutable. Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify compute.googleapis.com/reservation-name as the key and specify the name of your reservation as the only value.',
    )
    values: List[str] = Field(
        ...,
        description='Immutable. Corresponds to the label values of a reservation resource.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    metadataFingerprint: Optional[str] = Field(
        default=None, description='The unique fingerprint of the metadata.'
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    selfLink: Optional[str] = Field(
        default=None, description='The URI of the created resource.'
    )
    selfLinkUnique: Optional[str] = Field(
        default=None,
        description='A special URI of the created resource that uniquely identifies this instance template.',
    )
    tagsFingerprint: Optional[str] = Field(
        default=None, description='The unique fingerprint of the tags.'
    )


class SubnetworkRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeSubnetwork` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SubnetworkRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeSubnetwork` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )
