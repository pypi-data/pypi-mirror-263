# generated by datamodel-codegen:
#   filename:  computeregionperinstanceconfig_v1alpha1.json
#   timestamp: 2024-03-18T21:07:15+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class DiskItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    deleteRule: Optional[str] = Field(
        default=None,
        description='A value that prescribes what should happen to the stateful disk when the VM instance is deleted.\nThe available options are \'NEVER\' and \'ON_PERMANENT_INSTANCE_DELETION\'.\n\'NEVER\' - detach the disk when the VM is deleted, but do not delete the disk.\n\'ON_PERMANENT_INSTANCE_DELETION\' will delete the stateful disk when the VM is permanently\ndeleted from the instance group. Default value: "NEVER" Possible values: ["NEVER", "ON_PERMANENT_INSTANCE_DELETION"].',
    )
    deviceName: str = Field(
        ...,
        description='A unique device name that is reflected into the /dev/ tree of a Linux operating system running within the instance.',
    )
    mode: Optional[str] = Field(
        default=None,
        description='The mode of the disk. Default value: "READ_WRITE" Possible values: ["READ_ONLY", "READ_WRITE"].',
    )
    source: str = Field(
        ...,
        description="The URI of an existing persistent disk to attach under the specified device-name in the format\n'projects/project-id/zones/zone/disks/disk-name'.",
    )


class ExternalIpItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    autoDelete: Optional[str] = Field(
        default=None,
        description='These stateful IPs will never be released during autohealing, update or VM instance recreate operations. This flag is used to configure if the IP reservation should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted. Default value: "NEVER" Possible values: ["NEVER", "ON_PERMANENT_INSTANCE_DELETION"].',
    )
    interfaceName: str
    ipAddress: Optional[IpAddress] = Field(
        default=None, description='Ip address representation.'
    )


class InternalIpItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    autoDelete: Optional[str] = Field(
        default=None,
        description='These stateful IPs will never be released during autohealing, update or VM instance recreate operations. This flag is used to configure if the IP reservation should be deleted after it is no longer used by the group, e.g. when the given instance or the whole group is deleted. Default value: "NEVER" Possible values: ["NEVER", "ON_PERMANENT_INSTANCE_DELETION"].',
    )
    interfaceName: str
    ipAddress: Optional[IpAddress] = Field(
        default=None, description='Ip address representation.'
    )


class IpAddress(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    address: Optional[str] = Field(
        default=None, description='The URL of the reservation for this IP address.'
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class PreservedState(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    disk: Optional[List[DiskItem]] = Field(
        default=None, description='Stateful disks for the instance.'
    )
    externalIp: Optional[List[ExternalIpItem]] = Field(
        default=None,
        description='Preserved external IPs defined for this instance. This map is keyed with the name of the network interface.',
    )
    internalIp: Optional[List[InternalIpItem]] = Field(
        default=None,
        description='Preserved internal IPs defined for this instance. This map is keyed with the name of the network interface.',
    )
    metadata: Optional[Dict[str, str]] = Field(
        default=None,
        description='Preserved metadata defined for this instance. This is a list of key->value pairs.',
    )


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `Project` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ..., description='Allowed value: The `name` field of a `Project` resource.'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class RegionInstanceGroupManagerRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `ComputeRegionInstanceGroupManager` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class RegionInstanceGroupManagerRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `name` field of a `ComputeRegionInstanceGroupManager` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    minimalAction: Optional[str] = Field(
        default=None,
        description="The minimal action to perform on the instance during an update.\nDefault is 'NONE'. Possible values are:\n* REPLACE\n* RESTART\n* REFRESH\n* NONE.",
    )
    mostDisruptiveAllowedAction: Optional[str] = Field(
        default=None,
        description="The most disruptive action to perform on the instance during an update.\nDefault is 'REPLACE'. Possible values are:\n* REPLACE\n* RESTART\n* REFRESH\n* NONE.",
    )
    preservedState: Optional[PreservedState] = Field(
        default=None, description='The preserved state for this instance.'
    )
    projectRef: Union[ProjectRef, ProjectRef1] = Field(
        ..., description='The project that this resource belongs to.'
    )
    region: str = Field(
        ...,
        description='Immutable. Region where the containing instance group manager is located.',
    )
    regionInstanceGroupManagerRef: Union[
        RegionInstanceGroupManagerRef, RegionInstanceGroupManagerRef1
    ]
    removeInstanceStateOnDestroy: Optional[bool] = Field(
        default=None,
        description='When true, deleting this config will immediately remove any specified state from the underlying instance.\nWhen false, deleting this config will *not* immediately remove any state from the underlying instance.\nState will be removed on the next instance recreation or update.',
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
