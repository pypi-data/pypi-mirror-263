# generated by datamodel-codegen:
#   filename:  gkehubfeaturemembership_v1beta1.json
#   timestamp: 2024-03-18T21:08:03+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class Binauthz(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: Optional[bool] = Field(
        default=None, description='Whether binauthz is enabled in this cluster.'
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class ConfigSync(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    git: Optional[Git] = None
    oci: Optional[Oci] = None
    preventDrift: Optional[bool] = Field(
        default=None,
        description='Set to true to enable the Config Sync admission webhook to prevent drifts. If set to `false`, disables the Config Sync admission webhook and does not prevent drifts.',
    )
    sourceFormat: Optional[str] = Field(
        default=None,
        description='Specifies whether the Config Sync Repo is in "hierarchical" or "unstructured" mode.',
    )


class Configmanagement(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    binauthz: Optional[Binauthz] = Field(
        default=None, description='Binauthz configuration for the cluster.'
    )
    configSync: Optional[ConfigSync] = Field(
        default=None, description='Config Sync configuration for the cluster.'
    )
    hierarchyController: Optional[HierarchyController] = Field(
        default=None, description='Hierarchy Controller configuration for the cluster.'
    )
    policyController: Optional[PolicyController] = Field(
        default=None, description='Policy Controller configuration for the cluster.'
    )
    version: Optional[str] = Field(
        default=None,
        description='Optional. Version of ACM to install. Defaults to the latest version.',
    )


class FeatureRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='The name of the feature\n\nAllowed value: The Google Cloud resource name of a `GKEHubFeature` resource (format: `projects/{{project}}/locations/{{location}}/features/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class FeatureRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='The name of the feature\n\nAllowed value: The Google Cloud resource name of a `GKEHubFeature` resource (format: `projects/{{project}}/locations/{{location}}/features/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class GcpServiceAccountRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='The GCP Service Account Email used for auth when secretType is gcpServiceAccount.\n\nAllowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class GcpServiceAccountRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='The GCP Service Account Email used for auth when secretType is gcpServiceAccount.\n\nAllowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class GcpServiceAccountRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='The GCP Service Account Email used for auth when secret_type is gcpserviceaccount. \n\nAllowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class GcpServiceAccountRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='The GCP Service Account Email used for auth when secret_type is gcpserviceaccount. \n\nAllowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Git(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    gcpServiceAccountRef: Optional[
        Union[GcpServiceAccountRef, GcpServiceAccountRef1]
    ] = None
    httpsProxy: Optional[str] = Field(
        default=None,
        description='URL for the HTTPS proxy to be used when communicating with the Git repo.',
    )
    policyDir: Optional[str] = Field(
        default=None,
        description='The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.',
    )
    secretType: Optional[str] = Field(
        default=None,
        description='Type of secret configured for access to the Git repo. Must be one of ssh, cookiefile, gcenode, token, gcpserviceaccount or none. The validation of this is case-sensitive.',
    )
    syncBranch: Optional[str] = Field(
        default=None,
        description='The branch of the repository to sync from. Default: master.',
    )
    syncRepo: Optional[str] = Field(
        default=None,
        description='The URL of the Git repository to use as the source of truth.',
    )
    syncRev: Optional[str] = Field(
        default=None,
        description='Git revision (tag or hash) to check out. Default HEAD.',
    )
    syncWaitSecs: Optional[str] = Field(
        default=None,
        description='Period in seconds between consecutive syncs. Default: 15.',
    )


class HierarchyController(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enableHierarchicalResourceQuota: Optional[bool] = Field(
        default=None,
        description='Whether hierarchical resource quota is enabled in this cluster.',
    )
    enablePodTreeLabels: Optional[bool] = Field(
        default=None, description='Whether pod tree labels are enabled in this cluster.'
    )
    enabled: Optional[bool] = Field(
        default=None,
        description='Whether Hierarchy Controller is enabled in this cluster.',
    )


class MembershipRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='The name of the membership\n\nAllowed value: The Google Cloud resource name of a `GKEHubMembership` resource (format: `projects/{{project}}/locations/{{location}}/memberships/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class MembershipRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='The name of the membership\n\nAllowed value: The Google Cloud resource name of a `GKEHubMembership` resource (format: `projects/{{project}}/locations/{{location}}/memberships/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Mesh(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    controlPlane: Optional[str] = Field(
        default=None,
        description='**DEPRECATED** Whether to automatically manage Service Mesh control planes. Possible values: CONTROL_PLANE_MANAGEMENT_UNSPECIFIED, AUTOMATIC, MANUAL',
    )
    management: Optional[str] = Field(
        default=None,
        description='Whether to automatically manage Service Mesh. Possible values: MANAGEMENT_UNSPECIFIED, MANAGEMENT_AUTOMATIC, MANAGEMENT_MANUAL',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class Monitoring(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    backends: Optional[List[str]] = Field(
        default=None,
        description=' Specifies the list of backends Policy Controller will export to. Specifying an empty value `[]` disables metrics export.',
    )


class Oci(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    gcpServiceAccountRef: Optional[
        Union[GcpServiceAccountRef2, GcpServiceAccountRef3]
    ] = None
    policyDir: Optional[str] = Field(
        default=None,
        description='The absolute path of the directory that contains the local resources. Default: the root directory of the image.',
    )
    secretType: Optional[str] = Field(
        default=None,
        description='Type of secret configured for access to the OCI Image. Must be one of gcenode, gcpserviceaccount or none. The validation of this is case-sensitive.',
    )
    syncRepo: Optional[str] = Field(
        default=None,
        description='The OCI image repository URL for the package to sync from. e.g. LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME.',
    )
    syncWaitSecs: Optional[str] = Field(
        default=None,
        description='Period in seconds(int64 format) between consecutive syncs. Default: 15.',
    )


class PolicyController(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    auditIntervalSeconds: Optional[str] = Field(
        default=None,
        description='Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.',
    )
    enabled: Optional[bool] = Field(
        default=None,
        description='Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.',
    )
    exemptableNamespaces: Optional[List[str]] = Field(
        default=None,
        description='The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.',
    )
    logDeniesEnabled: Optional[bool] = Field(
        default=None, description='Logs all denies and dry run failures.'
    )
    monitoring: Optional[Monitoring] = Field(
        default=None,
        description='Specifies the backends Policy Controller should export metrics to. For example, to specify metrics should be exported to Cloud Monitoring and Prometheus, specify backends: ["cloudmonitoring", "prometheus"]. Default: ["cloudmonitoring", "prometheus"]',
    )
    mutationEnabled: Optional[bool] = Field(
        default=None,
        description='Enable or disable mutation in policy controller. If true, mutation CRDs, webhook and controller deployment will be deployed to the cluster.',
    )
    referentialRulesEnabled: Optional[bool] = Field(
        default=None,
        description='Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.',
    )
    templateLibraryInstalled: Optional[bool] = Field(
        default=None,
        description='Installs the default template library along with Policy Controller.',
    )


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='The project of the feature\n\nAllowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='The project of the feature\n\nAllowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    configmanagement: Optional[Configmanagement] = Field(
        default=None, description='Config Management-specific spec.'
    )
    featureRef: Union[FeatureRef, FeatureRef1] = Field(..., description='Immutable.')
    location: str = Field(..., description='Immutable. The location of the feature')
    membershipRef: Union[MembershipRef, MembershipRef1] = Field(
        ..., description='Immutable.'
    )
    mesh: Optional[Mesh] = Field(default=None, description='Manage Mesh Features')
    projectRef: Union[ProjectRef, ProjectRef1] = Field(
        ..., description='Immutable. The Project that this resource belongs to.'
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
