# generated by datamodel-codegen:
#   filename:  computeresourcepolicy_v1beta1.json
#   timestamp: 2024-03-18T21:07:16+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class DailySchedule(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    daysInCycle: int = Field(
        ...,
        description='Immutable. Defines a schedule with units measured in days. The value determines how many days pass between the start of each cycle. Days in cycle for snapshot schedule policy must be 1.',
    )
    startTime: str = Field(
        ...,
        description='Immutable. This must be in UTC format that resolves to one of\n00:00, 04:00, 08:00, 12:00, 16:00, or 20:00. For example,\nboth 13:00-5 and 08:00 are valid.',
    )


class DayOfWeek(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    day: str = Field(
        ...,
        description='Immutable. The day of the week to create the snapshot. e.g. MONDAY Possible values: ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"].',
    )
    startTime: str = Field(
        ...,
        description='Immutable. Time within the window to start the operations.\nIt must be in format "HH:MM", where HH : [00-23] and MM : [00-00] GMT.',
    )


class DiskConsistencyGroupPolicy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: bool = Field(
        ..., description='Immutable. Enable disk consistency on the resource policy.'
    )


class GroupPlacementPolicy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    availabilityDomainCount: Optional[int] = Field(
        default=None,
        description='Immutable. The number of availability domains instances will be spread across. If two instances are in different\navailability domain, they will not be put in the same low latency network.',
    )
    collocation: Optional[str] = Field(
        default=None,
        description='Immutable. Collocation specifies whether to place VMs inside the same availability domain on the same low-latency network.\nSpecify \'COLLOCATED\' to enable collocation. Can only be specified with \'vm_count\'. If compute instances are created\nwith a COLLOCATED policy, then exactly \'vm_count\' instances must be created at the same time with the resource policy\nattached. Possible values: ["COLLOCATED"].',
    )
    maxDistance: Optional[int] = Field(
        default=None,
        description='Immutable. Specifies the number of max logical switches.',
    )
    vmCount: Optional[int] = Field(
        default=None,
        description='Immutable. Number of VMs in this placement group. Google does not recommend that you use this field\nunless you use a compact policy and you want your policy to work only if it contains this\nexact number of VMs.',
    )


class HourlySchedule(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hoursInCycle: int = Field(
        ..., description='Immutable. The number of hours between snapshots.'
    )
    startTime: str = Field(
        ...,
        description='Immutable. Time within the window to start the operations.\nIt must be in an hourly format "HH:MM",\nwhere HH : [00-23] and MM : [00] GMT.\neg: 21:00.',
    )


class InstanceSchedulePolicy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    expirationTime: Optional[str] = Field(
        default=None,
        description='Immutable. The expiration time of the schedule. The timestamp is an RFC3339 string.',
    )
    startTime: Optional[str] = Field(
        default=None,
        description='Immutable. The start time of the schedule. The timestamp is an RFC3339 string.',
    )
    timeZone: str = Field(
        ...,
        description='Immutable. Specifies the time zone to be used in interpreting the schedule. The value of this field must be a time zone name\nfrom the tz database: http://en.wikipedia.org/wiki/Tz_database.',
    )
    vmStartSchedule: Optional[VmStartSchedule] = Field(
        default=None,
        description='Immutable. Specifies the schedule for starting instances.',
    )
    vmStopSchedule: Optional[VmStopSchedule] = Field(
        default=None,
        description='Immutable. Specifies the schedule for stopping instances.',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class RetentionPolicy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    maxRetentionDays: int = Field(
        ...,
        description='Immutable. Maximum age of the snapshot that is allowed to be kept.',
    )
    onSourceDiskDelete: Optional[str] = Field(
        default=None,
        description='Immutable. Specifies the behavior to apply to scheduled snapshots when\nthe source disk is deleted. Default value: "KEEP_AUTO_SNAPSHOTS" Possible values: ["KEEP_AUTO_SNAPSHOTS", "APPLY_RETENTION_POLICY"].',
    )


class Schedule(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dailySchedule: Optional[DailySchedule] = Field(
        default=None,
        description='Immutable. The policy will execute every nth day at the specified time.',
    )
    hourlySchedule: Optional[HourlySchedule] = Field(
        default=None,
        description='Immutable. The policy will execute every nth hour starting at the specified time.',
    )
    weeklySchedule: Optional[WeeklySchedule] = Field(
        default=None,
        description='Immutable. Allows specifying a snapshot time for each day of the week.',
    )


class SnapshotProperties(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    chainName: Optional[str] = Field(
        default=None,
        description='Immutable. Creates the new snapshot in the snapshot chain labeled with the\nspecified name. The chain name must be 1-63 characters long and comply\nwith RFC1035.',
    )
    guestFlush: Optional[bool] = Field(
        default=None,
        description="Immutable. Whether to perform a 'guest aware' snapshot.",
    )
    labels: Optional[Dict[str, str]] = Field(
        default=None, description='Immutable. A set of key-value pairs.'
    )
    storageLocations: Optional[List[str]] = Field(
        default=None,
        description='Immutable. Cloud Storage bucket location to store the auto snapshot\n(regional or multi-regional).',
    )


class SnapshotSchedulePolicy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    retentionPolicy: Optional[RetentionPolicy] = Field(
        default=None,
        description='Immutable. Retention policy applied to snapshots created by this resource policy.',
    )
    schedule: Schedule = Field(
        ...,
        description="Immutable. Contains one of an 'hourlySchedule', 'dailySchedule', or 'weeklySchedule'.",
    )
    snapshotProperties: Optional[SnapshotProperties] = Field(
        default=None,
        description='Immutable. Properties with which the snapshots are created, such as labels.',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = Field(
        default=None,
        description='Immutable. An optional description of this resource. Provide this property when you create the resource.',
    )
    diskConsistencyGroupPolicy: Optional[DiskConsistencyGroupPolicy] = Field(
        default=None,
        description='Immutable. Replication consistency group for asynchronous disk replication.',
    )
    groupPlacementPolicy: Optional[GroupPlacementPolicy] = Field(
        default=None,
        description='Immutable. Resource policy for instances used for placement configuration.',
    )
    instanceSchedulePolicy: Optional[InstanceSchedulePolicy] = Field(
        default=None,
        description='Immutable. Resource policy for scheduling instance operations.',
    )
    region: str = Field(
        ..., description='Immutable. Region where resource policy resides.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    snapshotSchedulePolicy: Optional[SnapshotSchedulePolicy] = Field(
        default=None,
        description='Immutable. Policy for creating snapshots of persistent disks.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    selfLink: Optional[str] = None


class VmStartSchedule(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    schedule: str = Field(
        ...,
        description='Immutable. Specifies the frequency for the operation, using the unix-cron format.',
    )


class VmStopSchedule(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    schedule: str = Field(
        ...,
        description='Immutable. Specifies the frequency for the operation, using the unix-cron format.',
    )


class WeeklySchedule(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dayOfWeeks: List[DayOfWeek] = Field(
        ...,
        description='Immutable. May contain up to seven (one for each day of the week) snapshot times.',
    )
