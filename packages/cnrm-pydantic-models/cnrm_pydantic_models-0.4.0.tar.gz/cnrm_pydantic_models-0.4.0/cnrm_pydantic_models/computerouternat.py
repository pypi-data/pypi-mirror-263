# generated by datamodel-codegen:
#   filename:  computerouternat_v1beta1.json
#   timestamp: 2024-03-18T21:07:18+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class Action(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    sourceNatActiveIpsRefs: Optional[
        List[Union[SourceNatActiveIpsRefs, SourceNatActiveIpsRefs1]]
    ] = None
    sourceNatDrainIpsRefs: Optional[
        List[Union[SourceNatDrainIpsRefs, SourceNatDrainIpsRefs1]]
    ] = None


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class DrainNatIps(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeAddress` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class DrainNatIps1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeAddress` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class LogConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enable: bool = Field(..., description='Indicates whether or not to export logs.')
    filter: str = Field(
        ...,
        description='Specifies the desired filtering of logs on this NAT. Possible values: ["ERRORS_ONLY", "TRANSLATIONS_ONLY", "ALL"].',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class NatIps(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeAddress` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NatIps1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeAddress` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class RouterRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `ComputeRouter` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class RouterRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `name` field of a `ComputeRouter` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Rule(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    action: Optional[Action] = Field(
        default=None,
        description='The action to be enforced for traffic that matches this rule.',
    )
    description: Optional[str] = Field(
        default=None, description='An optional description of this rule.'
    )
    match: str = Field(
        ...,
        description='CEL expression that specifies the match condition that egress traffic from a VM is evaluated against.\nIf it evaluates to true, the corresponding action is enforced.\n\nThe following examples are valid match expressions for public NAT:\n\n"inIpRange(destination.ip, \'1.1.0.0/16\') || inIpRange(destination.ip, \'2.2.0.0/16\')"\n\n"destination.ip == \'1.1.0.1\' || destination.ip == \'8.8.8.8\'"\n\nThe following example is a valid match expression for private NAT:\n\n"nexthop.hub == \'https://networkconnectivity.googleapis.com/v1alpha1/projects/my-project/global/hub/hub-1\'".',
    )
    ruleNumber: int = Field(
        ...,
        description='An integer uniquely identifying a rule in the list.\nThe rule number must be a positive value between 0 and 65000, and must be unique among rules within a NAT.',
    )


class SourceNatActiveIpsRefs(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeAddress` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SourceNatActiveIpsRefs1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeAddress` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SourceNatDrainIpsRefs(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeAddress` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SourceNatDrainIpsRefs1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeAddress` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    drainNatIps: Optional[List[Union[DrainNatIps, DrainNatIps1]]] = None
    enableDynamicPortAllocation: Optional[bool] = Field(
        default=None,
        description='Enable Dynamic Port Allocation.\nIf minPortsPerVm is set, minPortsPerVm must be set to a power of two greater than or equal to 32.\nIf minPortsPerVm is not set, a minimum of 32 ports will be allocated to a VM from this NAT config.\nIf maxPortsPerVm is set, maxPortsPerVm must be set to a power of two greater than minPortsPerVm.\nIf maxPortsPerVm is not set, a maximum of 65536 ports will be allocated to a VM from this NAT config.\n\nMutually exclusive with enableEndpointIndependentMapping.',
    )
    enableEndpointIndependentMapping: Optional[bool] = Field(
        default=None,
        description='Specifies if endpoint independent mapping is enabled. This is enabled by default. For more information\nsee the [official documentation](https://cloud.google.com/nat/docs/overview#specs-rfcs).',
    )
    icmpIdleTimeoutSec: Optional[int] = Field(
        default=None,
        description='Timeout (in seconds) for ICMP connections. Defaults to 30s if not set.',
    )
    logConfig: Optional[LogConfig] = Field(
        default=None, description='Configuration for logging on NAT.'
    )
    maxPortsPerVm: Optional[int] = Field(
        default=None,
        description='Maximum number of ports allocated to a VM from this NAT.\nThis field can only be set when enableDynamicPortAllocation is enabled.',
    )
    minPortsPerVm: Optional[int] = Field(
        default=None,
        description='Minimum number of ports allocated to a VM from this NAT.',
    )
    natIpAllocateOption: str = Field(
        ...,
        description='How external IPs should be allocated for this NAT. Valid values are\n\'AUTO_ONLY\' for only allowing NAT IPs allocated by Google Cloud\nPlatform, or \'MANUAL_ONLY\' for only user-allocated NAT IP addresses. Possible values: ["MANUAL_ONLY", "AUTO_ONLY"].',
    )
    natIps: Optional[List[Union[NatIps, NatIps1]]] = None
    region: str = Field(
        ..., description='Immutable. Region where the router and NAT reside.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    routerRef: Union[RouterRef, RouterRef1] = Field(
        ..., description='The Cloud Router in which this NAT will be configured.'
    )
    rules: Optional[List[Rule]] = Field(
        default=None, description='A list of rules associated with this NAT.'
    )
    sourceSubnetworkIpRangesToNat: str = Field(
        ...,
        description='How NAT should be configured per Subnetwork.\nIf \'ALL_SUBNETWORKS_ALL_IP_RANGES\', all of the\nIP ranges in every Subnetwork are allowed to Nat.\nIf \'ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES\', all of the primary IP\nranges in every Subnetwork are allowed to Nat.\n\'LIST_OF_SUBNETWORKS\': A list of Subnetworks are allowed to Nat\n(specified in the field subnetwork below). Note that if this field\ncontains ALL_SUBNETWORKS_ALL_IP_RANGES or\nALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES, then there should not be any\nother RouterNat section in any Router for this network in this region. Possible values: ["ALL_SUBNETWORKS_ALL_IP_RANGES", "ALL_SUBNETWORKS_ALL_PRIMARY_IP_RANGES", "LIST_OF_SUBNETWORKS"].',
    )
    subnetwork: Optional[List[SubnetworkItem]] = Field(
        default=None,
        description="One or more subnetwork NAT configurations. Only used if\n'source_subnetwork_ip_ranges_to_nat' is set to 'LIST_OF_SUBNETWORKS'.",
    )
    tcpEstablishedIdleTimeoutSec: Optional[int] = Field(
        default=None,
        description='Timeout (in seconds) for TCP established connections.\nDefaults to 1200s if not set.',
    )
    tcpTimeWaitTimeoutSec: Optional[int] = Field(
        default=None,
        description='Timeout (in seconds) for TCP connections that are in TIME_WAIT state.\nDefaults to 120s if not set.',
    )
    tcpTransitoryIdleTimeoutSec: Optional[int] = Field(
        default=None,
        description='Timeout (in seconds) for TCP transitory connections.\nDefaults to 30s if not set.',
    )
    udpIdleTimeoutSec: Optional[int] = Field(
        default=None,
        description='Timeout (in seconds) for UDP connections. Defaults to 30s if not set.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )


class SubnetworkItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secondaryIpRangeNames: Optional[List[str]] = Field(
        default=None,
        description="List of the secondary ranges of the subnetwork that are allowed\nto use NAT. This can be populated only if\n'LIST_OF_SECONDARY_IP_RANGES' is one of the values in\nsourceIpRangesToNat.",
    )
    sourceIpRangesToNat: List[str] = Field(
        ...,
        description="List of options for which source IPs in the subnetwork\nshould have NAT enabled. Supported values include:\n'ALL_IP_RANGES', 'LIST_OF_SECONDARY_IP_RANGES',\n'PRIMARY_IP_RANGE'.",
    )
    subnetworkRef: Union[SubnetworkRef, SubnetworkRef1] = Field(
        ..., description='The subnetwork to NAT.'
    )


class SubnetworkRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeSubnetwork` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SubnetworkRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeSubnetwork` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )
