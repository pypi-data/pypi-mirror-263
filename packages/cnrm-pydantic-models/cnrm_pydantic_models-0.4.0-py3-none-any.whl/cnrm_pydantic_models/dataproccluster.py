# generated by datamodel-codegen:
#   filename:  dataproccluster_v1beta1.json
#   timestamp: 2024-03-18T21:07:36+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class Accelerator(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    acceleratorCount: Optional[int] = Field(
        default=None,
        description='Immutable. The number of the accelerator cards of this type exposed to this instance.',
    )
    acceleratorType: Optional[str] = Field(
        default=None,
        description='Immutable. Full URL, partial URI, or short name of the accelerator type resource to expose to this instance. See [Compute Engine AcceleratorTypes](https://cloud.google.com/compute/docs/reference/beta/acceleratorTypes). Examples: * `https://www.googleapis.com/compute/beta/projects/[project_id]/zones/us-east1-a/acceleratorTypes/nvidia-tesla-k80` * `projects/[project_id]/zones/us-east1-a/acceleratorTypes/nvidia-tesla-k80` * `nvidia-tesla-k80` **Auto Zone Exception**: If you are using the Dataproc [Auto Zone Placement](https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the accelerator type resource, for example, `nvidia-tesla-k80`.',
    )


class Accelerator3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    acceleratorCount: Optional[int] = Field(
        default=None,
        description='Immutable. The number of accelerator cards exposed to an instance.',
    )
    acceleratorType: Optional[str] = Field(
        default=None,
        description='Immutable. The accelerator type resource namename (see GPUs on Compute Engine).',
    )
    gpuPartitionSize: Optional[str] = Field(
        default=None,
        description='Immutable. Size of partitions to create on the GPU. Valid values are described in the NVIDIA [mig user guide](https://docs.nvidia.com/datacenter/tesla/mig-user-guide/#partitioning).',
    )


class Autoscaling(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    maxNodeCount: Optional[int] = Field(
        default=None,
        description='Immutable. The maximum number of nodes in the node pool. Must be >= min_node_count, and must be > 0. **Note:** Quota must be sufficient to scale up the cluster.',
    )
    minNodeCount: Optional[int] = Field(
        default=None,
        description='Immutable. The minimum number of nodes in the node pool. Must be >= 0 and <= max_node_count.',
    )


class AutoscalingConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    policyRef: Optional[Union[PolicyRef, PolicyRef1]] = Field(
        default=None, description='Immutable.'
    )


class AuxiliaryServicesConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    metastoreConfig: Optional[MetastoreConfig1] = Field(
        default=None,
        description='Immutable. Optional. The Hive Metastore configuration for this workload.',
    )
    sparkHistoryServerConfig: Optional[SparkHistoryServerConfig] = Field(
        default=None,
        description='Immutable. Optional. The Spark History Server configuration for the workload.',
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class ConfidentialInstanceConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enableConfidentialCompute: Optional[bool] = Field(
        default=None,
        description='Immutable. Optional. Defines whether the instance should have confidential compute enabled.',
    )


class Config(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    autoscalingConfig: Optional[AutoscalingConfig] = Field(
        default=None,
        description='Immutable. Optional. Autoscaling config for the policy associated with the cluster. Cluster does not autoscale if this field is unset.',
    )
    dataprocMetricConfig: Optional[DataprocMetricConfig] = Field(
        default=None,
        description='Immutable. Optional. The config for Dataproc metrics.',
    )
    encryptionConfig: Optional[EncryptionConfig] = Field(
        default=None,
        description='Immutable. Optional. Encryption settings for the cluster.',
    )
    endpointConfig: Optional[EndpointConfig] = Field(
        default=None,
        description='Immutable. Optional. Port/endpoint configuration for this cluster',
    )
    gceClusterConfig: Optional[GceClusterConfig] = Field(
        default=None,
        description='Immutable. Optional. The shared Compute Engine config settings for all instances in a cluster.',
    )
    initializationActions: Optional[List[InitializationAction]] = Field(
        default=None,
        description='Immutable. Optional. Commands to execute on each node after config is completed. By default, executables are run on master and all worker nodes. You can test a node\'s `role` metadata to run an executable on a master or worker node, as shown below using `curl` (you can also use `wget`): ROLE=$(curl -H Metadata-Flavor:Google http://metadata/computeMetadata/v1/instance/attributes/dataproc-role) if [[ "${ROLE}" == \'Master\' ]]; then ... master specific actions ... else ... worker specific actions ... fi',
    )
    lifecycleConfig: Optional[LifecycleConfig] = Field(
        default=None,
        description='Immutable. Optional. Lifecycle setting for the cluster.',
    )
    masterConfig: Optional[MasterConfig] = Field(
        default=None,
        description='Immutable. Optional. The Compute Engine config settings for the master instance in a cluster.',
    )
    metastoreConfig: Optional[MetastoreConfig] = Field(
        default=None, description='Immutable. Optional. Metastore configuration.'
    )
    secondaryWorkerConfig: Optional[SecondaryWorkerConfig] = Field(
        default=None,
        description='Immutable. Optional. The Compute Engine config settings for additional worker instances in a cluster.',
    )
    securityConfig: Optional[SecurityConfig] = Field(
        default=None,
        description='Immutable. Optional. Security settings for the cluster.',
    )
    softwareConfig: Optional[SoftwareConfig] = Field(
        default=None,
        description='Immutable. Optional. The config settings for software inside the cluster.',
    )
    stagingBucketRef: Optional[Union[StagingBucketRef, StagingBucketRef1]] = Field(
        default=None, description='Immutable.'
    )
    tempBucketRef: Optional[Union[TempBucketRef, TempBucketRef1]] = Field(
        default=None, description='Immutable.'
    )
    workerConfig: Optional[WorkerConfig] = Field(
        default=None,
        description='Immutable. Optional. The Compute Engine config settings for worker instances in a cluster.',
    )


class Config1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accelerators: Optional[List[Accelerator3]] = Field(
        default=None,
        description='Immutable. Optional. A list of [hardware accelerators](https://cloud.google.com/compute/docs/gpus) to attach to each node.',
    )
    bootDiskKmsKey: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The [Customer Managed Encryption Key (CMEK)] (https://cloud.google.com/kubernetes-engine/docs/how-to/using-cmek) used to encrypt the boot disk attached to each node in the node pool. Specify the key using the following format: `projects/KEY_PROJECT_ID/locations/LOCATION/keyRings/RING_NAME/cryptoKeys/KEY_NAME`.',
    )
    ephemeralStorageConfig: Optional[EphemeralStorageConfig] = Field(
        default=None,
        description='Immutable. Optional. Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.',
    )
    localSsdCount: Optional[int] = Field(
        default=None,
        description='Immutable. Optional. The number of local SSD disks to attach to the node, which is limited by the maximum number of disks allowable per zone (see [Adding Local SSDs](https://cloud.google.com/compute/docs/disks/local-ssd)).',
    )
    machineType: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of a Compute Engine [machine type](https://cloud.google.com/compute/docs/machine-types).',
    )
    minCpuPlatform: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. [Minimum CPU platform](https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform) to be used by this instance. The instance may be scheduled on the specified or a newer CPU platform. Specify the friendly names of CPU platforms, such as "Intel Haswell"` or Intel Sandy Bridge".',
    )
    preemptible: Optional[bool] = Field(
        default=None,
        description='Immutable. Optional. Whether the nodes are created as legacy [preemptible VM instances] (https://cloud.google.com/compute/docs/instances/preemptible). Also see Spot VMs, preemptible VM instances without a maximum lifetime. Legacy and Spot preemptible nodes cannot be used in a node pool with the `CONTROLLER` [role] (/dataproc/docs/reference/rest/v1/projects.regions.clusters#role) or in the DEFAULT node pool if the CONTROLLER role is not assigned (the DEFAULT node pool will assume the CONTROLLER role).',
    )
    spot: Optional[bool] = Field(
        default=None,
        description='Immutable. Optional. Whether the nodes are created as [Spot VM instances] (https://cloud.google.com/compute/docs/instances/spot). Spot VMs are the latest update to legacy preemptible VMs. Spot VMs do not have a maximum lifetime. Legacy and Spot preemptible nodes cannot be used in a node pool with the `CONTROLLER` [role](/dataproc/docs/reference/rest/v1/projects.regions.clusters#role) or in the DEFAULT node pool if the CONTROLLER role is not assigned (the DEFAULT node pool will assume the CONTROLLER role).',
    )


class Config2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    endpointConfig: Optional[EndpointConfig1] = None
    lifecycleConfig: Optional[LifecycleConfig1] = None
    masterConfig: Optional[MasterConfig1] = None
    secondaryWorkerConfig: Optional[SecondaryWorkerConfig1] = None
    workerConfig: Optional[WorkerConfig1] = None


class DataprocClusterRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Optional. Resource name of an existing Dataproc Cluster to act as a Spark History Server for the workload. Example: * `projects/[project_id]/regions/[region]/clusters/[cluster_name]`\n\nAllowed value: The `selfLink` field of a `DataprocCluster` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class DataprocClusterRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Optional. Resource name of an existing Dataproc Cluster to act as a Spark History Server for the workload. Example: * `projects/[project_id]/regions/[region]/clusters/[cluster_name]`\n\nAllowed value: The `selfLink` field of a `DataprocCluster` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class DataprocMetastoreServiceRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Required. Resource name of an existing Dataproc Metastore service. Example: * `projects/[project_id]/locations/[dataproc_region]/services/[service-name]`',
    )
    name: str = Field(
        ...,
        description="[WARNING] DataprocMetastoreService not yet supported in Config Connector, use 'external' field to reference existing resources.\nName of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class DataprocMetastoreServiceRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Required. Resource name of an existing Dataproc Metastore service. Example: * `projects/[project_id]/locations/[dataproc_region]/services/[service-name]`',
    )
    name: Optional[str] = Field(
        default=None,
        description="[WARNING] DataprocMetastoreService not yet supported in Config Connector, use 'external' field to reference existing resources.\nName of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class DataprocMetastoreServiceRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Required. Resource name of an existing Dataproc Metastore service. Example: * `projects/[project_id]/locations/[dataproc_region]/services/[service-name]`',
    )
    name: str = Field(
        ...,
        description="[WARNING] DataprocMetastoreService not yet supported in Config Connector, use 'external' field to reference existing resources.\nName of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class DataprocMetastoreServiceRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Required. Resource name of an existing Dataproc Metastore service. Example: * `projects/[project_id]/locations/[dataproc_region]/services/[service-name]`',
    )
    name: Optional[str] = Field(
        default=None,
        description="[WARNING] DataprocMetastoreService not yet supported in Config Connector, use 'external' field to reference existing resources.\nName of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class DataprocMetricConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    metrics: List[Metric] = Field(
        ..., description='Immutable. Required. Metrics sources to enable.'
    )


class DiskConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    bootDiskSizeGb: Optional[int] = Field(
        default=None,
        description='Immutable. Optional. Size in GB of the boot disk (default is 500GB).',
    )
    bootDiskType: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. Type of the boot disk (default is "pd-standard"). Valid values: "pd-balanced" (Persistent Disk Balanced Solid State Drive), "pd-ssd" (Persistent Disk Solid State Drive), or "pd-standard" (Persistent Disk Hard Disk Drive). See [Disk types](https://cloud.google.com/compute/docs/disks#disk-types).',
    )
    localSsdInterface: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. Interface type of local SSDs (default is "scsi"). Valid values: "scsi" (Small Computer System Interface), "nvme" (Non-Volatile Memory Express). See [local SSD performance](https://cloud.google.com/compute/docs/disks/local-ssd#performance).',
    )
    numLocalSsds: Optional[int] = Field(
        default=None,
        description='Immutable. Optional. Number of attached SSDs, from 0 to 4 (default is 0). If SSDs are not attached, the boot disk is used to store runtime logs and [HDFS](https://hadoop.apache.org/docs/r1.2.1/hdfs_user_guide.html) data. If one or more SSDs are attached, this runtime bulk data is spread across them, and the boot disk contains only basic config and installed binaries.',
    )


class EncryptionConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    gcePdKmsKeyRef: Optional[Union[GcePdKmsKeyRef, GcePdKmsKeyRef1]] = Field(
        default=None, description='Immutable.'
    )


class EndpointConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enableHttpPortAccess: Optional[bool] = Field(
        default=None,
        description='Immutable. Optional. If true, enable http access to specific ports on the cluster from external sources. Defaults to false.',
    )


class EndpointConfig1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    httpPorts: Optional[Dict[str, str]] = Field(
        default=None,
        description='Output only. The map of port descriptions to URLs. Will only be populated if enable_http_port_access is true.',
    )


class EphemeralStorageConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    localSsdCount: Optional[int] = Field(
        default=None,
        description='Immutable. Number of local SSDs to use to back ephemeral storage. Uses NVMe interfaces. Each local SSD is 375 GB in size. If zero, it means to disable using local SSDs as ephemeral storage.',
    )


class GceClusterConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    confidentialInstanceConfig: Optional[ConfidentialInstanceConfig] = Field(
        default=None,
        description='Immutable. Optional. Confidential Instance Config for clusters using [Confidential VMs](https://cloud.google.com/compute/confidential-vm/docs).',
    )
    internalIPOnly: Optional[bool] = Field(
        default=None,
        description='Immutable. Optional. If true, all instances in the cluster will only have internal IP addresses. By default, clusters are not restricted to internal IP addresses, and will have ephemeral external IP addresses assigned to each instance. This `internal_ip_only` restriction can only be enabled for subnetwork enabled networks, and all off-cluster dependencies must be configured to be accessible without external IP addresses.',
    )
    metadata: Optional[Dict[str, str]] = Field(
        default=None,
        description='Immutable. The Compute Engine metadata entries to add to all instances (see [Project and instance metadata](https://cloud.google.com/compute/docs/storing-retrieving-metadata#project_and_instance_metadata)).',
    )
    networkRef: Optional[Union[NetworkRef, NetworkRef1]] = Field(
        default=None, description='Immutable.'
    )
    nodeGroupAffinity: Optional[NodeGroupAffinity] = Field(
        default=None,
        description='Immutable. Optional. Node Group Affinity for sole-tenant clusters.',
    )
    privateIPv6GoogleAccess: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The type of IPv6 access for a cluster. Possible values: PRIVATE_IPV6_GOOGLE_ACCESS_UNSPECIFIED, INHERIT_FROM_SUBNETWORK, OUTBOUND, BIDIRECTIONAL',
    )
    reservationAffinity: Optional[ReservationAffinity] = Field(
        default=None,
        description='Immutable. Optional. Reservation Affinity for consuming Zonal reservation.',
    )
    serviceAccountRef: Optional[Union[ServiceAccountRef, ServiceAccountRef1]] = Field(
        default=None, description='Immutable.'
    )
    serviceAccountScopes: Optional[List[str]] = Field(
        default=None,
        description='Immutable. Optional. The URIs of service account scopes to be included in Compute Engine instances. The following base set of scopes is always included: * https://www.googleapis.com/auth/cloud.useraccounts.readonly * https://www.googleapis.com/auth/devstorage.read_write * https://www.googleapis.com/auth/logging.write If no scopes are specified, the following defaults are also provided: * https://www.googleapis.com/auth/bigquery * https://www.googleapis.com/auth/bigtable.admin.table * https://www.googleapis.com/auth/bigtable.data * https://www.googleapis.com/auth/devstorage.full_control',
    )
    shieldedInstanceConfig: Optional[ShieldedInstanceConfig] = Field(
        default=None,
        description='Immutable. Optional. Shielded Instance Config for clusters using [Compute Engine Shielded VMs](https://cloud.google.com/security/shielded-cloud/shielded-vm).',
    )
    subnetworkRef: Optional[Union[SubnetworkRef, SubnetworkRef1]] = Field(
        default=None, description='Immutable.'
    )
    tags: Optional[List[str]] = Field(
        default=None,
        description='Immutable. The Compute Engine tags to add to all instances (see [Tagging instances](https://cloud.google.com/compute/docs/label-or-tag-resources#tags)).',
    )
    zone: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The zone where the Compute Engine cluster will be located. On a create request, it is required in the "global" region. If omitted in a non-global Dataproc region, the service will pick a zone in the corresponding Compute Engine region. On a get request, zone will always be present. A full URL, partial URI, or short name are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/zones/[zone]` * `projects/[project_id]/zones/[zone]` * `us-central1-f`',
    )


class GcePdKmsKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Optional. The Cloud KMS key name to use for PD disk encryption for all instances in the cluster.\n\nAllowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class GcePdKmsKeyRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Optional. The Cloud KMS key name to use for PD disk encryption for all instances in the cluster.\n\nAllowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class GkeClusterConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    gkeClusterTargetRef: Optional[Union[GkeClusterTargetRef, GkeClusterTargetRef1]] = (
        Field(default=None, description='Immutable.')
    )
    nodePoolTarget: Optional[List[NodePoolTargetItem]] = Field(
        default=None,
        description='Immutable. Optional. GKE node pools where workloads will be scheduled. At least one node pool must be assigned the `DEFAULT` GkeNodePoolTarget.Role. If a `GkeNodePoolTarget` is not specified, Dataproc constructs a `DEFAULT` `GkeNodePoolTarget`. Each role can be given to only one `GkeNodePoolTarget`. All node pools must have the same location settings.',
    )


class GkeClusterTargetRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description="Optional. A target GKE cluster to deploy to. It must be in the same project and region as the Dataproc cluster (the GKE cluster can be zonal or regional). Format: 'projects/{project}/locations/{location}/clusters/{cluster_id}'\n\nAllowed value: The `selfLink` field of a `ContainerCluster` resource.",
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class GkeClusterTargetRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description="Optional. A target GKE cluster to deploy to. It must be in the same project and region as the Dataproc cluster (the GKE cluster can be zonal or regional). Format: 'projects/{project}/locations/{location}/clusters/{cluster_id}'\n\nAllowed value: The `selfLink` field of a `ContainerCluster` resource.",
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class IdentityConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    userServiceAccountMapping: Dict[str, str] = Field(
        ..., description='Immutable. Required. Map of user to service account.'
    )


class ImageRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Optional. The Compute Engine image resource used for cluster instances. The URI can represent an image or image family. Image examples: * `https://www.googleapis.com/compute/beta/projects/[project_id]/global/images/[image-id]` * `projects/[project_id]/global/images/[image-id]` * `image-id` Image family examples. Dataproc will use the most recent image from the family: * `https://www.googleapis.com/compute/beta/projects/[project_id]/global/images/family/[custom-image-family-name]` * `projects/[project_id]/global/images/family/[custom-image-family-name]` If the URI is unspecified, it will be inferred from `SoftwareConfig.image_version` or the system default.\n\nAllowed value: The `selfLink` field of a `ComputeImage` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ImageRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Optional. The Compute Engine image resource used for cluster instances. The URI can represent an image or image family. Image examples: * `https://www.googleapis.com/compute/beta/projects/[project_id]/global/images/[image-id]` * `projects/[project_id]/global/images/[image-id]` * `image-id` Image family examples. Dataproc will use the most recent image from the family: * `https://www.googleapis.com/compute/beta/projects/[project_id]/global/images/family/[custom-image-family-name]` * `projects/[project_id]/global/images/family/[custom-image-family-name]` If the URI is unspecified, it will be inferred from `SoftwareConfig.image_version` or the system default.\n\nAllowed value: The `selfLink` field of a `ComputeImage` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ImageRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Optional. The Compute Engine image resource used for cluster instances. The URI can represent an image or image family. Image examples: * `https://www.googleapis.com/compute/beta/projects/[project_id]/global/images/[image-id]` * `projects/[project_id]/global/images/[image-id]` * `image-id` Image family examples. Dataproc will use the most recent image from the family: * `https://www.googleapis.com/compute/beta/projects/[project_id]/global/images/family/[custom-image-family-name]` * `projects/[project_id]/global/images/family/[custom-image-family-name]` If the URI is unspecified, it will be inferred from `SoftwareConfig.image_version` or the system default.\n\nAllowed value: The `selfLink` field of a `ComputeImage` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ImageRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Optional. The Compute Engine image resource used for cluster instances. The URI can represent an image or image family. Image examples: * `https://www.googleapis.com/compute/beta/projects/[project_id]/global/images/[image-id]` * `projects/[project_id]/global/images/[image-id]` * `image-id` Image family examples. Dataproc will use the most recent image from the family: * `https://www.googleapis.com/compute/beta/projects/[project_id]/global/images/family/[custom-image-family-name]` * `projects/[project_id]/global/images/family/[custom-image-family-name]` If the URI is unspecified, it will be inferred from `SoftwareConfig.image_version` or the system default.\n\nAllowed value: The `selfLink` field of a `ComputeImage` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ImageRef4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Optional. The Compute Engine image resource used for cluster instances. The URI can represent an image or image family. Image examples: * `https://www.googleapis.com/compute/beta/projects/[project_id]/global/images/[image-id]` * `projects/[project_id]/global/images/[image-id]` * `image-id` Image family examples. Dataproc will use the most recent image from the family: * `https://www.googleapis.com/compute/beta/projects/[project_id]/global/images/family/[custom-image-family-name]` * `projects/[project_id]/global/images/family/[custom-image-family-name]` If the URI is unspecified, it will be inferred from `SoftwareConfig.image_version` or the system default.\n\nAllowed value: The `selfLink` field of a `ComputeImage` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ImageRef5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Optional. The Compute Engine image resource used for cluster instances. The URI can represent an image or image family. Image examples: * `https://www.googleapis.com/compute/beta/projects/[project_id]/global/images/[image-id]` * `projects/[project_id]/global/images/[image-id]` * `image-id` Image family examples. Dataproc will use the most recent image from the family: * `https://www.googleapis.com/compute/beta/projects/[project_id]/global/images/family/[custom-image-family-name]` * `projects/[project_id]/global/images/family/[custom-image-family-name]` If the URI is unspecified, it will be inferred from `SoftwareConfig.image_version` or the system default.\n\nAllowed value: The `selfLink` field of a `ComputeImage` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class InitializationAction(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    executableFile: str = Field(
        ..., description='Immutable. Required. Cloud Storage URI of executable file.'
    )
    executionTimeout: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. Amount of time executable has to complete. Default is 10 minutes (see JSON representation of [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json)). Cluster creation fails with an explanatory error message (the name of the executable that caused the error and the exceeded timeout period) if the executable is not completed at end of the timeout period.',
    )


class InstanceReference(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    instanceId: Optional[str] = Field(
        default=None,
        description='The unique identifier of the Compute Engine instance.',
    )
    instanceName: Optional[str] = Field(
        default=None,
        description='The user-friendly name of the Compute Engine instance.',
    )
    publicEciesKey: Optional[str] = Field(
        default=None,
        description='The public ECIES key used for sharing data with this instance.',
    )
    publicKey: Optional[str] = Field(
        default=None,
        description='The public RSA key used for sharing data with this instance.',
    )


class KerberosConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    crossRealmTrustAdminServer: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The admin server (IP or hostname) for the remote trusted realm in a cross realm trust relationship.',
    )
    crossRealmTrustKdc: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The KDC (IP or hostname) for the remote trusted realm in a cross realm trust relationship.',
    )
    crossRealmTrustRealm: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The remote realm the Dataproc on-cluster KDC will trust, should the user enable cross realm trust.',
    )
    crossRealmTrustSharedPassword: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The Cloud Storage URI of a KMS encrypted file containing the shared password between the on-cluster Kerberos realm and the remote trusted realm, in a cross realm trust relationship.',
    )
    enableKerberos: Optional[bool] = Field(
        default=None,
        description='Immutable. Optional. Flag to indicate whether to Kerberize the cluster (default: false). Set this field to true to enable Kerberos on a cluster.',
    )
    kdcDbKey: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The Cloud Storage URI of a KMS encrypted file containing the master key of the KDC database.',
    )
    keyPassword: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided key. For the self-signed certificate, this password is generated by Dataproc.',
    )
    keystore: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The Cloud Storage URI of the keystore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.',
    )
    keystorePassword: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided keystore. For the self-signed certificate, this password is generated by Dataproc.',
    )
    kmsKeyRef: Optional[Union[KmsKeyRef, KmsKeyRef1]] = Field(
        default=None, description='Immutable.'
    )
    realm: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the on-cluster Kerberos realm. If not specified, the uppercased domain of hostnames will be the realm.',
    )
    rootPrincipalPassword: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The Cloud Storage URI of a KMS encrypted file containing the root principal password.',
    )
    tgtLifetimeHours: Optional[int] = Field(
        default=None,
        description='Immutable. Optional. The lifetime of the ticket granting ticket, in hours. If not specified, or user specifies 0, then default value 10 will be used.',
    )
    truststore: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The Cloud Storage URI of the truststore file used for SSL encryption. If not provided, Dataproc will provide a self-signed certificate.',
    )
    truststorePassword: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The Cloud Storage URI of a KMS encrypted file containing the password to the user provided truststore. For the self-signed certificate, this password is generated by Dataproc.',
    )


class KmsKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Optional. The uri of the KMS key used to encrypt various sensitive files.\n\nAllowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Optional. The uri of the KMS key used to encrypt various sensitive files.\n\nAllowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KubernetesClusterConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    gkeClusterConfig: GkeClusterConfig = Field(
        ...,
        description='Immutable. Required. The configuration for running the Dataproc cluster on GKE.',
    )
    kubernetesNamespace: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. A namespace within the Kubernetes cluster to deploy into. If this namespace does not exist, it is created. If it exists, Dataproc verifies that another Dataproc VirtualCluster is not installed into it. If not specified, the name of the Dataproc Cluster is used.',
    )
    kubernetesSoftwareConfig: Optional[KubernetesSoftwareConfig] = Field(
        default=None,
        description='Immutable. Optional. The software configuration for this Dataproc cluster running on Kubernetes.',
    )


class KubernetesSoftwareConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    componentVersion: Optional[Dict[str, str]] = Field(
        default=None,
        description='Immutable. The components that should be installed in this Dataproc cluster. The key must be a string from the KubernetesComponent enumeration. The value is the version of the software to be installed. At least one entry must be specified.',
    )
    properties: Optional[Dict[str, str]] = Field(
        default=None,
        description='Immutable. The properties to set on daemon config files. Property keys are specified in `prefix:property` format, for example `spark:spark.kubernetes.container.image`. The following are supported prefixes and their mappings: * spark: `spark-defaults.conf` For more information, see [Cluster properties](https://cloud.google.com/dataproc/docs/concepts/cluster-properties).',
    )
    additionalProperties: Optional[Any] = None


class LifecycleConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    autoDeleteTime: Optional[AwareDatetime] = Field(
        default=None,
        description='Immutable. Optional. The time when cluster will be auto-deleted (see JSON representation of [Timestamp](https://developers.google.com/protocol-buffers/docs/proto3#json)).',
    )
    autoDeleteTtl: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The lifetime duration of cluster. The cluster will be auto-deleted at the end of this period. Minimum value is 10 minutes; maximum value is 14 days (see JSON representation of [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json)).',
    )
    idleDeleteTtl: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The duration to keep the cluster alive while idling (when no jobs are running). Passing this threshold will cause the cluster to be deleted. Minimum value is 5 minutes; maximum value is 14 days (see JSON representation of [Duration](https://developers.google.com/protocol-buffers/docs/proto3#json)).',
    )


class LifecycleConfig1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    idleStartTime: Optional[AwareDatetime] = Field(
        default=None,
        description='Output only. The time when cluster became idle (most recent job finished) and became eligible for deletion due to idleness (see JSON representation of [Timestamp](https://developers.google.com/protocol-buffers/docs/proto3#json)).',
    )


class ManagedGroupConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    instanceGroupManagerName: Optional[str] = Field(
        default=None,
        description='Output only. The name of the Instance Group Manager for this group.',
    )
    instanceTemplateName: Optional[str] = Field(
        default=None,
        description='Output only. The name of the Instance Template used for the Managed Instance Group.',
    )


class MasterConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accelerators: Optional[List[Accelerator]] = Field(
        default=None,
        description='Immutable. Optional. The Compute Engine accelerator configuration for these instances.',
    )
    diskConfig: Optional[DiskConfig] = Field(
        default=None, description='Immutable. Optional. Disk option config settings.'
    )
    imageRef: Optional[Union[ImageRef, ImageRef1]] = Field(
        default=None, description='Immutable.'
    )
    machineType: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The Compute Engine machine type used for cluster instances. A full URL, partial URI, or short name are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/zones/us-east1-a/machineTypes/n1-standard-2` * `projects/[project_id]/zones/us-east1-a/machineTypes/n1-standard-2` * `n1-standard-2` **Auto Zone Exception**: If you are using the Dataproc [Auto Zone Placement](https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, `n1-standard-2`.',
    )
    minCpuPlatform: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. Specifies the minimum cpu platform for the Instance Group. See [Dataproc -> Minimum CPU Platform](https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).',
    )
    numInstances: Optional[int] = Field(
        default=None,
        description='Immutable. Optional. The number of VM instances in the instance group. For [HA cluster](/dataproc/docs/concepts/configuring-clusters/high-availability) [master_config](#FIELDS.master_config) groups, **must be set to 3**. For standard cluster [master_config](#FIELDS.master_config) groups, **must be set to 1**.',
    )
    preemptibility: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. Specifies the preemptibility of the instance group. The default value for master and worker groups is `NON_PREEMPTIBLE`. This default cannot be changed. The default value for secondary instances is `PREEMPTIBLE`. Possible values: PREEMPTIBILITY_UNSPECIFIED, NON_PREEMPTIBLE, PREEMPTIBLE',
    )


class MasterConfig1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    instanceNames: Optional[List[str]] = Field(
        default=None,
        description='Output only. The list of instance names. Dataproc derives the names from `cluster_name`, `num_instances`, and the instance group.',
    )
    instanceReferences: Optional[List[InstanceReference]] = Field(
        default=None,
        description='Output only. List of references to Compute Engine instances.',
    )
    isPreemptible: Optional[bool] = Field(
        default=None,
        description='Output only. Specifies that this instance group contains preemptible instances.',
    )
    managedGroupConfig: Optional[ManagedGroupConfig] = Field(
        default=None,
        description='Output only. The config for Compute Engine Instance Group Manager that manages this group. This is only used for preemptible instance groups.',
    )


class MetastoreConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataprocMetastoreServiceRef: Union[
        DataprocMetastoreServiceRef, DataprocMetastoreServiceRef1
    ] = Field(..., description='Immutable.')


class MetastoreConfig1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataprocMetastoreServiceRef: Union[
        DataprocMetastoreServiceRef2, DataprocMetastoreServiceRef3
    ] = Field(..., description='Immutable.')


class Metric(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    metricOverrides: Optional[List[str]] = Field(
        default=None,
        description='Immutable. Optional. Specify one or more [available OSS metrics] (https://cloud.google.com/dataproc/docs/guides/monitoring#available_oss_metrics) to collect for the metric course (for the `SPARK` metric source, any [Spark metric] (https://spark.apache.org/docs/latest/monitoring.html#metrics) can be specified). Provide metrics in the following format: `METRIC_SOURCE:INSTANCE:GROUP:METRIC` Use camelcase as appropriate. Examples: ``` yarn:ResourceManager:QueueMetrics:AppsCompleted spark:driver:DAGScheduler:job.allJobs sparkHistoryServer:JVM:Memory:NonHeapMemoryUsage.committed hiveserver2:JVM:Memory:NonHeapMemoryUsage.used ``` Notes: * Only the specified overridden metrics will be collected for the metric source. For example, if one or more `spark:executive` metrics are listed as metric overrides, other `SPARK` metrics will not be collected. The collection of the default metrics for other OSS metric sources is unaffected. For example, if both `SPARK` andd `YARN` metric sources are enabled, and overrides are provided for Spark metrics only, all default YARN metrics will be collected.',
    )
    metricSource: str = Field(
        ...,
        description='Immutable. Required. Default metrics are collected unless `metricOverrides` are specified for the metric source (see [Available OSS metrics] (https://cloud.google.com/dataproc/docs/guides/monitoring#available_oss_metrics) for more information). Possible values: METRIC_SOURCE_UNSPECIFIED, MONITORING_AGENT_DEFAULTS, HDFS, SPARK, YARN, SPARK_HISTORY_SERVER, HIVESERVER2',
    )


class Metrics(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hdfsMetrics: Optional[Dict[str, str]] = Field(
        default=None, description='The HDFS metrics.'
    )
    yarnMetrics: Optional[Dict[str, str]] = Field(
        default=None, description='The YARN metrics.'
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class NetworkRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Optional. The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork_uri. If neither `network_uri` nor `subnetwork_uri` is specified, the "default" network of the project is used, if it exists. Cannot be a "Custom Subnet Network" (see [Using Subnetworks](https://cloud.google.com/compute/docs/subnetworks) for more information). A full URL, partial URI, or short name are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/regions/global/default` * `projects/[project_id]/regions/global/default` * `default`\n\nAllowed value: The `selfLink` field of a `ComputeNetwork` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NetworkRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Optional. The Compute Engine network to be used for machine communications. Cannot be specified with subnetwork_uri. If neither `network_uri` nor `subnetwork_uri` is specified, the "default" network of the project is used, if it exists. Cannot be a "Custom Subnet Network" (see [Using Subnetworks](https://cloud.google.com/compute/docs/subnetworks) for more information). A full URL, partial URI, or short name are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/regions/global/default` * `projects/[project_id]/regions/global/default` * `default`\n\nAllowed value: The `selfLink` field of a `ComputeNetwork` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NodeGroupAffinity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nodeGroupRef: Union[NodeGroupRef, NodeGroupRef1] = Field(
        ..., description='Immutable.'
    )


class NodeGroupRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Required. The URI of a sole-tenant [node group resource](https://cloud.google.com/compute/docs/reference/rest/v1/nodeGroups) that the cluster will be created on. A full URL, partial URI, or node group name are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/zones/us-central1-a/nodeGroups/node-group-1` * `projects/[project_id]/zones/us-central1-a/nodeGroups/node-group-1` * `node-group-1`\n\nAllowed value: The `selfLink` field of a `ComputeNodeGroup` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NodeGroupRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Required. The URI of a sole-tenant [node group resource](https://cloud.google.com/compute/docs/reference/rest/v1/nodeGroups) that the cluster will be created on. A full URL, partial URI, or node group name are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/zones/us-central1-a/nodeGroups/node-group-1` * `projects/[project_id]/zones/us-central1-a/nodeGroups/node-group-1` * `node-group-1`\n\nAllowed value: The `selfLink` field of a `ComputeNodeGroup` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NodePoolConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    autoscaling: Optional[Autoscaling] = Field(
        default=None,
        description='Immutable. Optional. The autoscaler configuration for this node pool. The autoscaler is enabled only when a valid configuration is present.',
    )
    config: Optional[Config1] = Field(
        default=None, description='Immutable. Optional. The node pool configuration.'
    )
    locations: Optional[List[str]] = Field(
        default=None,
        description='Immutable. Optional. The list of Compute Engine [zones](https://cloud.google.com/compute/docs/zones#available) where node pool nodes associated with a Dataproc on GKE virtual cluster will be located. **Note:** All node pools associated with a virtual cluster must be located in the same region as the virtual cluster, and they must be located in the same zone within that region. If a location is not specified during node pool creation, Dataproc on GKE will choose the zone.',
    )


class NodePoolRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description="Required. The target GKE node pool. Format: 'projects/{project}/locations/{location}/clusters/{cluster}/nodePools/{node_pool}'\n\nAllowed value: The `selfLink` field of a `ContainerNodePool` resource.",
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NodePoolRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description="Required. The target GKE node pool. Format: 'projects/{project}/locations/{location}/clusters/{cluster}/nodePools/{node_pool}'\n\nAllowed value: The `selfLink` field of a `ContainerNodePool` resource.",
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NodePoolTargetItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nodePoolConfig: Optional[NodePoolConfig] = Field(
        default=None,
        description='Immutable. Input only. The configuration for the GKE node pool. If specified, Dataproc attempts to create a node pool with the specified shape. If one with the same name already exists, it is verified against all specified fields. If a field differs, the virtual cluster creation will fail. If omitted, any node pool with the specified name is used. If a node pool with the specified name does not exist, Dataproc create a node pool with default values. This is an input only field. It will not be returned by the API.',
    )
    nodePoolRef: Union[NodePoolRef, NodePoolRef1] = Field(..., description='Immutable.')
    roles: List[str] = Field(
        ...,
        description='Immutable. Required. The roles associated with the GKE node pool.',
    )


class PolicyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Optional. The autoscaling policy used by the cluster. Only resource names including projectid and location (region) are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/locations/[dataproc_region]/autoscalingPolicies/[policy_id]` * `projects/[project_id]/locations/[dataproc_region]/autoscalingPolicies/[policy_id]` Note that the policy must be in the same project and Dataproc region.\n\nAllowed value: The Google Cloud resource name of a `DataprocAutoscalingPolicy` resource (format: `projects/{{project}}/locations/{{location}}/autoscalingPolicies/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class PolicyRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Optional. The autoscaling policy used by the cluster. Only resource names including projectid and location (region) are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/locations/[dataproc_region]/autoscalingPolicies/[policy_id]` * `projects/[project_id]/locations/[dataproc_region]/autoscalingPolicies/[policy_id]` Note that the policy must be in the same project and Dataproc region.\n\nAllowed value: The Google Cloud resource name of a `DataprocAutoscalingPolicy` resource (format: `projects/{{project}}/locations/{{location}}/autoscalingPolicies/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Required. The Google Cloud Platform project ID that the cluster belongs to.\n\nAllowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Required. The Google Cloud Platform project ID that the cluster belongs to.\n\nAllowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ReservationAffinity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    consumeReservationType: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. Type of reservation to consume Possible values: TYPE_UNSPECIFIED, NO_RESERVATION, ANY_RESERVATION, SPECIFIC_RESERVATION',
    )
    key: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. Corresponds to the label key of reservation resource.',
    )
    values: Optional[List[str]] = Field(
        default=None,
        description='Immutable. Optional. Corresponds to the label values of reservation resource.',
    )


class SecondaryWorkerConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accelerators: Optional[List[Accelerator]] = Field(
        default=None,
        description='Immutable. Optional. The Compute Engine accelerator configuration for these instances.',
    )
    diskConfig: Optional[DiskConfig] = Field(
        default=None, description='Immutable. Optional. Disk option config settings.'
    )
    imageRef: Optional[Union[ImageRef2, ImageRef3]] = Field(
        default=None, description='Immutable.'
    )
    machineType: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The Compute Engine machine type used for cluster instances. A full URL, partial URI, or short name are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/zones/us-east1-a/machineTypes/n1-standard-2` * `projects/[project_id]/zones/us-east1-a/machineTypes/n1-standard-2` * `n1-standard-2` **Auto Zone Exception**: If you are using the Dataproc [Auto Zone Placement](https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, `n1-standard-2`.',
    )
    minCpuPlatform: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. Specifies the minimum cpu platform for the Instance Group. See [Dataproc -> Minimum CPU Platform](https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).',
    )
    numInstances: Optional[int] = Field(
        default=None,
        description='Immutable. Optional. The number of VM instances in the instance group. For [HA cluster](/dataproc/docs/concepts/configuring-clusters/high-availability) [master_config](#FIELDS.master_config) groups, **must be set to 3**. For standard cluster [master_config](#FIELDS.master_config) groups, **must be set to 1**.',
    )
    preemptibility: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. Specifies the preemptibility of the instance group. The default value for master and worker groups is `NON_PREEMPTIBLE`. This default cannot be changed. The default value for secondary instances is `PREEMPTIBLE`. Possible values: PREEMPTIBILITY_UNSPECIFIED, NON_PREEMPTIBLE, PREEMPTIBLE',
    )


class SecondaryWorkerConfig1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    instanceNames: Optional[List[str]] = Field(
        default=None,
        description='Output only. The list of instance names. Dataproc derives the names from `cluster_name`, `num_instances`, and the instance group.',
    )
    instanceReferences: Optional[List[InstanceReference]] = Field(
        default=None,
        description='Output only. List of references to Compute Engine instances.',
    )
    isPreemptible: Optional[bool] = Field(
        default=None,
        description='Output only. Specifies that this instance group contains preemptible instances.',
    )
    managedGroupConfig: Optional[ManagedGroupConfig] = Field(
        default=None,
        description='Output only. The config for Compute Engine Instance Group Manager that manages this group. This is only used for preemptible instance groups.',
    )


class SecurityConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    identityConfig: Optional[IdentityConfig] = Field(
        default=None,
        description='Immutable. Optional. Identity related configuration, including service account based secure multi-tenancy user mappings.',
    )
    kerberosConfig: Optional[KerberosConfig] = Field(
        default=None, description='Immutable. Optional. Kerberos related configuration.'
    )


class ServiceAccountRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Optional. The [Dataproc service account](https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/service-accounts#service_accounts_in_dataproc) (also see [VM Data Plane identity](https://cloud.google.com/dataproc/docs/concepts/iam/dataproc-principals#vm_service_account_data_plane_identity)) used by Dataproc cluster VM instances to access Google Cloud Platform services. If not specified, the [Compute Engine default service account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.\n\nAllowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ServiceAccountRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Optional. The [Dataproc service account](https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/service-accounts#service_accounts_in_dataproc) (also see [VM Data Plane identity](https://cloud.google.com/dataproc/docs/concepts/iam/dataproc-principals#vm_service_account_data_plane_identity)) used by Dataproc cluster VM instances to access Google Cloud Platform services. If not specified, the [Compute Engine default service account](https://cloud.google.com/compute/docs/access/service-accounts#default_service_account) is used.\n\nAllowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ShieldedInstanceConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enableIntegrityMonitoring: Optional[bool] = Field(
        default=None,
        description='Immutable. Optional. Defines whether instances have integrity monitoring enabled.',
    )
    enableSecureBoot: Optional[bool] = Field(
        default=None,
        description='Immutable. Optional. Defines whether instances have Secure Boot enabled.',
    )
    enableVtpm: Optional[bool] = Field(
        default=None,
        description='Immutable. Optional. Defines whether instances have the vTPM enabled.',
    )


class SoftwareConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    imageVersion: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The version of software inside the cluster. It must be one of the supported [Dataproc Versions](https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#supported_dataproc_versions), such as "1.2" (including a subminor version, such as "1.2.29"), or the ["preview" version](https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-versions#other_versions). If unspecified, it defaults to the latest Debian version.',
    )
    optionalComponents: Optional[List[str]] = Field(
        default=None,
        description='Immutable. Optional. The set of components to activate on the cluster.',
    )
    properties: Optional[Dict[str, str]] = Field(
        default=None,
        description='Immutable. Optional. The properties to set on daemon config files. Property keys are specified in `prefix:property` format, for example `core:hadoop.tmp.dir`. The following are supported prefixes and their mappings: * capacity-scheduler: `capacity-scheduler.xml` * core: `core-site.xml` * distcp: `distcp-default.xml` * hdfs: `hdfs-site.xml` * hive: `hive-site.xml` * mapred: `mapred-site.xml` * pig: `pig.properties` * spark: `spark-defaults.conf` * yarn: `yarn-site.xml` For more information, see [Cluster properties](https://cloud.google.com/dataproc/docs/concepts/cluster-properties).',
    )
    additionalProperties: Optional[Any] = None


class SparkHistoryServerConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataprocClusterRef: Optional[Union[DataprocClusterRef, DataprocClusterRef1]] = (
        Field(default=None, description='Immutable.')
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    config: Optional[Config] = Field(
        default=None,
        description='Immutable. The cluster config. Note that Dataproc may set default values, and values may change when clusters are updated.',
    )
    location: str = Field(
        ...,
        description='Immutable. The location for the resource, usually a GCP region.',
    )
    projectRef: Optional[Union[ProjectRef, ProjectRef1]] = Field(
        default=None,
        description='Immutable. The Project that this resource belongs to.',
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    virtualClusterConfig: Optional[VirtualClusterConfig] = Field(
        default=None,
        description='Immutable. Optional. The virtual cluster config is used when creating a Dataproc cluster that does not directly control the underlying compute resources, for example, when creating a [Dataproc-on-GKE cluster](https://cloud.google.com/dataproc/docs/guides/dpgke/dataproc-gke). Dataproc may set default values, and values may change when clusters are updated. Exactly one of config or virtual_cluster_config must be specified.',
    )


class StagingBucketRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description="Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see [Dataproc staging bucket](https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). **This field requires a Cloud Storage bucket name, not a URI to a Cloud Storage bucket.**\n\nAllowed value: The Google Cloud resource name of a `StorageBucket` resource (format: `{{name}}`).",
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class StagingBucketRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description="Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see [Dataproc staging bucket](https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). **This field requires a Cloud Storage bucket name, not a URI to a Cloud Storage bucket.**\n\nAllowed value: The Google Cloud resource name of a `StorageBucket` resource (format: `{{name}}`).",
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class StagingBucketRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description="Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see [Dataproc staging and temp buckets](https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). **This field requires a Cloud Storage bucket name, not a `gs://...` URI to a Cloud Storage bucket.**\n\nAllowed value: The Google Cloud resource name of a `StorageBucket` resource (format: `{{name}}`).",
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class StagingBucketRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description="Optional. A Cloud Storage bucket used to stage job dependencies, config files, and job driver console output. If you do not specify a staging bucket, Cloud Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's staging bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket (see [Dataproc staging and temp buckets](https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/staging-bucket)). **This field requires a Cloud Storage bucket name, not a `gs://...` URI to a Cloud Storage bucket.**\n\nAllowed value: The Google Cloud resource name of a `StorageBucket` resource (format: `{{name}}`).",
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    clusterUuid: Optional[str] = Field(
        default=None,
        description='Output only. A cluster UUID (Unique Universal Identifier). Dataproc generates this value when it creates the cluster.',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    config: Optional[Config2] = None
    metrics: Optional[Metrics] = Field(
        default=None,
        description='Output only. Contains cluster daemon metrics such as HDFS and YARN stats. **Beta Feature**: This report is available for testing purposes only. It may be changed before final release.',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    status: Optional[Status1] = Field(
        default=None, description='Output only. Cluster status.'
    )
    statusHistory: Optional[List[StatusHistoryItem]] = Field(
        default=None, description='Output only. The previous cluster status.'
    )


class Status1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    detail: Optional[str] = Field(
        default=None, description="Optional. Output only. Details of cluster's state."
    )
    state: Optional[str] = Field(
        default=None,
        description="Output only. The cluster's state. Possible values: UNKNOWN, CREATING, RUNNING, ERROR, DELETING, UPDATING, STOPPING, STOPPED, STARTING",
    )
    stateStartTime: Optional[AwareDatetime] = Field(
        default=None,
        description='Output only. Time when this state was entered (see JSON representation of [Timestamp](https://developers.google.com/protocol-buffers/docs/proto3#json)).',
    )
    substate: Optional[str] = Field(
        default=None,
        description='Output only. Additional state information that includes status reported by the agent. Possible values: UNSPECIFIED, UNHEALTHY, STALE_STATUS',
    )


class StatusHistoryItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    detail: Optional[str] = Field(
        default=None, description="Optional. Output only. Details of cluster's state."
    )
    state: Optional[str] = Field(
        default=None,
        description="Output only. The cluster's state. Possible values: UNKNOWN, CREATING, RUNNING, ERROR, DELETING, UPDATING, STOPPING, STOPPED, STARTING",
    )
    stateStartTime: Optional[AwareDatetime] = Field(
        default=None,
        description='Output only. Time when this state was entered (see JSON representation of [Timestamp](https://developers.google.com/protocol-buffers/docs/proto3#json)).',
    )
    substate: Optional[str] = Field(
        default=None,
        description='Output only. Additional state information that includes status reported by the agent. Possible values: UNSPECIFIED, UNHEALTHY, STALE_STATUS',
    )


class SubnetworkRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Optional. The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network_uri. A full URL, partial URI, or short name are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/regions/us-east1/subnetworks/sub0` * `projects/[project_id]/regions/us-east1/subnetworks/sub0` * `sub0`\n\nAllowed value: The `selfLink` field of a `ComputeSubnetwork` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SubnetworkRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Optional. The Compute Engine subnetwork to be used for machine communications. Cannot be specified with network_uri. A full URL, partial URI, or short name are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/regions/us-east1/subnetworks/sub0` * `projects/[project_id]/regions/us-east1/subnetworks/sub0` * `sub0`\n\nAllowed value: The `selfLink` field of a `ComputeSubnetwork` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class TempBucketRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description="Optional. A Cloud Storage bucket used to store ephemeral cluster and jobs data, such as Spark and MapReduce history files. If you do not specify a temp bucket, Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's temp bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket. The default bucket has a TTL of 90 days, but you can use any TTL (or none) if you specify a bucket. **This field requires a Cloud Storage bucket name, not a URI to a Cloud Storage bucket.**\n\nAllowed value: The Google Cloud resource name of a `StorageBucket` resource (format: `{{name}}`).",
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class TempBucketRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description="Optional. A Cloud Storage bucket used to store ephemeral cluster and jobs data, such as Spark and MapReduce history files. If you do not specify a temp bucket, Dataproc will determine a Cloud Storage location (US, ASIA, or EU) for your cluster's temp bucket according to the Compute Engine zone where your cluster is deployed, and then create and manage this project-level, per-location bucket. The default bucket has a TTL of 90 days, but you can use any TTL (or none) if you specify a bucket. **This field requires a Cloud Storage bucket name, not a URI to a Cloud Storage bucket.**\n\nAllowed value: The Google Cloud resource name of a `StorageBucket` resource (format: `{{name}}`).",
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class VirtualClusterConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    auxiliaryServicesConfig: Optional[AuxiliaryServicesConfig] = Field(
        default=None,
        description='Immutable. Optional. Configuration of auxiliary services used by this cluster.',
    )
    kubernetesClusterConfig: KubernetesClusterConfig = Field(
        ...,
        description='Immutable. Required. The configuration for running the Dataproc cluster on Kubernetes.',
    )
    stagingBucketRef: Optional[Union[StagingBucketRef2, StagingBucketRef3]] = Field(
        default=None, description='Immutable.'
    )


class WorkerConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accelerators: Optional[List[Accelerator]] = Field(
        default=None,
        description='Immutable. Optional. The Compute Engine accelerator configuration for these instances.',
    )
    diskConfig: Optional[DiskConfig] = Field(
        default=None, description='Immutable. Optional. Disk option config settings.'
    )
    imageRef: Optional[Union[ImageRef4, ImageRef5]] = Field(
        default=None, description='Immutable.'
    )
    machineType: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The Compute Engine machine type used for cluster instances. A full URL, partial URI, or short name are valid. Examples: * `https://www.googleapis.com/compute/v1/projects/[project_id]/zones/us-east1-a/machineTypes/n1-standard-2` * `projects/[project_id]/zones/us-east1-a/machineTypes/n1-standard-2` * `n1-standard-2` **Auto Zone Exception**: If you are using the Dataproc [Auto Zone Placement](https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/auto-zone#using_auto_zone_placement) feature, you must use the short name of the machine type resource, for example, `n1-standard-2`.',
    )
    minCpuPlatform: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. Specifies the minimum cpu platform for the Instance Group. See [Dataproc -> Minimum CPU Platform](https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-min-cpu).',
    )
    numInstances: Optional[int] = Field(
        default=None,
        description='Immutable. Optional. The number of VM instances in the instance group. For [HA cluster](/dataproc/docs/concepts/configuring-clusters/high-availability) [master_config](#FIELDS.master_config) groups, **must be set to 3**. For standard cluster [master_config](#FIELDS.master_config) groups, **must be set to 1**.',
    )
    preemptibility: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. Specifies the preemptibility of the instance group. The default value for master and worker groups is `NON_PREEMPTIBLE`. This default cannot be changed. The default value for secondary instances is `PREEMPTIBLE`. Possible values: PREEMPTIBILITY_UNSPECIFIED, NON_PREEMPTIBLE, PREEMPTIBLE',
    )


class WorkerConfig1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    instanceNames: Optional[List[str]] = Field(
        default=None,
        description='Output only. The list of instance names. Dataproc derives the names from `cluster_name`, `num_instances`, and the instance group.',
    )
    instanceReferences: Optional[List[InstanceReference]] = Field(
        default=None,
        description='Output only. List of references to Compute Engine instances.',
    )
    isPreemptible: Optional[bool] = Field(
        default=None,
        description='Output only. Specifies that this instance group contains preemptible instances.',
    )
    managedGroupConfig: Optional[ManagedGroupConfig] = Field(
        default=None,
        description='Output only. The config for Compute Engine Instance Group Manager that manages this group. This is only used for preemptible instance groups.',
    )
