# generated by datamodel-codegen:
#   filename:  cloudidentitymembership_v1beta1.json
#   timestamp: 2024-03-18T21:06:53+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class DisplayName(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    familyName: Optional[str] = Field(
        default=None, description="Output only. Member's family name"
    )
    fullName: Optional[str] = Field(
        default=None,
        description='Output only. Localized UTF-16 full name for the member. Localization is done based on the language in the request and the language of the stored display name.',
    )
    givenName: Optional[str] = Field(
        default=None, description="Output only. Member's given name"
    )


class ExpiryDetail(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    expireTime: Optional[AwareDatetime] = Field(
        default=None, description='The time at which the `MembershipRole` will expire.'
    )


class GroupRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='The group for the resource\n\nAllowed value: The Google Cloud resource name of a `CloudIdentityGroup` resource (format: `groups/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class GroupRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='The group for the resource\n\nAllowed value: The Google Cloud resource name of a `CloudIdentityGroup` resource (format: `groups/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class MemberKey(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Optional[str] = Field(
        default=None,
        description="The ID of the entity. For Google-managed entities, the `id` must be the email address of an existing group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.",
    )
    namespace: Optional[str] = Field(
        default=None,
        description='The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}`.',
    )


class MemberRestrictionEvaluation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    state: Optional[str] = Field(
        default=None,
        description='Output only. The current state of the restriction Possible values: ENCRYPTION_STATE_UNSPECIFIED, UNSUPPORTED_BY_DEVICE, ENCRYPTED, NOT_ENCRYPTED',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class PreferredMemberKey(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str = Field(
        ...,
        description="Immutable. The ID of the entity. For Google-managed entities, the `id` must be the email address of a group or user. For external-identity-mapped entities, the `id` must be a string conforming to the Identity Source's requirements. Must be unique within a `namespace`.",
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Immutable. The namespace in which the entity exists. If not specified, the `EntityKey` represents a Google-managed entity such as a Google user or a Google Group. If specified, the `EntityKey` represents an external-identity-mapped group. The namespace must correspond to an identity source created in Admin Console and must be in the form of `identitysources/{identity_source_id}`.',
    )


class RestrictionEvaluations(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    memberRestrictionEvaluation: Optional[MemberRestrictionEvaluation] = Field(
        default=None,
        description='Evaluation of the member restriction applied to this membership. Empty if the user lacks permission to view the restriction evaluation.',
    )


class Role(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    expiryDetail: Optional[ExpiryDetail] = Field(
        default=None,
        description='The expiry details of the `MembershipRole`. Expiry details are only supported for `MEMBER` `MembershipRoles`. May be set if `name` is `MEMBER`. Must not be set if `name` is any other value.',
    )
    name: str
    restrictionEvaluations: Optional[RestrictionEvaluations] = Field(
        default=None,
        description='Evaluations of restrictions applied to parent group on this membership.',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    groupRef: Union[GroupRef, GroupRef1] = Field(..., description='Immutable.')
    memberKey: Optional[MemberKey] = Field(
        default=None,
        description='Immutable. The `EntityKey` of the member. Either `member_key` or `preferred_member_key` must be set when calling MembershipsService.CreateMembership but not both; both shall be set when returned.',
    )
    preferredMemberKey: PreferredMemberKey = Field(
        ...,
        description='Immutable. Required. Immutable. The `EntityKey` of the member.',
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The service-generated name of the resource. Used for acquisition only. Leave unset to create a new resource.',
    )
    roles: List[Role] = Field(
        ...,
        description='The `MembershipRole`s that apply to the `Membership`. If unspecified, defaults to a single `MembershipRole` with `name` `MEMBER`. Must not contain duplicate `MembershipRole`s with the same `name`.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    createTime: Optional[AwareDatetime] = Field(
        default=None,
        description='Output only. The time when the `Membership` was created.',
    )
    deliverySetting: Optional[str] = Field(
        default=None,
        description='Output only. Delivery setting associated with the membership. Possible values: DELIVERY_SETTING_UNSPECIFIED, ALL_MAIL, DIGEST, DAILY, NONE, DISABLED',
    )
    displayName: Optional[DisplayName] = Field(
        default=None,
        description='Output only. The display name of this member, if available',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    type: Optional[str] = Field(
        default=None,
        description='Output only. The type of the membership. Possible values: OWNER_TYPE_UNSPECIFIED, OWNER_TYPE_CUSTOMER, OWNER_TYPE_PARTNER',
    )
    updateTime: Optional[AwareDatetime] = Field(
        default=None,
        description='Output only. The time when the `Membership` was last updated.',
    )
