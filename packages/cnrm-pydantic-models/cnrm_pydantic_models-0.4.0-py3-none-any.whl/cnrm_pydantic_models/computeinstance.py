# generated by datamodel-codegen:
#   filename:  computeinstance_v1beta1.json
#   timestamp: 2024-03-18T21:07:05+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class AccessConfigItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    natIpRef: Optional[Union[NatIpRef, NatIpRef1]] = None
    networkTier: Optional[str] = Field(
        default=None,
        description='The networking tier used for configuring this instance. One of PREMIUM or STANDARD.',
    )
    publicPtrDomainName: Optional[str] = Field(
        default=None, description='The DNS domain name for the public PTR record.'
    )


class AccessConfigItem1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    natIpRef: Optional[Union[NatIpRef2, NatIpRef3]] = None
    networkTier: Optional[str] = Field(
        default=None,
        description='The networking tier used for configuring this instance. One of PREMIUM or STANDARD.',
    )
    publicPtrDomainName: Optional[str] = Field(
        default=None, description='The DNS domain name for the public PTR record.'
    )


class AdvancedMachineFeatures(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enableNestedVirtualization: Optional[bool] = Field(
        default=None, description='Whether to enable nested virtualization or not.'
    )
    threadsPerCore: Optional[int] = Field(
        default=None,
        description='The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.',
    )
    visibleCoreCount: Optional[int] = Field(
        default=None,
        description="The number of physical cores to expose to an instance. Multiply by the number of threads per core to compute the total number of virtual CPUs to expose to the instance. If unset, the number of cores is inferred from the instance\\'s nominal CPU count and the underlying platform\\'s SMT width.",
    )


class AliasIpRangeItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ipCidrRange: str = Field(
        ..., description='The IP CIDR range represented by this alias IP range.'
    )
    subnetworkRangeName: Optional[str] = Field(
        default=None,
        description='The subnetwork secondary range name specifying the secondary range from which to allocate the IP CIDR range for this alias IP range.',
    )


class AttachedDiskItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    deviceName: Optional[str] = Field(
        default=None,
        description='Name with which the attached disk is accessible under /dev/disk/by-id/.',
    )
    diskEncryptionKeyRaw: Optional[
        Union[DiskEncryptionKeyRaw, DiskEncryptionKeyRaw1]
    ] = Field(
        default=None,
        description='A 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to encrypt this disk. Only one of kms_key_self_link and disk_encryption_key_raw may be set.',
    )
    diskEncryptionKeySha256: Optional[str] = Field(
        default=None,
        description='The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.',
    )
    kmsKeyRef: Optional[Union[KmsKeyRef, KmsKeyRef1]] = None
    mode: Optional[str] = Field(
        default=None,
        description='Read/write mode for the disk. One of "READ_ONLY" or "READ_WRITE".',
    )
    sourceDiskRef: Union[SourceDiskRef, SourceDiskRef1]


class AttachedDiskItem1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    deviceName: Optional[str] = Field(
        default=None,
        description='Name with which the attached disk is accessible under /dev/disk/by-id/.',
    )
    diskEncryptionKeyRaw: Optional[
        Union[DiskEncryptionKeyRaw4, DiskEncryptionKeyRaw5]
    ] = Field(
        default=None,
        description='A 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to encrypt this disk. Only one of kms_key_self_link and disk_encryption_key_raw may be set.',
    )
    diskEncryptionKeySha256: Optional[str] = Field(
        default=None,
        description='The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.',
    )
    kmsKeyRef: Optional[Union[KmsKeyRef4, KmsKeyRef5]] = None
    mode: Optional[str] = Field(
        default=None,
        description='Read/write mode for the disk. One of "READ_ONLY" or "READ_WRITE".',
    )
    sourceDiskRef: Union[SourceDiskRef4, SourceDiskRef5]


class BootDisk(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    autoDelete: Optional[bool] = Field(
        default=None,
        description='Immutable. Whether the disk will be auto-deleted when the instance is deleted.',
    )
    deviceName: Optional[str] = Field(
        default=None,
        description='Immutable. Name with which attached disk will be accessible under /dev/disk/by-id/.',
    )
    diskEncryptionKeyRaw: Optional[
        Union[DiskEncryptionKeyRaw2, DiskEncryptionKeyRaw3]
    ] = Field(
        default=None,
        description='Immutable. A 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to encrypt this disk. Only one of kms_key_self_link and disk_encryption_key_raw may be set.',
    )
    diskEncryptionKeySha256: Optional[str] = Field(
        default=None,
        description='The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.',
    )
    initializeParams: Optional[InitializeParams] = Field(
        default=None,
        description='Immutable. Parameters with which a disk was created alongside the instance.',
    )
    kmsKeyRef: Optional[Union[KmsKeyRef2, KmsKeyRef3]] = None
    mode: Optional[str] = Field(
        default=None,
        description='Immutable. Read/write mode for the disk. One of "READ_ONLY" or "READ_WRITE".',
    )
    sourceDiskRef: Optional[Union[SourceDiskRef2, SourceDiskRef3]] = Field(
        default=None, description='Immutable. The source disk used to create this disk.'
    )


class BootDisk1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    autoDelete: Optional[bool] = Field(
        default=None,
        description='Immutable. Whether the disk will be auto-deleted when the instance is deleted.',
    )
    deviceName: Optional[str] = Field(
        default=None,
        description='Immutable. Name with which attached disk will be accessible under /dev/disk/by-id/.',
    )
    diskEncryptionKeyRaw: Optional[
        Union[DiskEncryptionKeyRaw6, DiskEncryptionKeyRaw7]
    ] = Field(
        default=None,
        description='Immutable. A 256-bit customer-supplied encryption key, encoded in RFC 4648 base64 to encrypt this disk. Only one of kms_key_self_link and disk_encryption_key_raw may be set.',
    )
    diskEncryptionKeySha256: Optional[str] = Field(
        default=None,
        description='The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied encryption key that protects this resource.',
    )
    initializeParams: Optional[InitializeParams1] = Field(
        default=None,
        description='Immutable. Parameters with which a disk was created alongside the instance.',
    )
    kmsKeyRef: Optional[Union[KmsKeyRef6, KmsKeyRef7]] = None
    mode: Optional[str] = Field(
        default=None,
        description='Immutable. Read/write mode for the disk. One of "READ_ONLY" or "READ_WRITE".',
    )
    sourceDiskRef: Optional[Union[SourceDiskRef6, SourceDiskRef7]] = Field(
        default=None, description='Immutable. The source disk used to create this disk.'
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class ConfidentialInstanceConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enableConfidentialCompute: bool = Field(
        ...,
        description='Defines whether the instance should have confidential compute enabled.',
    )


class DiskEncryptionKeyRaw(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class DiskEncryptionKeyRaw1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom1 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class DiskEncryptionKeyRaw2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom2] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class DiskEncryptionKeyRaw3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom3 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class DiskEncryptionKeyRaw4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom4] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class DiskEncryptionKeyRaw5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom5 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class DiskEncryptionKeyRaw6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom6] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class DiskEncryptionKeyRaw7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom7 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class GuestAcceleratorItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    count: int = Field(
        ...,
        description='Immutable. The number of the guest accelerator cards exposed to this instance.',
    )
    type: str = Field(
        ...,
        description='Immutable. The accelerator type resource exposed to this instance. E.g. nvidia-tesla-k80.',
    )


class InitializeParams(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    labels: Optional[Dict[str, Any]] = Field(
        default=None,
        description='Immutable. A set of key/value label pairs assigned to the disk.',
    )
    resourceManagerTags: Optional[Dict[str, Any]] = Field(
        default=None,
        description='Immutable. A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags. Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored (both PUT & PATCH) when empty.',
    )
    size: Optional[int] = Field(
        default=None, description='Immutable. The size of the image in gigabytes.'
    )
    sourceImageRef: Optional[Union[SourceImageRef, SourceImageRef1]] = Field(
        default=None,
        description='Immutable. The image from which to initialize this disk.',
    )
    type: Optional[str] = Field(
        default=None,
        description='Immutable. The Google Compute Engine disk type. Such as pd-standard, pd-ssd or pd-balanced.',
    )


class InitializeParams1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    labels: Optional[Dict[str, Any]] = Field(
        default=None,
        description='Immutable. A set of key/value label pairs assigned to the disk.',
    )
    resourceManagerTags: Optional[Dict[str, Any]] = Field(
        default=None,
        description='Immutable. A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags. Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored (both PUT & PATCH) when empty.',
    )
    size: Optional[int] = Field(
        default=None, description='Immutable. The size of the image in gigabytes.'
    )
    sourceImageRef: Optional[Union[SourceImageRef2, SourceImageRef3]] = Field(
        default=None,
        description='Immutable. The image from which to initialize this disk.',
    )
    type: Optional[str] = Field(
        default=None,
        description='Immutable. The Google Compute Engine disk type. Such as pd-standard, pd-ssd or pd-balanced.',
    )


class InstanceTemplateRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeInstanceTemplate` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class InstanceTemplateRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeInstanceTemplate` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class InstanceTemplateRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeInstanceTemplate` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class InstanceTemplateRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeInstanceTemplate` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Ipv6AccessConfigItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    externalIpv6: Optional[str] = Field(
        default=None,
        description="Immutable. The first IPv6 address of the external IPv6 range associated with this instance, prefix length is stored in externalIpv6PrefixLength in ipv6AccessConfig. To use a static external IP address, it must be unused and in the same region as the instance's zone. If not specified, Google Cloud will automatically assign an external IPv6 address from the instance's subnetwork.",
    )
    externalIpv6PrefixLength: Optional[str] = Field(
        default=None,
        description='Immutable. The prefix length of the external IPv6 range.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Immutable. The name of this access configuration. In ipv6AccessConfigs, the recommended name is External IPv6.',
    )
    networkTier: str = Field(
        ...,
        description='The service-level to be provided for IPv6 traffic when the subnet has an external subnet. Only PREMIUM tier is valid for IPv6.',
    )
    publicPtrDomainName: Optional[str] = Field(
        default=None,
        description='The domain name to be used when creating DNSv6 records for the external IPv6 ranges.',
    )


class KmsKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyRef4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyRef5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyRef6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyRef7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class LocalSsdRecoveryTimeout(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nanos: Optional[int] = Field(
        default=None,
        description="Immutable. Span of time that's a fraction of a second at nanosecond\nresolution. Durations less than one second are represented\nwith a 0 seconds field and a positive nanos field. Must\nbe from 0 to 999,999,999 inclusive.",
    )
    seconds: int = Field(
        ...,
        description='Immutable. Span of time at a resolution of a second.\nMust be from 0 to 315,576,000,000 inclusive.',
    )


class MaxRunDuration(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nanos: Optional[int] = Field(
        default=None,
        description="Immutable. Span of time that's a fraction of a second at nanosecond\nresolution. Durations less than one second are represented\nwith a 0 seconds field and a positive nanos field. Must\nbe from 0 to 999,999,999 inclusive.",
    )
    seconds: int = Field(
        ...,
        description='Immutable. Span of time at a resolution of a second.\nMust be from 0 to 315,576,000,000 inclusive.',
    )


class Metadatum(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: str
    value: str


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Union[Spec, Spec1]
    status: Optional[Status] = None


class NatIpRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `address` field of a `ComputeAddress` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NatIpRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `address` field of a `ComputeAddress` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NatIpRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `address` field of a `ComputeAddress` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NatIpRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `address` field of a `ComputeAddress` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NetworkInterfaceItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accessConfig: Optional[List[AccessConfigItem]] = Field(
        default=None,
        description='Access configurations, i.e. IPs via which this instance can be accessed via the Internet.',
    )
    aliasIpRange: Optional[List[AliasIpRangeItem]] = Field(
        default=None,
        description='An array of alias IP ranges for this network interface.',
    )
    internalIpv6PrefixLength: Optional[int] = Field(
        default=None,
        description='The prefix length of the primary internal IPv6 range.',
    )
    ipv6AccessConfig: Optional[List[Ipv6AccessConfigItem]] = Field(
        default=None,
        description='An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.',
    )
    ipv6AccessType: Optional[str] = Field(
        default=None,
        description='One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork.',
    )
    ipv6Address: Optional[str] = Field(
        default=None,
        description="An IPv6 internal network address for this network interface. If not specified, Google Cloud will automatically assign an internal IPv6 address from the instance's subnetwork.",
    )
    name: Optional[str] = Field(default=None, description='The name of the interface.')
    networkIp: Optional[str] = Field(
        default=None,
        description='DEPRECATED. Although this field is still available, there is limited support. We recommend that you use `spec.networkInterface.networkIpRef` instead.',
    )
    networkIpRef: Optional[Union[NetworkIpRef, NetworkIpRef1]] = None
    networkRef: Optional[Union[NetworkRef, NetworkRef1]] = None
    nicType: Optional[str] = Field(
        default=None,
        description='Immutable. The type of vNIC to be used on this interface. Possible values:GVNIC, VIRTIO_NET.',
    )
    queueCount: Optional[int] = Field(
        default=None,
        description="Immutable. The networking queue count that's specified by users for the network interface. Both Rx and Tx queues will be set to this number. It will be empty if not specified.",
    )
    stackType: Optional[str] = Field(
        default=None,
        description='The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used.',
    )
    subnetworkProject: Optional[str] = Field(
        default=None, description='The project in which the subnetwork belongs.'
    )
    subnetworkRef: Optional[Union[SubnetworkRef, SubnetworkRef1]] = None


class NetworkInterfaceItem1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accessConfig: Optional[List[AccessConfigItem1]] = Field(
        default=None,
        description='Access configurations, i.e. IPs via which this instance can be accessed via the Internet.',
    )
    aliasIpRange: Optional[List[AliasIpRangeItem]] = Field(
        default=None,
        description='An array of alias IP ranges for this network interface.',
    )
    internalIpv6PrefixLength: Optional[int] = Field(
        default=None,
        description='The prefix length of the primary internal IPv6 range.',
    )
    ipv6AccessConfig: Optional[List[Ipv6AccessConfigItem]] = Field(
        default=None,
        description='An array of IPv6 access configurations for this interface. Currently, only one IPv6 access config, DIRECT_IPV6, is supported. If there is no ipv6AccessConfig specified, then this instance will have no external IPv6 Internet access.',
    )
    ipv6AccessType: Optional[str] = Field(
        default=None,
        description='One of EXTERNAL, INTERNAL to indicate whether the IP can be accessed from the Internet. This field is always inherited from its subnetwork.',
    )
    ipv6Address: Optional[str] = Field(
        default=None,
        description="An IPv6 internal network address for this network interface. If not specified, Google Cloud will automatically assign an internal IPv6 address from the instance's subnetwork.",
    )
    name: Optional[str] = Field(default=None, description='The name of the interface.')
    networkIp: Optional[str] = Field(
        default=None,
        description='DEPRECATED. Although this field is still available, there is limited support. We recommend that you use `spec.networkInterface.networkIpRef` instead.',
    )
    networkIpRef: Optional[Union[NetworkIpRef2, NetworkIpRef3]] = None
    networkRef: Optional[Union[NetworkRef2, NetworkRef3]] = None
    nicType: Optional[str] = Field(
        default=None,
        description='Immutable. The type of vNIC to be used on this interface. Possible values:GVNIC, VIRTIO_NET.',
    )
    queueCount: Optional[int] = Field(
        default=None,
        description="Immutable. The networking queue count that's specified by users for the network interface. Both Rx and Tx queues will be set to this number. It will be empty if not specified.",
    )
    stackType: Optional[str] = Field(
        default=None,
        description='The stack type for this network interface to identify whether the IPv6 feature is enabled or not. If not specified, IPV4_ONLY will be used.',
    )
    subnetworkProject: Optional[str] = Field(
        default=None, description='The project in which the subnetwork belongs.'
    )
    subnetworkRef: Optional[Union[SubnetworkRef2, SubnetworkRef3]] = None


class NetworkIpRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `address` field of a `ComputeAddress` resource.',
    )
    kind: str = Field(
        ..., description='Kind of the referent. Allowed values: ComputeAddress'
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NetworkIpRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `address` field of a `ComputeAddress` resource.',
    )
    kind: Optional[str] = Field(
        default=None, description='Kind of the referent. Allowed values: ComputeAddress'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NetworkIpRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `address` field of a `ComputeAddress` resource.',
    )
    kind: str = Field(
        ..., description='Kind of the referent. Allowed values: ComputeAddress'
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NetworkIpRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `address` field of a `ComputeAddress` resource.',
    )
    kind: Optional[str] = Field(
        default=None, description='Kind of the referent. Allowed values: ComputeAddress'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NetworkPerformanceConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    totalEgressBandwidthTier: str = Field(
        ...,
        description='Immutable. The egress bandwidth tier to enable. Possible values:TIER_1, DEFAULT.',
    )


class NetworkRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeNetwork` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NetworkRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeNetwork` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NetworkRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeNetwork` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NetworkRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeNetwork` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NodeAffinity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[Dict[str, Any]] = None


class Params(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    resourceManagerTags: Optional[Dict[str, Any]] = Field(
        default=None,
        description='Immutable. A map of resource manager tags. Resource manager tag keys and values have the same definition as resource manager tags. Keys must be in the format tagKeys/{tag_key_id}, and values are in the format tagValues/456. The field is ignored (both PUT & PATCH) when empty.',
    )


class ReservationAffinity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    specificReservation: Optional[SpecificReservation] = Field(
        default=None,
        description='Immutable. Specifies the label selector for the reservation to use.',
    )
    type: str = Field(
        ...,
        description='Immutable. The type of reservation from which this instance can consume resources.',
    )


class ReservationAffinity1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    specificReservation: Optional[SpecificReservation] = Field(
        default=None,
        description='Immutable. Specifies the label selector for the reservation to use.',
    )
    type: str = Field(
        ...,
        description='Immutable. The type of reservation from which this instance can consume resources.',
    )


class ResourcePolicies(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeResourcePolicy` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ResourcePolicies1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeResourcePolicy` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ResourcePolicies2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeResourcePolicy` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ResourcePolicies3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeResourcePolicy` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Scheduling(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    automaticRestart: Optional[bool] = Field(
        default=None,
        description='Specifies if the instance should be restarted if it was terminated by Compute Engine (not a user).',
    )
    instanceTerminationAction: Optional[str] = Field(
        default=None,
        description='Specifies the action GCE should take when SPOT VM is preempted.',
    )
    localSsdRecoveryTimeout: Optional[LocalSsdRecoveryTimeout] = Field(
        default=None,
        description='Immutable. Specifies the maximum amount of time a Local Ssd Vm should wait while\n  recovery of the Local Ssd state is attempted. Its value should be in\n  between 0 and 168 hours with hour granularity and the default value being 1\n  hour.',
    )
    maintenanceInterval: Optional[str] = Field(
        default=None,
        description='Specifies the frequency of planned maintenance events. The accepted values are: PERIODIC.',
    )
    maxRunDuration: Optional[MaxRunDuration] = Field(
        default=None,
        description='Immutable. The timeout for new network connections to hosts.',
    )
    minNodeCpus: Optional[int] = None
    nodeAffinities: Optional[List[NodeAffinity]] = None
    onHostMaintenance: Optional[str] = Field(
        default=None,
        description='Describes maintenance behavior for the instance. One of MIGRATE or TERMINATE,.',
    )
    preemptible: Optional[bool] = Field(
        default=None, description='Immutable. Whether the instance is preemptible.'
    )
    provisioningModel: Optional[str] = Field(
        default=None,
        description='Immutable. Whether the instance is spot. If this is set as SPOT.',
    )


class Scheduling1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    automaticRestart: Optional[bool] = Field(
        default=None,
        description='Specifies if the instance should be restarted if it was terminated by Compute Engine (not a user).',
    )
    instanceTerminationAction: Optional[str] = Field(
        default=None,
        description='Specifies the action GCE should take when SPOT VM is preempted.',
    )
    localSsdRecoveryTimeout: Optional[LocalSsdRecoveryTimeout] = Field(
        default=None,
        description='Immutable. Specifies the maximum amount of time a Local Ssd Vm should wait while\n  recovery of the Local Ssd state is attempted. Its value should be in\n  between 0 and 168 hours with hour granularity and the default value being 1\n  hour.',
    )
    maintenanceInterval: Optional[str] = Field(
        default=None,
        description='Specifies the frequency of planned maintenance events. The accepted values are: PERIODIC.',
    )
    maxRunDuration: Optional[MaxRunDuration] = Field(
        default=None,
        description='Immutable. The timeout for new network connections to hosts.',
    )
    minNodeCpus: Optional[int] = None
    nodeAffinities: Optional[List[NodeAffinity]] = None
    onHostMaintenance: Optional[str] = Field(
        default=None,
        description='Describes maintenance behavior for the instance. One of MIGRATE or TERMINATE,.',
    )
    preemptible: Optional[bool] = Field(
        default=None, description='Immutable. Whether the instance is preemptible.'
    )
    provisioningModel: Optional[str] = Field(
        default=None,
        description='Immutable. Whether the instance is spot. If this is set as SPOT.',
    )


class ScratchDiskItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    interface: str = Field(
        ...,
        description='The disk interface used for attaching this disk. One of SCSI or NVME.',
    )
    size: Optional[int] = Field(
        default=None,
        description='Immutable. The size of the disk in gigabytes. One of 375 or 3000.',
    )


class SecretKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: str = Field(..., description='Key that identifies the value to be extracted.')
    name: str = Field(..., description='Name of the Secret to extract a value from.')


class ServiceAccount(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    scopes: List[str] = Field(..., description='A list of service scopes.')
    serviceAccountRef: Optional[Union[ServiceAccountRef, ServiceAccountRef1]] = None


class ServiceAccount1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    scopes: List[str] = Field(..., description='A list of service scopes.')
    serviceAccountRef: Optional[Union[ServiceAccountRef2, ServiceAccountRef3]] = None


class ServiceAccountRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ServiceAccountRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ServiceAccountRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ServiceAccountRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ShieldedInstanceConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enableIntegrityMonitoring: Optional[bool] = Field(
        default=None,
        description='Whether integrity monitoring is enabled for the instance.',
    )
    enableSecureBoot: Optional[bool] = Field(
        default=None, description='Whether secure boot is enabled for the instance.'
    )
    enableVtpm: Optional[bool] = Field(
        default=None, description='Whether the instance uses vTPM.'
    )


class SourceDiskRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeDisk` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SourceDiskRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeDisk` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SourceDiskRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeDisk` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SourceDiskRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeDisk` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SourceDiskRef4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeDisk` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SourceDiskRef5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeDisk` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SourceDiskRef6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeDisk` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SourceDiskRef7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeDisk` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SourceImageRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeImage` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SourceImageRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeImage` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SourceImageRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeImage` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SourceImageRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeImage` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    advancedMachineFeatures: Optional[AdvancedMachineFeatures] = Field(
        default=None,
        description='Controls for advanced machine-related behavior features.',
    )
    attachedDisk: Optional[List[AttachedDiskItem]] = Field(
        default=None, description='List of disks attached to the instance.'
    )
    bootDisk: BootDisk = Field(
        ..., description='Immutable. The boot disk for the instance.'
    )
    canIpForward: Optional[bool] = Field(
        default=None,
        description='Whether sending and receiving of packets with non-matching source or destination IPs is allowed.',
    )
    confidentialInstanceConfig: Optional[ConfidentialInstanceConfig] = Field(
        default=None,
        description='Immutable. The Confidential VM config being used by the instance.  on_host_maintenance has to be set to TERMINATE or this will fail to create.',
    )
    deletionProtection: Optional[bool] = Field(
        default=None,
        description='Whether deletion protection is enabled on this instance.',
    )
    description: Optional[str] = Field(
        default=None, description='Immutable. A brief description of the resource.'
    )
    desiredStatus: Optional[str] = Field(
        default=None,
        description='Desired status of the instance. Either "RUNNING" or "TERMINATED".',
    )
    enableDisplay: Optional[bool] = Field(
        default=None, description='Whether the instance has virtual displays enabled.'
    )
    guestAccelerator: Optional[List[GuestAcceleratorItem]] = Field(
        default=None,
        description='Immutable. List of the type and count of accelerator cards attached to the instance.',
    )
    hostname: Optional[str] = Field(
        default=None,
        description='Immutable. A custom hostname for the instance. Must be a fully qualified DNS name and RFC-1035-valid. Valid format is a series of labels 1-63 characters long matching the regular expression [a-z]([-a-z0-9]*[a-z0-9]), concatenated with periods. The entire hostname must not exceed 253 characters. Changing this forces a new resource to be created.',
    )
    instanceTemplateRef: Optional[Union[InstanceTemplateRef, InstanceTemplateRef1]] = (
        None
    )
    machineType: str = Field(..., description='The machine type to create.')
    metadata: Optional[List[Metadatum]] = None
    metadataStartupScript: Optional[str] = Field(
        default=None,
        description='Immutable. Metadata startup scripts made available within the instance.',
    )
    minCpuPlatform: Optional[str] = Field(
        default=None,
        description='The minimum CPU platform specified for the VM instance.',
    )
    networkInterface: List[NetworkInterfaceItem] = Field(
        ..., description='Immutable. The networks attached to the instance.'
    )
    networkPerformanceConfig: Optional[NetworkPerformanceConfig] = Field(
        default=None,
        description='Immutable. Configures network performance settings for the instance. If not specified, the instance will be created with its default network performance configuration.',
    )
    params: Optional[Params] = Field(
        default=None,
        description='Immutable. Stores additional params passed with the request, but not persisted as part of resource payload.',
    )
    reservationAffinity: Optional[ReservationAffinity] = Field(
        default=None,
        description='Immutable. Specifies the reservations that this instance can consume from.',
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    resourcePolicies: Optional[List[Union[ResourcePolicies, ResourcePolicies1]]] = None
    scheduling: Optional[Scheduling] = Field(
        default=None, description='The scheduling strategy being used by the instance.'
    )
    scratchDisk: Optional[List[ScratchDiskItem]] = Field(
        default=None,
        description='Immutable. The scratch disks attached to the instance.',
    )
    serviceAccount: Optional[ServiceAccount] = Field(
        default=None, description='The service account to attach to the instance.'
    )
    shieldedInstanceConfig: Optional[ShieldedInstanceConfig] = Field(
        default=None, description='The shielded vm config being used by the instance.'
    )
    tags: Optional[List[str]] = Field(
        default=None, description='The list of tags attached to the instance.'
    )
    zone: str = Field(
        ...,
        description='Immutable. The zone of the instance. If self_link is provided, this value is ignored. If neither self_link nor zone are provided, the provider zone is used.',
    )


class Spec1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    advancedMachineFeatures: Optional[AdvancedMachineFeatures] = Field(
        default=None,
        description='Controls for advanced machine-related behavior features.',
    )
    attachedDisk: Optional[List[AttachedDiskItem1]] = Field(
        default=None, description='List of disks attached to the instance.'
    )
    bootDisk: Optional[BootDisk1] = Field(
        default=None, description='Immutable. The boot disk for the instance.'
    )
    canIpForward: Optional[bool] = Field(
        default=None,
        description='Whether sending and receiving of packets with non-matching source or destination IPs is allowed.',
    )
    confidentialInstanceConfig: Optional[ConfidentialInstanceConfig] = Field(
        default=None,
        description='Immutable. The Confidential VM config being used by the instance.  on_host_maintenance has to be set to TERMINATE or this will fail to create.',
    )
    deletionProtection: Optional[bool] = Field(
        default=None,
        description='Whether deletion protection is enabled on this instance.',
    )
    description: Optional[str] = Field(
        default=None, description='Immutable. A brief description of the resource.'
    )
    desiredStatus: Optional[str] = Field(
        default=None,
        description='Desired status of the instance. Either "RUNNING" or "TERMINATED".',
    )
    enableDisplay: Optional[bool] = Field(
        default=None, description='Whether the instance has virtual displays enabled.'
    )
    guestAccelerator: Optional[List[GuestAcceleratorItem]] = Field(
        default=None,
        description='Immutable. List of the type and count of accelerator cards attached to the instance.',
    )
    hostname: Optional[str] = Field(
        default=None,
        description='Immutable. A custom hostname for the instance. Must be a fully qualified DNS name and RFC-1035-valid. Valid format is a series of labels 1-63 characters long matching the regular expression [a-z]([-a-z0-9]*[a-z0-9]), concatenated with periods. The entire hostname must not exceed 253 characters. Changing this forces a new resource to be created.',
    )
    instanceTemplateRef: Union[InstanceTemplateRef2, InstanceTemplateRef3]
    machineType: Optional[str] = Field(
        default=None, description='The machine type to create.'
    )
    metadata: Optional[List[Metadatum]] = None
    metadataStartupScript: Optional[str] = Field(
        default=None,
        description='Immutable. Metadata startup scripts made available within the instance.',
    )
    minCpuPlatform: Optional[str] = Field(
        default=None,
        description='The minimum CPU platform specified for the VM instance.',
    )
    networkInterface: Optional[List[NetworkInterfaceItem1]] = Field(
        default=None, description='Immutable. The networks attached to the instance.'
    )
    networkPerformanceConfig: Optional[NetworkPerformanceConfig] = Field(
        default=None,
        description='Immutable. Configures network performance settings for the instance. If not specified, the instance will be created with its default network performance configuration.',
    )
    params: Optional[Params] = Field(
        default=None,
        description='Immutable. Stores additional params passed with the request, but not persisted as part of resource payload.',
    )
    reservationAffinity: Optional[ReservationAffinity1] = Field(
        default=None,
        description='Immutable. Specifies the reservations that this instance can consume from.',
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    resourcePolicies: Optional[List[Union[ResourcePolicies2, ResourcePolicies3]]] = None
    scheduling: Optional[Scheduling1] = Field(
        default=None, description='The scheduling strategy being used by the instance.'
    )
    scratchDisk: Optional[List[ScratchDiskItem]] = Field(
        default=None,
        description='Immutable. The scratch disks attached to the instance.',
    )
    serviceAccount: Optional[ServiceAccount1] = Field(
        default=None, description='The service account to attach to the instance.'
    )
    shieldedInstanceConfig: Optional[ShieldedInstanceConfig] = Field(
        default=None, description='The shielded vm config being used by the instance.'
    )
    tags: Optional[List[str]] = Field(
        default=None, description='The list of tags attached to the instance.'
    )
    zone: str = Field(
        ...,
        description='Immutable. The zone of the instance. If self_link is provided, this value is ignored. If neither self_link nor zone are provided, the provider zone is used.',
    )


class SpecificReservation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: str = Field(
        ...,
        description='Immutable. Corresponds to the label key of a reservation resource. To target a SPECIFIC_RESERVATION by name, specify compute.googleapis.com/reservation-name as the key and specify the name of your reservation as the only value.',
    )
    values: List[str] = Field(
        ...,
        description='Immutable. Corresponds to the label values of a reservation resource.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    cpuPlatform: Optional[str] = Field(
        default=None, description='The CPU platform used by this instance.'
    )
    currentStatus: Optional[str] = Field(
        default=None,
        description='\n\t\t\t\t\tCurrent status of the instance.\n\t\t\t\t\tThis could be one of the following values: PROVISIONING, STAGING, RUNNING, STOPPING, SUSPENDING, SUSPENDED, REPAIRING, and TERMINATED.\n\t\t\t\t\tFor more information about the status of the instance, see [Instance life cycle](https://cloud.google.com/compute/docs/instances/instance-life-cycle).',
    )
    instanceId: Optional[str] = Field(
        default=None,
        description='The server-assigned unique identifier of this instance.',
    )
    labelFingerprint: Optional[str] = Field(
        default=None, description='The unique fingerprint of the labels.'
    )
    metadataFingerprint: Optional[str] = Field(
        default=None, description='The unique fingerprint of the metadata.'
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    selfLink: Optional[str] = Field(
        default=None, description='The URI of the created resource.'
    )
    tagsFingerprint: Optional[str] = Field(
        default=None, description='The unique fingerprint of the tags.'
    )


class SubnetworkRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeSubnetwork` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SubnetworkRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeSubnetwork` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SubnetworkRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeSubnetwork` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SubnetworkRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeSubnetwork` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ValueFrom(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )
