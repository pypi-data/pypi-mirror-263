# generated by datamodel-codegen:
#   filename:  runjob_v1beta1.json
#   timestamp: 2024-03-18T21:08:45+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class BinaryAuthorization(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    breakglassJustification: Optional[str] = Field(
        default=None,
        description='If present, indicates to use Breakglass using this justification. If useDefault is False, then it must be empty. For more information on breakglass, see https://cloud.google.com/binary-authorization/docs/using-breakglass.',
    )
    useDefault: Optional[bool] = Field(
        default=None,
        description="If True, indicates to use the default project's binary authorization policy. If False, binary authorization will be disabled.",
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class Container(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    args: Optional[List[str]] = Field(
        default=None,
        description="Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell.",
    )
    command: Optional[List[str]] = Field(
        default=None,
        description="Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell.",
    )
    env: Optional[List[EnvItem]] = Field(
        default=None,
        description='List of environment variables to set in the container.',
    )
    image: str = Field(
        ...,
        description='URL of the Container image in Google Container Registry or Google Artifact Registry. More info: https://kubernetes.io/docs/concepts/containers/images.',
    )
    livenessProbe: Optional[LivenessProbe] = Field(
        default=None,
        description='DEPRECATED. `liveness_probe` is deprecated. This field is not supported by the Cloud Run API. Periodic probe of container liveness. Container will be restarted if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\nThis field is not supported in Cloud Run Job currently.',
    )
    name: Optional[str] = Field(
        default=None, description='Name of the container specified as a DNS_LABEL.'
    )
    ports: Optional[List[Port]] = Field(
        default=None,
        description='List of ports to expose from the container. Only a single port can be specified. The specified ports must be listening on all interfaces (0.0.0.0) within the container to be accessible.\n\nIf omitted, a port number will be chosen and passed to the container through the PORT environment variable for the container to listen on.',
    )
    resources: Optional[Resources] = Field(
        default=None,
        description='Compute Resource requirements by this container. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources.',
    )
    startupProbe: Optional[StartupProbe] = Field(
        default=None,
        description='DEPRECATED. `startup_probe` is deprecated. This field is not supported by the Cloud Run API. Startup probe of application within the container. All other probes are disabled if a startup probe is provided, until it succeeds. Container will not be added to service endpoints if the probe fails. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes\nThis field is not supported in Cloud Run Job currently.',
    )
    volumeMounts: Optional[List[VolumeMount]] = Field(
        default=None, description="Volume to mount into the container's filesystem."
    )
    workingDir: Optional[str] = Field(
        default=None,
        description="Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image.",
    )


class EmptyDir(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    medium: Optional[str] = Field(
        default=None,
        description='The different types of medium supported for EmptyDir. Default value: "MEMORY" Possible values: ["MEMORY"].',
    )
    sizeLimit: Optional[str] = Field(
        default=None,
        description="Limit on the storage usable by this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. This field's values are of the 'Quantity' k8s type: https://kubernetes.io/docs/reference/kubernetes-api/common-definitions/quantity/. The default is nil which means that the limit is undefined. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir.",
    )


class EncryptionKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class EncryptionKeyRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class EnvItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(
        ...,
        description='Name of the environment variable. Must be a C_IDENTIFIER, and mnay not exceed 32768 characters.',
    )
    value: Optional[str] = Field(
        default=None,
        description='Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any route environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "", and the maximum length is 32768 bytes.',
    )
    valueSource: Optional[ValueSource] = Field(
        default=None, description="Source for the environment variable's value."
    )


class HttpGet(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    httpHeaders: Optional[List[HttpHeader]] = Field(
        default=None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(
        default=None, description="Path to access on the HTTP server. Defaults to '/'."
    )


class HttpGet1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    httpHeaders: Optional[List[HttpHeader]] = Field(
        default=None,
        description='Custom headers to set in the request. HTTP allows repeated headers.',
    )
    path: Optional[str] = Field(
        default=None, description="Path to access on the HTTP server. Defaults to '/'."
    )


class HttpHeader(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(..., description='The header field name.')
    value: Optional[str] = Field(default=None, description='The header field value.')


class Item(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    mode: Optional[int] = Field(
        default=None,
        description="Integer octal mode bits to use on this file, must be a value between 01 and 0777 (octal). If 0 or not set, the Volume's default mode will be used.",
    )
    path: str = Field(
        ..., description='The relative path of the secret in the container.'
    )
    versionRef: Union[VersionRef2, VersionRef3] = Field(
        ...,
        description="The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version",
    )


class LatestCreatedExecutionItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    completionTime: Optional[str] = Field(
        default=None,
        description='Completion timestamp of the execution.\n\nA timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".',
    )
    createTime: Optional[str] = Field(
        default=None,
        description='Creation timestamp of the execution.\n\nA timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".',
    )
    name: Optional[str] = Field(default=None, description='Name of the execution.')


class LivenessProbe(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    failureThreshold: Optional[int] = Field(
        default=None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    httpGet: Optional[HttpGet] = Field(
        default=None,
        description='HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.',
    )
    initialDelaySeconds: Optional[int] = Field(
        default=None,
        description='Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes.',
    )
    periodSeconds: Optional[int] = Field(
        default=None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeoutSeconds.',
    )
    tcpSocket: Optional[TcpSocket] = Field(
        default=None,
        description='TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.',
    )
    timeoutSeconds: Optional[int] = Field(
        default=None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than periodSeconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes.',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class NetworkInterface(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    networkRef: Optional[Union[NetworkRef, NetworkRef1]] = Field(
        default=None,
        description='The VPC network that the Cloud Run resource will be able to send traffic to. At least one of network or subnetwork must be specified. If both\nnetwork and subnetwork are specified, the given VPC subnetwork must belong to the given VPC network. If network is not specified, it will be\nlooked up from the subnetwork.',
    )
    subnetworkRef: Optional[Union[SubnetworkRef, SubnetworkRef1]] = Field(
        default=None,
        description='The VPC subnetwork that the Cloud Run resource will get IPs from. At least one of network or subnetwork must be specified. If both\nnetwork and subnetwork are specified, the given VPC subnetwork must belong to the given VPC network. If subnetwork is not specified, the\nsubnetwork with the same name with the network will be used.',
    )
    tags: Optional[List[str]] = Field(
        default=None, description='Network tags applied to this Cloud Run job.'
    )


class NetworkRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeNetwork` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NetworkRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeNetwork` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Port(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    containerPort: Optional[int] = Field(
        default=None,
        description='Port number the container listens on. This must be a valid TCP port number, 0 < containerPort < 65536.',
    )
    name: Optional[str] = Field(
        default=None,
        description='If specified, used to specify which protocol to use. Allowed values are "http1" and "h2c".',
    )


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `Project` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ..., description='Allowed value: The `name` field of a `Project` resource.'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Resources(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    limits: Optional[Dict[str, str]] = Field(
        default=None,
        description="Only memory and CPU are supported. Note: The only supported values for CPU are '1', '2', '4', and '8'. Setting 4 CPU requires at least 2Gi of memory. The values of the map is string form of the 'quantity' k8s type: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apimachinery/pkg/api/resource/quantity.go.",
    )


class Secret(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    defaultMode: Optional[int] = Field(
        default=None,
        description='Integer representation of mode bits to use on created files by default. Must be a value between 0000 and 0777 (octal), defaulting to 0444. Directories within the path are not affected by this setting.',
    )
    items: Optional[List[Item]] = Field(
        default=None,
        description='If unspecified, the volume will expose a file whose name is the secret, relative to VolumeMount.mount_path. If specified, the key will be used as the version to fetch from Cloud Secret Manager and the path will be the name of the file exposed in the volume. When items are defined, they must specify a path and a version.',
    )
    secretRef: Union[SecretRef2, SecretRef3] = Field(
        ...,
        description='The name of the secret in Cloud Secret Manager. Format: {secret} if the secret is in the same project. projects/{project}/secrets/{secret} if the secret is in a different project.',
    )


class SecretKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretRef: Union[SecretRef, SecretRef1] = Field(
        ...,
        description='The name of the secret in Cloud Secret Manager. Format: {secretName} if the secret is in the same project. projects/{project}/secrets/{secretName} if the secret is in a different project.',
    )
    versionRef: Union[VersionRef, VersionRef1] = Field(
        ...,
        description="The Cloud Secret Manager secret version. Can be 'latest' for the latest value or an integer for a specific version.",
    )


class SecretRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `SecretManagerSecret` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SecretRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `name` field of a `SecretManagerSecret` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SecretRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `SecretManagerSecret` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SecretRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `name` field of a `SecretManagerSecret` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ServiceAccountRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ServiceAccountRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    annotations: Optional[Dict[str, str]] = Field(
        default=None,
        description="Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.\n\nCloud Run API v2 does not support annotations with 'run.googleapis.com', 'cloud.googleapis.com', 'serving.knative.dev', or 'autoscaling.knative.dev' namespaces, and they will be rejected on new resources.\nAll system annotations in v1 now have a corresponding field in v2 Job.\n\nThis field follows Kubernetes annotations' namespacing, limits, and rules.",
    )
    binaryAuthorization: Optional[BinaryAuthorization] = Field(
        default=None, description='Settings for the Binary Authorization feature.'
    )
    client: Optional[str] = Field(
        default=None, description='Arbitrary identifier for the API client.'
    )
    clientVersion: Optional[str] = Field(
        default=None, description='Arbitrary version identifier for the API client.'
    )
    launchStage: Optional[str] = Field(
        default=None,
        description='The launch stage as defined by [Google Cloud Platform Launch Stages](https://cloud.google.com/products#product-launch-stages). Cloud Run supports ALPHA, BETA, and GA.\nIf no value is specified, GA is assumed. Set the launch stage to a preview stage on input to allow use of preview features in that stage. On read (or output), describes whether the resource uses preview features.\n\nFor example, if ALPHA is provided as input, but only BETA and GA-level features are used, this field will be BETA on output. Possible values: ["UNIMPLEMENTED", "PRELAUNCH", "EARLY_ACCESS", "ALPHA", "BETA", "GA", "DEPRECATED"].',
    )
    location: str = Field(
        ..., description='Immutable. The location of the cloud run job.'
    )
    projectRef: Union[ProjectRef, ProjectRef1] = Field(
        ..., description='The project that this resource belongs to.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    template: Template = Field(
        ..., description='The template used to create executions for this Job.'
    )


class StartupProbe(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    failureThreshold: Optional[int] = Field(
        default=None,
        description='Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.',
    )
    httpGet: Optional[HttpGet1] = Field(
        default=None,
        description='HTTPGet specifies the http request to perform. Exactly one of HTTPGet or TCPSocket must be specified.',
    )
    initialDelaySeconds: Optional[int] = Field(
        default=None,
        description='Number of seconds after the container has started before the probe is initiated. Defaults to 0 seconds. Minimum value is 0. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes.',
    )
    periodSeconds: Optional[int] = Field(
        default=None,
        description='How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1. Maximum value for liveness probe is 3600. Maximum value for startup probe is 240. Must be greater or equal than timeoutSeconds.',
    )
    tcpSocket: Optional[TcpSocket] = Field(
        default=None,
        description='TCPSocket specifies an action involving a TCP port. Exactly one of HTTPGet or TCPSocket must be specified.',
    )
    timeoutSeconds: Optional[int] = Field(
        default=None,
        description='Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. Maximum value is 3600. Must be smaller than periodSeconds. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    createTime: Optional[str] = Field(default=None, description='The creation time.')
    creator: Optional[str] = Field(
        default=None, description='Email address of the authenticated creator.'
    )
    deleteTime: Optional[str] = Field(default=None, description='The deletion time.')
    etag: Optional[str] = Field(
        default=None,
        description='A system-generated fingerprint for this version of the resource. May be used to detect modification conflict during updates.',
    )
    executionCount: Optional[int] = Field(
        default=None, description='Number of executions created for this job.'
    )
    expireTime: Optional[str] = Field(
        default=None,
        description='For a deleted resource, the time after which it will be permamently deleted.',
    )
    lastModifier: Optional[str] = Field(
        default=None, description='Email address of the last authenticated modifier.'
    )
    latestCreatedExecution: Optional[List[LatestCreatedExecutionItem]] = Field(
        default=None, description='Name of the last created execution.'
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    reconciling: Optional[bool] = Field(
        default=None,
        description='Returns true if the Job is currently being acted upon by the system to bring it into the desired state.\n\nWhen a new Job is created, or an existing one is updated, Cloud Run will asynchronously perform all necessary steps to bring the Job to the desired state. This process is called reconciliation. While reconciliation is in process, observedGeneration and latest_succeeded_execution, will have transient values that might mismatch the intended state: Once reconciliation is over (and this field is false), there are two possible outcomes: reconciliation succeeded and the state matches the Job, or there was an error, and reconciliation failed. This state can be found in terminalCondition.state.\n\nIf reconciliation succeeded, the following fields will match: observedGeneration and generation, latest_succeeded_execution and latestCreatedExecution.\n\nIf reconciliation failed, observedGeneration and latest_succeeded_execution will have the state of the last succeeded execution or empty for newly created Job. Additional information on the failure can be found in terminalCondition and conditions.',
    )
    terminalCondition: Optional[List[TerminalConditionItem]] = Field(
        default=None,
        description='The Condition of this Job, containing its readiness status, and detailed error information in case it did not reach the desired state.',
    )
    uid: Optional[str] = Field(
        default=None,
        description='Server assigned unique identifier for the Execution. The value is a UUID4 string and guaranteed to remain unchanged until the resource is deleted.',
    )
    updateTime: Optional[str] = Field(
        default=None, description='The last-modified time.'
    )


class SubnetworkRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeSubnetwork` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SubnetworkRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeSubnetwork` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class TcpSocket(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    port: Optional[int] = Field(
        default=None,
        description='Port number to access on the container. Must be in the range 1 to 65535. If not specified, defaults to 8080.',
    )


class Template(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    annotations: Optional[Dict[str, str]] = Field(
        default=None,
        description="Unstructured key value map that may be set by external tools to store and arbitrary metadata. They are not queryable and should be preserved when modifying objects.\n\nCloud Run API v2 does not support annotations with 'run.googleapis.com', 'cloud.googleapis.com', 'serving.knative.dev', or 'autoscaling.knative.dev' namespaces, and they will be rejected.\nAll system annotations in v1 now have a corresponding field in v2 ExecutionTemplate.\n\nThis field follows Kubernetes annotations' namespacing, limits, and rules.",
    )
    parallelism: Optional[int] = Field(
        default=None,
        description='Specifies the maximum desired number of tasks the execution should run at given time. Must be <= taskCount. When the job is run, if this field is 0 or unset, the maximum possible value will be used for that execution. The actual number of tasks running in steady state will be less than this number when there are fewer tasks waiting to be completed remaining, i.e. when the work left to do is less than max parallelism.',
    )
    taskCount: Optional[int] = Field(
        default=None,
        description='Specifies the desired number of tasks the execution should run. Setting to 1 means that parallelism is limited to 1 and the success of that task signals the success of the execution. More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/.',
    )
    template: Template1 = Field(
        ...,
        description='Describes the task(s) that will be created when executing an execution.',
    )


class Template1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    containers: Optional[List[Container]] = Field(
        default=None,
        description='Holds the single container that defines the unit of execution for this task.',
    )
    encryptionKeyRef: Optional[Union[EncryptionKeyRef, EncryptionKeyRef1]] = Field(
        default=None,
        description='A reference to a customer managed encryption key (CMEK) to use to encrypt this container image. For more information, go to https://cloud.google.com/run/docs/securing/using-cmek',
    )
    executionEnvironment: Optional[str] = Field(
        default=None,
        description='The execution environment being used to host this Task. Possible values: ["EXECUTION_ENVIRONMENT_GEN1", "EXECUTION_ENVIRONMENT_GEN2"].',
    )
    maxRetries: Optional[int] = Field(
        default=None,
        description='Number of retries allowed per Task, before marking this Task failed.',
    )
    serviceAccountRef: Optional[Union[ServiceAccountRef, ServiceAccountRef1]] = Field(
        default=None,
        description="Email address of the IAM service account associated with the revision of the service. The service account represents the identity of the running revision, and determines what permissions the revision has. If not provided, the revision will use the project's default service account.",
    )
    timeout: Optional[str] = Field(
        default=None,
        description='Max allowed time duration the Task may be active before the system will actively try to mark it failed and kill associated containers. This applies per attempt of a task, meaning each retry can run for the full timeout.\n\nA duration in seconds with up to nine fractional digits, ending with \'s\'. Example: "3.5s".',
    )
    volumes: Optional[List[Volume]] = Field(
        default=None, description='A list of Volumes to make available to containers.'
    )
    vpcAccess: Optional[VpcAccess] = Field(
        default=None,
        description='VPC Access configuration to use for this Task. For more information, visit https://cloud.google.com/run/docs/configuring/connecting-vpc.',
    )


class TerminalConditionItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    executionReason: Optional[str] = Field(
        default=None, description='A reason for the execution condition.'
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.\n\nA timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z".',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human readable message indicating details about the current status.',
    )
    reason: Optional[str] = Field(
        default=None, description='A common (service-level) reason for this condition.'
    )
    revisionReason: Optional[str] = Field(
        default=None, description='A reason for the revision condition.'
    )
    severity: Optional[str] = Field(
        default=None,
        description='How to interpret failures of this condition, one of Error, Warning, Info.',
    )
    state: Optional[str] = Field(default=None, description='State of the condition.')
    type: Optional[str] = Field(
        default=None,
        description='type is used to communicate the status of the reconciliation process. See also: https://github.com/knative/serving/blob/main/docs/spec/errors.md#error-conditions-and-reporting Types common to all resources include: * "Ready": True when the Resource is ready.',
    )


class ValueSource(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description='Selects a secret and a specific version from Cloud Secret Manager.',
    )


class VersionRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `version` field of a `SecretManagerSecretVersion` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class VersionRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `version` field of a `SecretManagerSecretVersion` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class VersionRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `version` field of a `SecretManagerSecretVersion` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class VersionRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `version` field of a `SecretManagerSecretVersion` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Volume(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    emptyDir: Optional[EmptyDir] = Field(
        default=None, description='Ephemeral storage used as a shared volume.'
    )
    name: str = Field(..., description="Volume's name.")
    secret: Optional[Secret] = Field(
        default=None,
        description='Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret.',
    )


class VolumeMount(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    mountPath: str = Field(
        ...,
        description="Path within the container at which the volume should be mounted. Must not contain ':'. For Cloud SQL volumes, it can be left empty, or must otherwise be /cloudsql. All instances defined in the Volume will be available as /cloudsql/[instance]. For more information on Cloud SQL volumes, visit https://cloud.google.com/sql/docs/mysql/connect-run.",
    )
    name: str = Field(..., description='This must match the Name of a Volume.')


class VpcAccess(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    egress: Optional[str] = Field(
        default=None,
        description='Traffic VPC egress settings. Possible values: ["ALL_TRAFFIC", "PRIVATE_RANGES_ONLY"].',
    )
    networkInterfaces: Optional[List[NetworkInterface]] = Field(
        default=None,
        description='Direct VPC egress settings. Currently only single network interface is supported.',
    )
