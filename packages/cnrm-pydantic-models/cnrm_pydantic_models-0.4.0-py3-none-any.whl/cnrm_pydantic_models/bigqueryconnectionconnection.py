# generated by datamodel-codegen:
#   filename:  bigqueryconnectionconnection_v1alpha1.json
#   timestamp: 2024-03-18T21:06:41+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class AccessRole(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    iamRoleId: str = Field(
        ...,
        description='The userâ€™s AWS IAM Role that trusts the Google-owned AWS IAM user Connection.',
    )
    identity: Optional[str] = Field(
        default=None,
        description="A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's AWS IAM Role.",
    )


class Aws(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accessRole: AccessRole = Field(
        ...,
        description="Authentication using Google owned service account to assume into customer's AWS IAM Role.",
    )


class Azure(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    application: Optional[str] = Field(
        default=None, description='The name of the Azure Active Directory Application.'
    )
    clientId: Optional[str] = Field(
        default=None,
        description='The client id of the Azure Active Directory Application.',
    )
    customerTenantId: str = Field(
        ..., description="The id of customer's directory that host the data."
    )
    federatedApplicationClientId: Optional[str] = Field(
        default=None,
        description='The Azure Application (client) ID where the federated credentials will be hosted.',
    )
    identity: Optional[str] = Field(
        default=None,
        description="A unique Google-owned and Google-generated identity for the Connection. This identity will be used to access the user's Azure Active Directory Application.",
    )
    objectId: Optional[str] = Field(
        default=None,
        description='The object id of the Azure Active Directory Application.',
    )
    redirectUri: Optional[str] = Field(
        default=None,
        description='The URL user will be redirected to after granting consent during connection setup.',
    )


class CloudResource(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    serviceAccountId: Optional[str] = Field(
        default=None,
        description='The account ID of the service created for the purpose of this connection.',
    )


class CloudSpanner(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: str = Field(
        ...,
        description="Cloud Spanner database in the form 'project/instance/database'.",
    )
    useParallelism: Optional[bool] = Field(
        default=None,
        description='If parallelism should be used when reading from Cloud Spanner.',
    )
    useServerlessAnalytics: Optional[bool] = Field(
        default=None,
        description='If the serverless analytics service should be used to read data from Cloud Spanner. useParallelism must be set when using serverless analytics.',
    )


class CloudSql(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    credential: Credential = Field(..., description='Cloud SQL properties.')
    database: str = Field(..., description='Database name.')
    instanceId: str = Field(
        ..., description='Cloud SQL instance ID in the form project:location:instance.'
    )
    serviceAccountId: Optional[str] = Field(
        default=None,
        description='When the connection is used in the context of an operation in BigQuery, this service account will serve as the identity being used for connecting to the CloudSQL instance specified in this connection.',
    )
    type: str = Field(
        ...,
        description='Type of the Cloud SQL database. Possible values: ["DATABASE_TYPE_UNSPECIFIED", "POSTGRES", "MYSQL"].',
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class Credential(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    password: Union[Password, Password1] = Field(
        ..., description='Password for database.'
    )
    username: str = Field(..., description='Username for database.')


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class Password(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class Password1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom1 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `Project` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ..., description='Allowed value: The `name` field of a `Project` resource.'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SecretKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: str = Field(..., description='Key that identifies the value to be extracted.')
    name: str = Field(..., description='Name of the Secret to extract a value from.')


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    aws: Optional[Aws] = Field(
        default=None,
        description='Connection properties specific to Amazon Web Services.',
    )
    azure: Optional[Azure] = Field(
        default=None,
        description='Container for connection properties specific to Azure.',
    )
    cloudResource: Optional[CloudResource] = Field(
        default=None,
        description='Container for connection properties for delegation of access to GCP resources.',
    )
    cloudSpanner: Optional[CloudSpanner] = Field(
        default=None, description='Connection properties specific to Cloud Spanner.'
    )
    cloudSql: Optional[CloudSql] = Field(
        default=None, description='Connection properties specific to the Cloud SQL.'
    )
    description: Optional[str] = Field(
        default=None, description='A descriptive description for the connection.'
    )
    friendlyName: Optional[str] = Field(
        default=None, description='A descriptive name for the connection.'
    )
    location: str = Field(
        ...,
        description='Immutable. The geographic location where the connection should reside.\nCloud SQL instance must be in the same location as the connection\nwith following exceptions: Cloud SQL us-central1 maps to BigQuery US, Cloud SQL europe-west1 maps to BigQuery EU.\nExamples: US, EU, asia-northeast1, us-central1, europe-west1.\nSpanner Connections same as spanner region\nAWS allowed regions are aws-us-east-1\nAzure allowed regions are azure-eastus2.',
    )
    projectRef: Union[ProjectRef, ProjectRef1] = Field(
        ..., description='The project that this resource belongs to.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The connectionId of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    hasCredential: Optional[bool] = Field(
        default=None, description='True if the connection has credential assigned.'
    )
    name: Optional[str] = Field(
        default=None,
        description='The resource name of the connection in the form of:\n"projects/{project_id}/locations/{location_id}/connections/{connectionId}".',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )


class ValueFrom(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )
