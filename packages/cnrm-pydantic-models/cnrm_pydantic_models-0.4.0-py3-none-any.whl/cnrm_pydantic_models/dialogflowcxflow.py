# generated by datamodel-codegen:
#   filename:  dialogflowcxflow_v1alpha1.json
#   timestamp: 2024-03-18T21:07:40+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class ConditionalCase(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cases: Optional[str] = Field(
        default=None,
        description='A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.\nSee [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.',
    )


class ConversationSuccess(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    metadata: Optional[str] = Field(
        default=None,
        description="Custom metadata. Dialogflow doesn't impose any structure on this.",
    )


class EventHandler(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    event: Optional[str] = Field(
        default=None, description='The name of the event to handle.'
    )
    name: Optional[str] = Field(
        default=None, description='The unique identifier of this event handler.'
    )
    targetFlow: Optional[str] = Field(
        default=None,
        description='The target flow to transition to.\nFormat: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.',
    )
    targetPage: Optional[str] = Field(
        default=None,
        description='The target page to transition to.\nFormat: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.',
    )
    triggerFulfillment: Optional[TriggerFulfillment] = Field(
        default=None,
        description='The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.',
    )


class LiveAgentHandoff(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    metadata: Optional[str] = Field(
        default=None,
        description="Custom metadata. Dialogflow doesn't impose any structure on this.",
    )


class Message(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: Optional[str] = Field(
        default=None,
        description='The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.',
    )
    conversationSuccess: Optional[ConversationSuccess] = Field(
        default=None,
        description="Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.\nDialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.\nYou may set this, for example:\n* In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.\n* In a webhook response when you determine that you handled the customer issue.",
    )
    liveAgentHandoff: Optional[LiveAgentHandoff] = Field(
        default=None,
        description='Indicates that the conversation should be handed off to a live agent.\nDialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.\nYou may set this, for example:\n* In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.\n* In a webhook response when you determine that the customer issue can only be handled by a human.',
    )
    outputAudioText: Optional[OutputAudioText] = Field(
        default=None,
        description='A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.',
    )
    payload: Optional[str] = Field(
        default=None, description='A custom, platform-specific payload.'
    )
    playAudio: Optional[PlayAudio] = Field(
        default=None,
        description='Specifies an audio clip to be played by the client as part of the response.',
    )
    telephonyTransferCall: Optional[TelephonyTransferCall] = Field(
        default=None,
        description='Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.',
    )
    text: Optional[Text] = Field(default=None, description='The text response message.')


class Message1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: Optional[str] = Field(
        default=None,
        description='The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.',
    )
    conversationSuccess: Optional[ConversationSuccess] = Field(
        default=None,
        description="Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.\nDialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.\nYou may set this, for example:\n* In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.\n* In a webhook response when you determine that you handled the customer issue.",
    )
    liveAgentHandoff: Optional[LiveAgentHandoff] = Field(
        default=None,
        description='Indicates that the conversation should be handed off to a live agent.\nDialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.\nYou may set this, for example:\n* In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.\n* In a webhook response when you determine that the customer issue can only be handled by a human.',
    )
    outputAudioText: Optional[OutputAudioText] = Field(
        default=None,
        description='A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.',
    )
    payload: Optional[str] = Field(
        default=None, description='A custom, platform-specific payload.'
    )
    playAudio: Optional[PlayAudio] = Field(
        default=None,
        description='Specifies an audio clip to be played by the client as part of the response.',
    )
    telephonyTransferCall: Optional[TelephonyTransferCall] = Field(
        default=None,
        description='Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.',
    )
    text: Optional[Text] = Field(default=None, description='The text response message.')


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class NluSettings(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    classificationThreshold: Optional[float] = Field(
        default=None,
        description='To filter out false positive results and still get variety in matched natural language inputs for your agent, you can tune the machine learning classification threshold.\nIf the returned score value is less than the threshold value, then a no-match event will be triggered. The score values range from 0.0 (completely uncertain) to 1.0 (completely certain). If set to 0.0, the default of 0.3 is used.',
    )
    modelTrainingMode: Optional[str] = Field(
        default=None,
        description='Indicates NLU model training mode.\n* MODEL_TRAINING_MODE_AUTOMATIC: NLU model training is automatically triggered when a flow gets modified. User can also manually trigger model training in this mode.\n* MODEL_TRAINING_MODE_MANUAL: User needs to manually trigger NLU model training. Best for large flows whose models take long time to train. Possible values: ["MODEL_TRAINING_MODE_AUTOMATIC", "MODEL_TRAINING_MODE_MANUAL"].',
    )
    modelType: Optional[str] = Field(
        default=None,
        description='Indicates the type of NLU model.\n* MODEL_TYPE_STANDARD: Use standard NLU model.\n* MODEL_TYPE_ADVANCED: Use advanced NLU model. Possible values: ["MODEL_TYPE_STANDARD", "MODEL_TYPE_ADVANCED"].',
    )


class OutputAudioText(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowPlaybackInterruption: Optional[bool] = Field(
        default=None,
        description="Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.",
    )
    ssml: Optional[str] = Field(
        default=None,
        description='The SSML text to be synthesized. For more information, see SSML.',
    )
    text: Optional[str] = Field(
        default=None, description='The raw text to be synthesized.'
    )


class PlayAudio(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowPlaybackInterruption: Optional[bool] = Field(
        default=None,
        description="Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.",
    )
    audioUri: str = Field(
        ...,
        description='URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.',
    )


class SetParameterAction(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    parameter: Optional[str] = Field(
        default=None, description='Display name of the parameter.'
    )
    value: Optional[str] = Field(
        default=None,
        description='The new JSON-encoded value of the parameter. A null value clears the parameter.',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = Field(
        default=None,
        description='The description of the flow. The maximum length is 500 characters. If exceeded, the request is rejected.',
    )
    displayName: str = Field(..., description='The human-readable name of the flow.')
    eventHandlers: Optional[List[EventHandler]] = Field(
        default=None,
        description="A flow's event handlers serve two purposes:\nThey are responsible for handling events (e.g. no match, webhook errors) in the flow.\nThey are inherited by every page's [event handlers][Page.event_handlers], which can be used to handle common events regardless of the current page. Event handlers defined in the page have higher priority than those defined in the flow.\nUnlike transitionRoutes, these handlers are evaluated on a first-match basis. The first one that matches the event get executed, with the rest being ignored.",
    )
    languageCode: Optional[str] = Field(
        default=None,
        description="Immutable. The language of the following fields in flow:\nFlow.event_handlers.trigger_fulfillment.messages\nFlow.event_handlers.trigger_fulfillment.conditional_cases\nFlow.transition_routes.trigger_fulfillment.messages\nFlow.transition_routes.trigger_fulfillment.conditional_cases\nIf not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.",
    )
    nluSettings: Optional[NluSettings] = Field(
        default=None, description='NLU related settings of the flow.'
    )
    parent: Optional[str] = Field(
        default=None,
        description='Immutable. The agent to create a flow for.\nFormat: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>.',
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The service-generated name of the resource. Used for acquisition only. Leave unset to create a new resource.',
    )
    transitionRouteGroups: Optional[List[str]] = Field(
        default=None,
        description="A flow's transition route group serve two purposes:\nThey are responsible for matching the user's first utterances in the flow.\nThey are inherited by every page's [transition route groups][Page.transition_route_groups]. Transition route groups defined in the page have higher priority than those defined in the flow.\nFormat:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.",
    )
    transitionRoutes: Optional[List[TransitionRoute]] = Field(
        default=None,
        description='A flow\'s transition routes serve two purposes:\nThey are responsible for matching the user\'s first utterances in the flow.\nThey are inherited by every page\'s [transition routes][Page.transition_routes] and can support use cases such as the user saying "help" or "can I talk to a human?", which can be handled in a common way regardless of the current page. Transition routes defined in the page have higher priority than those defined in the flow.\n\nTransitionRoutes are evalauted in the following order:\n  TransitionRoutes with intent specified.\n  TransitionRoutes with only condition specified.\n  TransitionRoutes with intent specified are inherited by pages in the flow.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    name: Optional[str] = Field(
        default=None,
        description='The unique identifier of the flow.\nFormat: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )


class TelephonyTransferCall(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    phoneNumber: str = Field(
        ..., description='Transfer the call to a phone number in E.164 format.'
    )


class Text(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowPlaybackInterruption: Optional[bool] = Field(
        default=None,
        description="Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.",
    )
    text: Optional[List[str]] = Field(
        default=None, description='A collection of text responses.'
    )


class TransitionRoute(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    condition: Optional[str] = Field(
        default=None,
        description='The condition to evaluate against form parameters or session parameters.\nAt least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.',
    )
    intent: Optional[str] = Field(
        default=None,
        description='The unique identifier of an Intent.\nFormat: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.',
    )
    name: Optional[str] = Field(
        default=None, description='The unique identifier of this transition route.'
    )
    targetFlow: Optional[str] = Field(
        default=None,
        description='The target flow to transition to.\nFormat: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.',
    )
    targetPage: Optional[str] = Field(
        default=None,
        description='The target page to transition to.\nFormat: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.',
    )
    triggerFulfillment: Optional[TriggerFulfillment1] = Field(
        default=None,
        description='The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.',
    )


class TriggerFulfillment(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditionalCases: Optional[List[ConditionalCase]] = Field(
        default=None, description='Conditional cases for this fulfillment.'
    )
    messages: Optional[List[Message]] = Field(
        default=None,
        description='The list of rich message responses to present to the user.',
    )
    returnPartialResponses: Optional[bool] = Field(
        default=None,
        description='Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.',
    )
    setParameterActions: Optional[List[SetParameterAction]] = Field(
        default=None, description='Set parameter values before executing the webhook.'
    )
    tag: Optional[str] = Field(
        default=None,
        description='The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.',
    )
    webhook: Optional[str] = Field(
        default=None,
        description='The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.',
    )


class TriggerFulfillment1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditionalCases: Optional[List[ConditionalCase]] = Field(
        default=None, description='Conditional cases for this fulfillment.'
    )
    messages: Optional[List[Message1]] = Field(
        default=None,
        description='The list of rich message responses to present to the user.',
    )
    returnPartialResponses: Optional[bool] = Field(
        default=None,
        description='Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.',
    )
    setParameterActions: Optional[List[SetParameterAction]] = Field(
        default=None, description='Set parameter values before executing the webhook.'
    )
    tag: Optional[str] = Field(
        default=None,
        description='The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.',
    )
    webhook: Optional[str] = Field(
        default=None,
        description='The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.',
    )
