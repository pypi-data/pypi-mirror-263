# generated by datamodel-codegen:
#   filename:  storagedefaultobjectaccesscontrol_v1beta1.json
#   timestamp: 2024-03-18T21:08:54+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class BucketRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `StorageBucket` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class BucketRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `name` field of a `StorageBucket` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class ProjectTeam(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    projectNumber: Optional[str] = Field(
        default=None, description='The project team associated with the entity.'
    )
    team: Optional[str] = Field(
        default=None,
        description='The team. Possible values: ["editors", "owners", "viewers"].',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    bucketRef: Union[BucketRef, BucketRef1] = Field(
        ..., description='Reference to the bucket.'
    )
    entity: str = Field(
        ...,
        description='The entity holding the permission, in one of the following forms:\n  * user-{{userId}}\n  * user-{{email}} (such as "user-liz@example.com")\n  * group-{{groupId}}\n  * group-{{email}} (such as "group-example@googlegroups.com")\n  * domain-{{domain}} (such as "domain-example.com")\n  * project-team-{{projectId}}\n  * allUsers\n  * allAuthenticatedUsers.',
    )
    object: Optional[str] = Field(
        default=None, description='The name of the object, if applied to an object.'
    )
    role: str = Field(
        ...,
        description='The access permission for the entity. Possible values: ["OWNER", "READER"].',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    domain: Optional[str] = Field(
        default=None, description='The domain associated with the entity.'
    )
    email: Optional[str] = Field(
        default=None, description='The email address associated with the entity.'
    )
    entityId: Optional[str] = Field(default=None, description='The ID for the entity.')
    generation: Optional[int] = Field(
        default=None,
        description='The content generation of the object, if applied to an object.',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    projectTeam: Optional[ProjectTeam] = Field(
        default=None, description='The project team associated with the entity.'
    )
