# generated by datamodel-codegen:
#   filename:  computesnapshot_v1beta1.json
#   timestamp: 2024-03-18T21:07:21+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class KmsKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyServiceAccountRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyServiceAccountRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyServiceAccountRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyServiceAccountRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class RawKey(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class RawKey1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom1 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class RawKey2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom2] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class RawKey3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom3 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class SecretKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: str = Field(..., description='Key that identifies the value to be extracted.')
    name: str = Field(..., description='Name of the Secret to extract a value from.')


class SnapshotEncryptionKey(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kmsKeyRef: Optional[Union[KmsKeyRef, KmsKeyRef1]] = Field(
        default=None,
        description='The encryption key that is stored in Google Cloud KMS.',
    )
    kmsKeyServiceAccountRef: Optional[
        Union[KmsKeyServiceAccountRef, KmsKeyServiceAccountRef1]
    ] = Field(
        default=None,
        description='The service account used for the encryption request for the given KMS key.\nIf absent, the Compute Engine Service Agent service account is used.',
    )
    rawKey: Optional[Union[RawKey, RawKey1]] = Field(
        default=None,
        description='Immutable. Specifies a 256-bit customer-supplied encryption key, encoded in\nRFC 4648 base64 to either encrypt or decrypt this resource.',
    )
    sha256: Optional[str] = Field(
        default=None,
        description='The RFC 4648 base64 encoded SHA-256 hash of the customer-supplied\nencryption key that protects this resource.',
    )


class SourceDiskEncryptionKey(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kmsKeyServiceAccountRef: Optional[
        Union[KmsKeyServiceAccountRef2, KmsKeyServiceAccountRef3]
    ] = Field(
        default=None,
        description='The service account used for the encryption request for the given KMS key.\nIf absent, the Compute Engine Service Agent service account is used.',
    )
    rawKey: Optional[Union[RawKey2, RawKey3]] = Field(
        default=None,
        description='Immutable. Specifies a 256-bit customer-supplied encryption key, encoded in\nRFC 4648 base64 to either encrypt or decrypt this resource.',
    )


class SourceDiskRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `ComputeDisk` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SourceDiskRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ..., description='Allowed value: The `name` field of a `ComputeDisk` resource.'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    chainName: Optional[str] = Field(
        default=None,
        description='Immutable. Creates the new snapshot in the snapshot chain labeled with the\nspecified name. The chain name must be 1-63 characters long and\ncomply with RFC1035. This is an uncommon option only for advanced\nservice owners who needs to create separate snapshot chains, for\nexample, for chargeback tracking.  When you describe your snapshot\nresource, this field is visible only if it has a non-empty value.',
    )
    description: Optional[str] = Field(
        default=None, description='Immutable. An optional description of this resource.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    snapshotEncryptionKey: Optional[SnapshotEncryptionKey] = Field(
        default=None,
        description='Immutable. Encrypts the snapshot using a customer-supplied encryption key.\n\nAfter you encrypt a snapshot using a customer-supplied key, you must\nprovide the same key if you use the snapshot later. For example, you\nmust provide the encryption key when you create a disk from the\nencrypted snapshot in a future request.\n\nCustomer-supplied encryption keys do not protect access to metadata of\nthe snapshot.\n\nIf you do not provide an encryption key when creating the snapshot,\nthen the snapshot will be encrypted using an automatically generated\nkey and you do not need to provide a key to use the snapshot later.',
    )
    sourceDiskEncryptionKey: Optional[SourceDiskEncryptionKey] = Field(
        default=None,
        description='Immutable. The customer-supplied encryption key of the source snapshot. Required\nif the source snapshot is protected by a customer-supplied encryption\nkey.',
    )
    sourceDiskRef: Union[SourceDiskRef, SourceDiskRef1] = Field(
        ..., description='A reference to the disk used to create this snapshot.'
    )
    storageLocations: Optional[List[str]] = Field(
        default=None,
        description='Immutable. Cloud Storage bucket storage location of the snapshot (regional or multi-regional).',
    )
    zone: Optional[str] = Field(
        default=None,
        description='Immutable. A reference to the zone where the disk is hosted.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    creationTimestamp: Optional[str] = Field(
        default=None, description='Creation timestamp in RFC3339 text format.'
    )
    diskSizeGb: Optional[int] = Field(
        default=None, description='Size of the snapshot, specified in GB.'
    )
    labelFingerprint: Optional[str] = Field(
        default=None,
        description='The fingerprint used for optimistic locking of this resource. Used\ninternally during updates.',
    )
    licenses: Optional[List[str]] = Field(
        default=None,
        description='A list of public visible licenses that apply to this snapshot. This\ncan be because the original image had licenses attached (such as a\nWindows image).  snapshotEncryptionKey nested object Encrypts the\nsnapshot using a customer-supplied encryption key.',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    selfLink: Optional[str] = None
    snapshotId: Optional[int] = Field(
        default=None, description='The unique identifier for the resource.'
    )
    storageBytes: Optional[int] = Field(
        default=None,
        description='A size of the storage used by the snapshot. As snapshots share\nstorage, this number is expected to change with snapshot\ncreation/deletion.',
    )


class ValueFrom(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )
