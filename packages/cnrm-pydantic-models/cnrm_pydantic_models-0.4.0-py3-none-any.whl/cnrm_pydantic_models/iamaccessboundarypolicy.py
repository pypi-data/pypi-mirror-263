# generated by datamodel-codegen:
#   filename:  iamaccessboundarypolicy_v1beta1.json
#   timestamp: 2024-03-18T21:08:06+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class AccessBoundaryRule(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    availabilityCondition: Optional[AvailabilityCondition] = Field(
        default=None,
        description='The availability condition further constrains the access allowed by the access boundary rule.',
    )
    availablePermissions: Optional[List[str]] = Field(
        default=None,
        description='A list of permissions that may be allowed for use on the specified resource.',
    )
    availableResource: Optional[str] = Field(
        default=None,
        description='The full resource name of a Google Cloud resource entity.',
    )


class AvailabilityCondition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = Field(
        default=None,
        description='Description of the expression. This is a longer text which describes the expression,\ne.g. when hovered over it in a UI.',
    )
    expression: str = Field(
        ...,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        default=None,
        description='String indicating the location of the expression for error reporting,\ne.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        default=None,
        description='Title for the expression, i.e. a short string describing its purpose.\nThis can be used e.g. in UIs which allow to enter the expression.',
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: string of the format `cloudresourcemanager.googleapis.com%2Fprojects%2F{{value}}`, where {{value}} is the `name` field of a `Project` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: string of the format `cloudresourcemanager.googleapis.com%2Fprojects%2F{{value}}`, where {{value}} is the `name` field of a `Project` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Rule(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accessBoundaryRule: Optional[AccessBoundaryRule] = Field(
        default=None, description='An access boundary rule in an IAM policy.'
    )
    description: Optional[str] = Field(
        default=None, description='The description of the rule.'
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    displayName: Optional[str] = Field(
        default=None, description='The display name of the rule.'
    )
    projectRef: Union[ProjectRef, ProjectRef1]
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    rules: List[Rule] = Field(..., description='Rules to be applied.')


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    etag: Optional[str] = Field(
        default=None,
        description='The hash of the resource. Used internally during updates.',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
