# generated by datamodel-codegen:
#   filename:  cloudiotdevice_v1alpha1.json
#   timestamp: 2024-03-18T21:06:54+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class ConfigItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    binaryData: Optional[str] = Field(
        default=None, description='The device configuration data.'
    )
    cloudUpdateTime: Optional[str] = Field(
        default=None,
        description='The time at which this configuration version was updated in Cloud IoT Core.',
    )
    deviceAckTime: Optional[str] = Field(
        default=None,
        description='The time at which Cloud IoT Core received the acknowledgment from the device,\nindicating that the device has received this configuration version.',
    )
    version: Optional[str] = Field(
        default=None, description='The version of this update.'
    )


class Credential(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    expirationTime: Optional[str] = Field(
        default=None, description='The time at which this credential becomes invalid.'
    )
    publicKey: PublicKey = Field(
        ...,
        description='A public key used to verify the signature of JSON Web Tokens (JWTs).',
    )


class GatewayConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    gatewayAuthMethod: Optional[str] = Field(
        default=None,
        description='Indicates whether the device is a gateway. Possible values: ["ASSOCIATION_ONLY", "DEVICE_AUTH_TOKEN_ONLY", "ASSOCIATION_AND_DEVICE_AUTH_TOKEN"].',
    )
    gatewayType: Optional[str] = Field(
        default=None,
        description='Immutable. Indicates whether the device is a gateway. Default value: "NON_GATEWAY" Possible values: ["GATEWAY", "NON_GATEWAY"].',
    )
    lastAccessedGatewayId: Optional[str] = Field(
        default=None,
        description='The ID of the gateway the device accessed most recently.',
    )
    lastAccessedGatewayTime: Optional[str] = Field(
        default=None,
        description='The most recent time at which the device accessed the gateway specified in last_accessed_gateway.',
    )


class LastErrorStatu(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        default=None, description='A list of messages that carry the error details.'
    )
    message: Optional[str] = Field(
        default=None,
        description='A developer-facing error message, which should be in English.',
    )
    number: Optional[int] = Field(
        default=None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class PublicKey(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    format: str = Field(
        ...,
        description='The format of the key. Possible values: ["RSA_PEM", "RSA_X509_PEM", "ES256_PEM", "ES256_X509_PEM"].',
    )
    key: str = Field(..., description='The key data.')


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    blocked: Optional[bool] = Field(
        default=None,
        description='If a device is blocked, connections or requests from this device will fail.',
    )
    credentials: Optional[List[Credential]] = Field(
        default=None, description='The credentials used to authenticate this device.'
    )
    gatewayConfig: Optional[GatewayConfig] = Field(
        default=None, description='Gateway-related configuration and state.'
    )
    logLevel: Optional[str] = Field(
        default=None,
        description='The logging verbosity for device activity. Possible values: ["NONE", "ERROR", "INFO", "DEBUG"].',
    )
    metadata: Optional[Dict[str, str]] = Field(
        default=None, description='The metadata key-value pairs assigned to the device.'
    )
    registry: str = Field(
        ...,
        description='Immutable. The name of the device registry where this device should be created.',
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )


class StateItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    binaryData: Optional[str] = Field(
        default=None, description='The device state data.'
    )
    updateTime: Optional[str] = Field(
        default=None,
        description='The time at which this state version was updated in Cloud IoT Core.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    config: Optional[List[ConfigItem]] = Field(
        default=None,
        description='The most recent device configuration, which is eventually sent from Cloud IoT Core to the device.',
    )
    lastConfigAckTime: Optional[str] = Field(
        default=None,
        description='The last time a cloud-to-device config version acknowledgment was received from the device.',
    )
    lastConfigSendTime: Optional[str] = Field(
        default=None,
        description='The last time a cloud-to-device config version was sent to the device.',
    )
    lastErrorStatus: Optional[List[LastErrorStatu]] = Field(
        default=None,
        description='The error message of the most recent error, such as a failure to publish to Cloud Pub/Sub.',
    )
    lastErrorTime: Optional[str] = Field(
        default=None,
        description='The time the most recent error occurred, such as a failure to publish to Cloud Pub/Sub.',
    )
    lastEventTime: Optional[str] = Field(
        default=None, description='The last time a telemetry event was received.'
    )
    lastHeartbeatTime: Optional[str] = Field(
        default=None, description='The last time an MQTT PINGREQ was received.'
    )
    lastStateTime: Optional[str] = Field(
        default=None, description='The last time a state event was received.'
    )
    numId: Optional[str] = Field(
        default=None,
        description='A server-defined unique numeric ID for the device.\nThis is a more compact way to identify devices, and it is globally unique.',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    state: Optional[List[StateItem]] = Field(
        default=None, description='The state most recently received from the device.'
    )
