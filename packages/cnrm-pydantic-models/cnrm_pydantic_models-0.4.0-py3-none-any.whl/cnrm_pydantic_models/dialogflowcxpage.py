# generated by datamodel-codegen:
#   filename:  dialogflowcxpage_v1alpha1.json
#   timestamp: 2024-03-18T21:07:41+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class ConditionalCase(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cases: Optional[str] = Field(
        default=None,
        description='A JSON encoded list of cascading if-else conditions. Cases are mutually exclusive. The first one with a matching condition is selected, all the rest ignored.\nSee [Case](https://cloud.google.com/dialogflow/cx/docs/reference/rest/v3/Fulfillment#case) for the schema.',
    )


class ConversationSuccess(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    metadata: Optional[str] = Field(
        default=None,
        description="Custom metadata. Dialogflow doesn't impose any structure on this.",
    )


class EntryFulfillment(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditionalCases: Optional[List[ConditionalCase]] = Field(
        default=None, description='Conditional cases for this fulfillment.'
    )
    messages: Optional[List[Message]] = Field(
        default=None,
        description='The list of rich message responses to present to the user.',
    )
    returnPartialResponses: Optional[bool] = Field(
        default=None,
        description='Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.',
    )
    setParameterActions: Optional[List[SetParameterAction]] = Field(
        default=None, description='Set parameter values before executing the webhook.'
    )
    tag: Optional[str] = Field(
        default=None,
        description='The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.',
    )
    webhook: Optional[str] = Field(
        default=None,
        description='The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.',
    )


class EventHandler(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    event: Optional[str] = Field(
        default=None, description='The name of the event to handle.'
    )
    name: Optional[str] = Field(
        default=None, description='The unique identifier of this event handler.'
    )
    targetFlow: Optional[str] = Field(
        default=None,
        description='The target flow to transition to.\nFormat: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.',
    )
    targetPage: Optional[str] = Field(
        default=None,
        description='The target page to transition to.\nFormat: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.',
    )
    triggerFulfillment: Optional[TriggerFulfillment] = Field(
        default=None,
        description='The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.',
    )


class FillBehavior(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    initialPromptFulfillment: Optional[InitialPromptFulfillment] = Field(
        default=None,
        description='The fulfillment to provide the initial prompt that the agent can present to the user in order to fill the parameter.',
    )
    repromptEventHandlers: Optional[List[RepromptEventHandler]] = Field(
        default=None,
        description="The handlers for parameter-level events, used to provide reprompt for the parameter or transition to a different page/flow. The supported events are:\n* sys.no-match-<N>, where N can be from 1 to 6\n* sys.no-match-default\n* sys.no-input-<N>, where N can be from 1 to 6\n* sys.no-input-default\n* sys.invalid-parameter\n[initialPromptFulfillment][initialPromptFulfillment] provides the first prompt for the parameter.\nIf the user's response does not fill the parameter, a no-match/no-input event will be triggered, and the fulfillment associated with the sys.no-match-1/sys.no-input-1 handler (if defined) will be called to provide a prompt. The sys.no-match-2/sys.no-input-2 handler (if defined) will respond to the next no-match/no-input event, and so on.\nA sys.no-match-default or sys.no-input-default handler will be used to handle all following no-match/no-input events after all numbered no-match/no-input handlers for the parameter are consumed.\nA sys.invalid-parameter handler can be defined to handle the case where the parameter values have been invalidated by webhook. For example, if the user's response fill the parameter, however the parameter was invalidated by webhook, the fulfillment associated with the sys.invalid-parameter handler (if defined) will be called to provide a prompt.\nIf the event handler for the corresponding event can't be found on the parameter, initialPromptFulfillment will be re-prompted.",
    )


class Form(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    parameters: Optional[List[Parameter]] = Field(
        default=None, description='Parameters to collect from the user.'
    )


class InitialPromptFulfillment(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditionalCases: Optional[List[ConditionalCase]] = Field(
        default=None, description='Conditional cases for this fulfillment.'
    )
    messages: Optional[List[Message2]] = Field(
        default=None,
        description='The list of rich message responses to present to the user.',
    )
    returnPartialResponses: Optional[bool] = Field(
        default=None,
        description='Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.',
    )
    setParameterActions: Optional[List[SetParameterAction]] = Field(
        default=None, description='Set parameter values before executing the webhook.'
    )
    tag: Optional[str] = Field(
        default=None,
        description='The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.',
    )
    webhook: Optional[str] = Field(
        default=None,
        description='The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.',
    )


class LiveAgentHandoff(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    metadata: Optional[str] = Field(
        default=None,
        description="Custom metadata. Dialogflow doesn't impose any structure on this.",
    )


class Message(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: Optional[str] = Field(
        default=None,
        description='The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.',
    )
    conversationSuccess: Optional[ConversationSuccess] = Field(
        default=None,
        description="Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.\nDialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.\nYou may set this, for example:\n* In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.\n* In a webhook response when you determine that you handled the customer issue.",
    )
    liveAgentHandoff: Optional[LiveAgentHandoff] = Field(
        default=None,
        description='Indicates that the conversation should be handed off to a live agent.\nDialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.\nYou may set this, for example:\n* In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.\n* In a webhook response when you determine that the customer issue can only be handled by a human.',
    )
    outputAudioText: Optional[OutputAudioText] = Field(
        default=None,
        description='A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.',
    )
    payload: Optional[str] = Field(
        default=None, description='A custom, platform-specific payload.'
    )
    playAudio: Optional[PlayAudio] = Field(
        default=None,
        description='Specifies an audio clip to be played by the client as part of the response.',
    )
    telephonyTransferCall: Optional[TelephonyTransferCall] = Field(
        default=None,
        description='Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.',
    )
    text: Optional[Text] = Field(default=None, description='The text response message.')


class Message1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: Optional[str] = Field(
        default=None,
        description='The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.',
    )
    conversationSuccess: Optional[ConversationSuccess] = Field(
        default=None,
        description="Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.\nDialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.\nYou may set this, for example:\n* In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.\n* In a webhook response when you determine that you handled the customer issue.",
    )
    liveAgentHandoff: Optional[LiveAgentHandoff] = Field(
        default=None,
        description='Indicates that the conversation should be handed off to a live agent.\nDialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.\nYou may set this, for example:\n* In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.\n* In a webhook response when you determine that the customer issue can only be handled by a human.',
    )
    outputAudioText: Optional[OutputAudioText] = Field(
        default=None,
        description='A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.',
    )
    payload: Optional[str] = Field(
        default=None, description='A custom, platform-specific payload.'
    )
    playAudio: Optional[PlayAudio] = Field(
        default=None,
        description='Specifies an audio clip to be played by the client as part of the response.',
    )
    telephonyTransferCall: Optional[TelephonyTransferCall] = Field(
        default=None,
        description='Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.',
    )
    text: Optional[Text] = Field(default=None, description='The text response message.')


class Message2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: Optional[str] = Field(
        default=None,
        description='The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.',
    )
    conversationSuccess: Optional[ConversationSuccess] = Field(
        default=None,
        description="Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.\nDialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.\nYou may set this, for example:\n* In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.\n* In a webhook response when you determine that you handled the customer issue.",
    )
    liveAgentHandoff: Optional[LiveAgentHandoff] = Field(
        default=None,
        description='Indicates that the conversation should be handed off to a live agent.\nDialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.\nYou may set this, for example:\n* In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.\n* In a webhook response when you determine that the customer issue can only be handled by a human.',
    )
    outputAudioText: Optional[OutputAudioText] = Field(
        default=None,
        description='A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.',
    )
    payload: Optional[str] = Field(
        default=None, description='A custom, platform-specific payload.'
    )
    playAudio: Optional[PlayAudio] = Field(
        default=None,
        description='Specifies an audio clip to be played by the client as part of the response.',
    )
    telephonyTransferCall: Optional[TelephonyTransferCall] = Field(
        default=None,
        description='Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.',
    )
    text: Optional[Text] = Field(default=None, description='The text response message.')


class Message3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: Optional[str] = Field(
        default=None,
        description='The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.',
    )
    conversationSuccess: Optional[ConversationSuccess] = Field(
        default=None,
        description="Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.\nDialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.\nYou may set this, for example:\n* In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.\n* In a webhook response when you determine that you handled the customer issue.",
    )
    liveAgentHandoff: Optional[LiveAgentHandoff] = Field(
        default=None,
        description='Indicates that the conversation should be handed off to a live agent.\nDialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.\nYou may set this, for example:\n* In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.\n* In a webhook response when you determine that the customer issue can only be handled by a human.',
    )
    outputAudioText: Optional[OutputAudioText] = Field(
        default=None,
        description='A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.',
    )
    payload: Optional[str] = Field(
        default=None, description='A custom, platform-specific payload.'
    )
    playAudio: Optional[PlayAudio] = Field(
        default=None,
        description='Specifies an audio clip to be played by the client as part of the response.',
    )
    telephonyTransferCall: Optional[TelephonyTransferCall] = Field(
        default=None,
        description='Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.',
    )
    text: Optional[Text] = Field(default=None, description='The text response message.')


class Message4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    channel: Optional[str] = Field(
        default=None,
        description='The channel which the response is associated with. Clients can specify the channel via QueryParameters.channel, and only associated channel response will be returned.',
    )
    conversationSuccess: Optional[ConversationSuccess] = Field(
        default=None,
        description="Indicates that the conversation succeeded, i.e., the bot handled the issue that the customer talked to it about.\nDialogflow only uses this to determine which conversations should be counted as successful and doesn't process the metadata in this message in any way. Note that Dialogflow also considers conversations that get to the conversation end page as successful even if they don't return ConversationSuccess.\nYou may set this, for example:\n* In the entryFulfillment of a Page if entering the page indicates that the conversation succeeded.\n* In a webhook response when you determine that you handled the customer issue.",
    )
    liveAgentHandoff: Optional[LiveAgentHandoff] = Field(
        default=None,
        description='Indicates that the conversation should be handed off to a live agent.\nDialogflow only uses this to determine which conversations were handed off to a human agent for measurement purposes. What else to do with this signal is up to you and your handoff procedures.\nYou may set this, for example:\n* In the entryFulfillment of a Page if entering the page indicates something went extremely wrong in the conversation.\n* In a webhook response when you determine that the customer issue can only be handled by a human.',
    )
    outputAudioText: Optional[OutputAudioText] = Field(
        default=None,
        description='A text or ssml response that is preferentially used for TTS output audio synthesis, as described in the comment on the ResponseMessage message.',
    )
    payload: Optional[str] = Field(
        default=None, description='A custom, platform-specific payload.'
    )
    playAudio: Optional[PlayAudio] = Field(
        default=None,
        description='Specifies an audio clip to be played by the client as part of the response.',
    )
    telephonyTransferCall: Optional[TelephonyTransferCall] = Field(
        default=None,
        description='Represents the signal that telles the client to transfer the phone call connected to the agent to a third-party endpoint.',
    )
    text: Optional[Text] = Field(default=None, description='The text response message.')


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class OutputAudioText(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowPlaybackInterruption: Optional[bool] = Field(
        default=None,
        description="Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.",
    )
    ssml: Optional[str] = Field(
        default=None,
        description='The SSML text to be synthesized. For more information, see SSML.',
    )
    text: Optional[str] = Field(
        default=None, description='The raw text to be synthesized.'
    )


class Parameter(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    defaultValue: Optional[str] = Field(
        default=None,
        description='The default value of an optional parameter. If the parameter is required, the default value will be ignored.',
    )
    displayName: Optional[str] = Field(
        default=None,
        description='The human-readable name of the parameter, unique within the form.',
    )
    entityType: Optional[str] = Field(
        default=None,
        description='The entity type of the parameter.\nFormat: projects/-/locations/-/agents/-/entityTypes/<System Entity Type ID> for system entity types (for example, projects/-/locations/-/agents/-/entityTypes/sys.date), or projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/entityTypes/<Entity Type ID> for developer entity types.',
    )
    fillBehavior: Optional[FillBehavior] = Field(
        default=None, description='Defines fill behavior for the parameter.'
    )
    isList: Optional[bool] = Field(
        default=None,
        description='Indicates whether the parameter represents a list of values.',
    )
    redact: Optional[bool] = Field(
        default=None,
        description='Indicates whether the parameter content should be redacted in log.\nIf redaction is enabled, the parameter content will be replaced by parameter name during logging. Note: the parameter content is subject to redaction if either parameter level redaction or entity type level redaction is enabled.',
    )
    required: Optional[bool] = Field(
        default=None,
        description='Indicates whether the parameter is required. Optional parameters will not trigger prompts; however, they are filled if the user specifies them.\nRequired parameters must be filled before form filling concludes.',
    )


class PlayAudio(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowPlaybackInterruption: Optional[bool] = Field(
        default=None,
        description="Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.",
    )
    audioUri: str = Field(
        ...,
        description='URI of the audio clip. Dialogflow does not impose any validation on this value. It is specific to the client that reads it.',
    )


class RepromptEventHandler(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    event: Optional[str] = Field(
        default=None, description='The name of the event to handle.'
    )
    name: Optional[str] = Field(
        default=None, description='The unique identifier of this event handler.'
    )
    targetFlow: Optional[str] = Field(
        default=None,
        description='The target flow to transition to.\nFormat: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.',
    )
    targetPage: Optional[str] = Field(
        default=None,
        description='The target page to transition to.\nFormat: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.',
    )
    triggerFulfillment: Optional[TriggerFulfillment1] = Field(
        default=None,
        description='The fulfillment to call when the event occurs. Handling webhook errors with a fulfillment enabled with webhook could cause infinite loop. It is invalid to specify such fulfillment for a handler handling webhooks.',
    )


class SetParameterAction(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    parameter: Optional[str] = Field(
        default=None, description='Display name of the parameter.'
    )
    value: Optional[str] = Field(
        default=None,
        description='The new JSON-encoded value of the parameter. A null value clears the parameter.',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    displayName: str = Field(
        ..., description='The human-readable name of the page, unique within the agent.'
    )
    entryFulfillment: Optional[EntryFulfillment] = Field(
        default=None,
        description='The fulfillment to call when the session is entering the page.',
    )
    eventHandlers: Optional[List[EventHandler]] = Field(
        default=None,
        description='Handlers associated with the page to handle events such as webhook errors, no match or no input.',
    )
    form: Optional[Form] = Field(
        default=None,
        description='The form associated with the page, used for collecting parameters relevant to the page.',
    )
    languageCode: Optional[str] = Field(
        default=None,
        description="Immutable. The language of the following fields in page:\n\nPage.entry_fulfillment.messages\nPage.entry_fulfillment.conditional_cases\nPage.event_handlers.trigger_fulfillment.messages\nPage.event_handlers.trigger_fulfillment.conditional_cases\nPage.form.parameters.fill_behavior.initial_prompt_fulfillment.messages\nPage.form.parameters.fill_behavior.initial_prompt_fulfillment.conditional_cases\nPage.form.parameters.fill_behavior.reprompt_event_handlers.messages\nPage.form.parameters.fill_behavior.reprompt_event_handlers.conditional_cases\nPage.transition_routes.trigger_fulfillment.messages\nPage.transition_routes.trigger_fulfillment.conditional_cases\nIf not specified, the agent's default language is used. Many languages are supported. Note: languages must be enabled in the agent before they can be used.",
    )
    parent: Optional[str] = Field(
        default=None,
        description='Immutable. The flow to create a page for.\nFormat: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.',
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The service-generated name of the resource. Used for acquisition only. Leave unset to create a new resource.',
    )
    transitionRouteGroups: Optional[List[str]] = Field(
        default=None,
        description="Ordered list of TransitionRouteGroups associated with the page. Transition route groups must be unique within a page.\nIf multiple transition routes within a page scope refer to the same intent, then the precedence order is: page's transition route -> page's transition route group -> flow's transition routes.\nIf multiple transition route groups within a page contain the same intent, then the first group in the ordered list takes precedence.\nFormat:projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/transitionRouteGroups/<TransitionRouteGroup ID>.",
    )
    transitionRoutes: Optional[List[TransitionRoute]] = Field(
        default=None,
        description='A list of transitions for the transition rules of this page. They route the conversation to another page in the same flow, or another flow.\nWhen we are in a certain page, the TransitionRoutes are evalauted in the following order:\nTransitionRoutes defined in the page with intent specified.\nTransitionRoutes defined in the transition route groups with intent specified.\nTransitionRoutes defined in flow with intent specified.\nTransitionRoutes defined in the transition route groups with intent specified.\nTransitionRoutes defined in the page with only condition specified.\nTransitionRoutes defined in the transition route groups with only condition specified.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    name: Optional[str] = Field(
        default=None,
        description='The unique identifier of the page.\nFormat: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )


class TelephonyTransferCall(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    phoneNumber: str = Field(
        ..., description='Transfer the call to a phone number in E.164 format.'
    )


class Text(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowPlaybackInterruption: Optional[bool] = Field(
        default=None,
        description="Whether the playback of this message can be interrupted by the end user's speech and the client can then starts the next Dialogflow request.",
    )
    text: Optional[List[str]] = Field(
        default=None, description='A collection of text responses.'
    )


class TransitionRoute(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    condition: Optional[str] = Field(
        default=None,
        description='The condition to evaluate against form parameters or session parameters.\nAt least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.',
    )
    intent: Optional[str] = Field(
        default=None,
        description='The unique identifier of an Intent.\nFormat: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/intents/<Intent ID>. Indicates that the transition can only happen when the given intent is matched. At least one of intent or condition must be specified. When both intent and condition are specified, the transition can only happen when both are fulfilled.',
    )
    name: Optional[str] = Field(
        default=None, description='The unique identifier of this transition route.'
    )
    targetFlow: Optional[str] = Field(
        default=None,
        description='The target flow to transition to.\nFormat: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>.',
    )
    targetPage: Optional[str] = Field(
        default=None,
        description='The target page to transition to.\nFormat: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/flows/<Flow ID>/pages/<Page ID>.',
    )
    triggerFulfillment: Optional[TriggerFulfillment2] = Field(
        default=None,
        description='The fulfillment to call when the condition is satisfied. At least one of triggerFulfillment and target must be specified. When both are defined, triggerFulfillment is executed first.',
    )


class TriggerFulfillment(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditionalCases: Optional[List[ConditionalCase]] = Field(
        default=None, description='Conditional cases for this fulfillment.'
    )
    messages: Optional[List[Message1]] = Field(
        default=None,
        description='The list of rich message responses to present to the user.',
    )
    returnPartialResponses: Optional[bool] = Field(
        default=None,
        description='Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.',
    )
    setParameterActions: Optional[List[SetParameterAction]] = Field(
        default=None, description='Set parameter values before executing the webhook.'
    )
    tag: Optional[str] = Field(
        default=None,
        description='The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.',
    )
    webhook: Optional[str] = Field(
        default=None,
        description='The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.',
    )


class TriggerFulfillment1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditionalCases: Optional[List[ConditionalCase]] = Field(
        default=None, description='Conditional cases for this fulfillment.'
    )
    messages: Optional[List[Message3]] = Field(
        default=None,
        description='The list of rich message responses to present to the user.',
    )
    returnPartialResponses: Optional[bool] = Field(
        default=None,
        description='Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.',
    )
    setParameterActions: Optional[List[SetParameterAction]] = Field(
        default=None, description='Set parameter values before executing the webhook.'
    )
    tag: Optional[str] = Field(
        default=None,
        description='The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.',
    )
    webhook: Optional[str] = Field(
        default=None,
        description='The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.',
    )


class TriggerFulfillment2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditionalCases: Optional[List[ConditionalCase]] = Field(
        default=None, description='Conditional cases for this fulfillment.'
    )
    messages: Optional[List[Message4]] = Field(
        default=None,
        description='The list of rich message responses to present to the user.',
    )
    returnPartialResponses: Optional[bool] = Field(
        default=None,
        description='Whether Dialogflow should return currently queued fulfillment response messages in streaming APIs. If a webhook is specified, it happens before Dialogflow invokes webhook. Warning: 1) This flag only affects streaming API. Responses are still queued and returned once in non-streaming API. 2) The flag can be enabled in any fulfillment but only the first 3 partial responses will be returned. You may only want to apply it to fulfillments that have slow webhooks.',
    )
    setParameterActions: Optional[List[SetParameterAction]] = Field(
        default=None, description='Set parameter values before executing the webhook.'
    )
    tag: Optional[str] = Field(
        default=None,
        description='The tag used by the webhook to identify which fulfillment is being called. This field is required if webhook is specified.',
    )
    webhook: Optional[str] = Field(
        default=None,
        description='The webhook to call. Format: projects/<Project ID>/locations/<Location ID>/agents/<Agent ID>/webhooks/<Webhook ID>.',
    )
