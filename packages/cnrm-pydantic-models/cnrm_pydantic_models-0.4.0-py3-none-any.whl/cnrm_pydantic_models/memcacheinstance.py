# generated by datamodel-codegen:
#   filename:  memcacheinstance_v1beta1.json
#   timestamp: 2024-03-18T21:08:19+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class MaintenancePolicy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    createTime: Optional[str] = Field(
        default=None,
        description='Output only. The time when the policy was created.\nA timestamp in RFC3339 UTC "Zulu" format, with nanosecond\nresolution and up to nine fractional digits.',
    )
    description: Optional[str] = Field(
        default=None,
        description='Optional. Description of what this policy is for.\nCreate/Update methods return INVALID_ARGUMENT if the\nlength is greater than 512.',
    )
    updateTime: Optional[str] = Field(
        default=None,
        description='Output only. The time when the policy was updated.\nA timestamp in RFC3339 UTC "Zulu" format, with nanosecond\nresolution and up to nine fractional digits.',
    )
    weeklyMaintenanceWindow: List[WeeklyMaintenanceWindowItem] = Field(
        ...,
        description='Required. Maintenance window that is applied to resources covered by this policy.\nMinimum 1. For the current version, the maximum number of weekly_maintenance_windows\nis expected to be one.',
    )


class MaintenanceScheduleItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    endTime: Optional[str] = Field(
        default=None,
        description='Output only. The end time of any upcoming scheduled maintenance for this instance.\nA timestamp in RFC3339 UTC "Zulu" format, with nanosecond\nresolution and up to nine fractional digits.',
    )
    scheduleDeadlineTime: Optional[str] = Field(
        default=None,
        description='Output only. The deadline that the maintenance schedule start time\ncan not go beyond, including reschedule.\nA timestamp in RFC3339 UTC "Zulu" format, with nanosecond\nresolution and up to nine fractional digits.',
    )
    startTime: Optional[str] = Field(
        default=None,
        description='Output only. The start time of any upcoming scheduled maintenance for this instance.\nA timestamp in RFC3339 UTC "Zulu" format, with nanosecond\nresolution and up to nine fractional digits.',
    )


class MemcacheNode(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    host: Optional[str] = Field(
        default=None,
        description='Hostname or IP address of the Memcached node used by the clients to connect to the Memcached server on this node.',
    )
    nodeId: Optional[str] = Field(
        default=None,
        description='Identifier of the Memcached node. The node id does not include project or location like the Memcached instance name.',
    )
    port: Optional[int] = Field(
        default=None,
        description='The port number of the Memcached server on this node.',
    )
    state: Optional[str] = Field(
        default=None, description='Current state of the Memcached node.'
    )
    zone: Optional[str] = Field(
        default=None, description='Location (GCP Zone) for the Memcached node.'
    )


class MemcacheParameters(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Optional[str] = Field(
        default=None,
        description='This is a unique ID associated with this set of parameters.',
    )
    params: Optional[Dict[str, str]] = Field(
        default=None,
        description='User-defined set of parameters to use in the memcache process.',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class NetworkRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: string of the format `projects/{{project}}/global/networks/{{value}}`, where {{value}} is the `name` field of a `ComputeNetwork` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NetworkRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: string of the format `projects/{{project}}/global/networks/{{value}}`, where {{value}} is the `name` field of a `ComputeNetwork` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NodeConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cpuCount: int = Field(..., description='Number of CPUs per node.')
    memorySizeMb: int = Field(
        ..., description='Memory size in Mebibytes for each memcache node.'
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    displayName: Optional[str] = Field(
        default=None, description='A user-visible name for the instance.'
    )
    maintenancePolicy: Optional[MaintenancePolicy] = Field(
        default=None, description='Maintenance policy for an instance.'
    )
    memcacheParameters: Optional[MemcacheParameters] = Field(
        default=None,
        description='Immutable. User-specified parameters for this memcache instance.',
    )
    memcacheVersion: Optional[str] = Field(
        default=None,
        description='The major version of Memcached software. If not provided, latest supported version will be used.\nCurrently the latest supported major version is MEMCACHE_1_5. The minor version will be automatically\ndetermined by our system based on the latest supported minor version. Default value: "MEMCACHE_1_5" Possible values: ["MEMCACHE_1_5"].',
    )
    networkRef: Optional[Union[NetworkRef, NetworkRef1]] = Field(
        default=None,
        description='The full name of the network to connect the instance to.',
    )
    nodeConfig: NodeConfig = Field(
        ..., description='Immutable. Configuration for memcache nodes.'
    )
    nodeCount: int = Field(..., description='Number of nodes in the memcache instance.')
    region: str = Field(
        ...,
        description='Immutable. The region of the Memcache instance. If it is not provided, the provider region is used.',
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    zones: Optional[List[str]] = Field(
        default=None,
        description='Immutable. Zones where memcache nodes should be provisioned.  If not\nprovided, all zones will be used.',
    )


class StartTime(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hours: Optional[int] = Field(
        default=None,
        description='Hours of day in 24 hour format. Should be from 0 to 23.\nAn API may choose to allow the value "24:00:00" for scenarios like business closing time.',
    )
    minutes: Optional[int] = Field(
        default=None, description='Minutes of hour of day. Must be from 0 to 59.'
    )
    nanos: Optional[int] = Field(
        default=None,
        description='Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.',
    )
    seconds: Optional[int] = Field(
        default=None,
        description='Seconds of minutes of the time. Must normally be from 0 to 59.\nAn API may allow the value 60 if it allows leap-seconds.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    createTime: Optional[str] = Field(
        default=None, description='Creation timestamp in RFC3339 text format.'
    )
    discoveryEndpoint: Optional[str] = Field(
        default=None, description='Endpoint for Discovery API.'
    )
    maintenanceSchedule: Optional[List[MaintenanceScheduleItem]] = Field(
        default=None, description='Output only. Published maintenance schedule.'
    )
    memcacheFullVersion: Optional[str] = Field(
        default=None,
        description='The full version of memcached server running on this instance.',
    )
    memcacheNodes: Optional[List[MemcacheNode]] = Field(
        default=None,
        description='Additional information about the instance state, if available.',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )


class WeeklyMaintenanceWindowItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    day: str = Field(
        ...,
        description='Required. The day of week that maintenance updates occur.\n- DAY_OF_WEEK_UNSPECIFIED: The day of the week is unspecified.\n- MONDAY: Monday\n- TUESDAY: Tuesday\n- WEDNESDAY: Wednesday\n- THURSDAY: Thursday\n- FRIDAY: Friday\n- SATURDAY: Saturday\n- SUNDAY: Sunday Possible values: ["DAY_OF_WEEK_UNSPECIFIED", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"].',
    )
    duration: str = Field(
        ...,
        description='Required. The length of the maintenance window, ranging from 3 hours to 8 hours.\nA duration in seconds with up to nine fractional digits,\nterminated by \'s\'. Example: "3.5s".',
    )
    startTime: StartTime = Field(
        ..., description='Required. Start time of the window in UTC time.'
    )
