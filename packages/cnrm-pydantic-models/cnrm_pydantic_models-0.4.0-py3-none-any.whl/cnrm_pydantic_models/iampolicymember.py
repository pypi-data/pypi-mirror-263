# generated by datamodel-codegen:
#   filename:  iampolicymember_v1beta1.json
#   timestamp: 2024-03-18T21:08:08+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, constr


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = None
    expression: str
    title: str


class Condition2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class LogSinkRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    namespace: Optional[str] = None


class MemberFrom(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    logSinkRef: LogSinkRef = Field(
        ...,
        description="The LoggingLogSink whose writer identity (i.e. its 'status.writerIdentity') is to be bound to the role.",
    )
    serviceAccountRef: Optional[ServiceAccountRef] = Field(
        default=None, description='The IAMServiceAccount to be bound to the role.'
    )
    serviceIdentityRef: Optional[ServiceIdentityRef] = Field(
        default=None,
        description="The ServiceIdentity whose service account (i.e., its 'status.email') is to be bound to the role.",
    )
    sqlInstanceRef: Optional[SqlInstanceRef] = Field(
        default=None,
        description="The SQLInstance whose service account (i.e. its 'status.serviceAccountEmailAddress') is to be bound to the role.",
    )


class MemberFrom1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    logSinkRef: Optional[LogSinkRef] = Field(
        default=None,
        description="The LoggingLogSink whose writer identity (i.e. its 'status.writerIdentity') is to be bound to the role.",
    )
    serviceAccountRef: ServiceAccountRef = Field(
        ..., description='The IAMServiceAccount to be bound to the role.'
    )
    serviceIdentityRef: Optional[ServiceIdentityRef] = Field(
        default=None,
        description="The ServiceIdentity whose service account (i.e., its 'status.email') is to be bound to the role.",
    )
    sqlInstanceRef: Optional[SqlInstanceRef] = Field(
        default=None,
        description="The SQLInstance whose service account (i.e. its 'status.serviceAccountEmailAddress') is to be bound to the role.",
    )


class MemberFrom2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    logSinkRef: Optional[LogSinkRef] = Field(
        default=None,
        description="The LoggingLogSink whose writer identity (i.e. its 'status.writerIdentity') is to be bound to the role.",
    )
    serviceAccountRef: Optional[ServiceAccountRef] = Field(
        default=None, description='The IAMServiceAccount to be bound to the role.'
    )
    serviceIdentityRef: ServiceIdentityRef = Field(
        ...,
        description="The ServiceIdentity whose service account (i.e., its 'status.email') is to be bound to the role.",
    )
    sqlInstanceRef: Optional[SqlInstanceRef] = Field(
        default=None,
        description="The SQLInstance whose service account (i.e. its 'status.serviceAccountEmailAddress') is to be bound to the role.",
    )


class MemberFrom3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    logSinkRef: Optional[LogSinkRef] = Field(
        default=None,
        description="The LoggingLogSink whose writer identity (i.e. its 'status.writerIdentity') is to be bound to the role.",
    )
    serviceAccountRef: Optional[ServiceAccountRef] = Field(
        default=None, description='The IAMServiceAccount to be bound to the role.'
    )
    serviceIdentityRef: Optional[ServiceIdentityRef] = Field(
        default=None,
        description="The ServiceIdentity whose service account (i.e., its 'status.email') is to be bound to the role.",
    )
    sqlInstanceRef: SqlInstanceRef = Field(
        ...,
        description="The SQLInstance whose service account (i.e. its 'status.serviceAccountEmailAddress') is to be bound to the role.",
    )


class MemberFrom4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    logSinkRef: LogSinkRef = Field(
        ...,
        description="The LoggingLogSink whose writer identity (i.e. its 'status.writerIdentity') is to be bound to the role.",
    )
    serviceAccountRef: Optional[ServiceAccountRef] = Field(
        default=None, description='The IAMServiceAccount to be bound to the role.'
    )
    serviceIdentityRef: Optional[ServiceIdentityRef] = Field(
        default=None,
        description="The ServiceIdentity whose service account (i.e., its 'status.email') is to be bound to the role.",
    )
    sqlInstanceRef: Optional[SqlInstanceRef] = Field(
        default=None,
        description="The SQLInstance whose service account (i.e. its 'status.serviceAccountEmailAddress') is to be bound to the role.",
    )


class MemberFrom5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    logSinkRef: Optional[LogSinkRef] = Field(
        default=None,
        description="The LoggingLogSink whose writer identity (i.e. its 'status.writerIdentity') is to be bound to the role.",
    )
    serviceAccountRef: ServiceAccountRef = Field(
        ..., description='The IAMServiceAccount to be bound to the role.'
    )
    serviceIdentityRef: Optional[ServiceIdentityRef] = Field(
        default=None,
        description="The ServiceIdentity whose service account (i.e., its 'status.email') is to be bound to the role.",
    )
    sqlInstanceRef: Optional[SqlInstanceRef] = Field(
        default=None,
        description="The SQLInstance whose service account (i.e. its 'status.serviceAccountEmailAddress') is to be bound to the role.",
    )


class MemberFrom6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    logSinkRef: Optional[LogSinkRef] = Field(
        default=None,
        description="The LoggingLogSink whose writer identity (i.e. its 'status.writerIdentity') is to be bound to the role.",
    )
    serviceAccountRef: Optional[ServiceAccountRef] = Field(
        default=None, description='The IAMServiceAccount to be bound to the role.'
    )
    serviceIdentityRef: ServiceIdentityRef = Field(
        ...,
        description="The ServiceIdentity whose service account (i.e., its 'status.email') is to be bound to the role.",
    )
    sqlInstanceRef: Optional[SqlInstanceRef] = Field(
        default=None,
        description="The SQLInstance whose service account (i.e. its 'status.serviceAccountEmailAddress') is to be bound to the role.",
    )


class MemberFrom7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    logSinkRef: Optional[LogSinkRef] = Field(
        default=None,
        description="The LoggingLogSink whose writer identity (i.e. its 'status.writerIdentity') is to be bound to the role.",
    )
    serviceAccountRef: Optional[ServiceAccountRef] = Field(
        default=None, description='The IAMServiceAccount to be bound to the role.'
    )
    serviceIdentityRef: Optional[ServiceIdentityRef] = Field(
        default=None,
        description="The ServiceIdentity whose service account (i.e., its 'status.email') is to be bound to the role.",
    )
    sqlInstanceRef: SqlInstanceRef = Field(
        ...,
        description="The SQLInstance whose service account (i.e. its 'status.serviceAccountEmailAddress') is to be bound to the role.",
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Optional[Union[Spec, Spec1]] = Field(
        default=None,
        description='IAMPolicyMemberSpec defines the desired state of IAMPolicyMember',
    )
    status: Optional[Status] = Field(
        default=None,
        description='IAMPolicyMemberStatus defines the observed state of IAMPolicyMember',
    )


class ResourceRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    apiVersion: Optional[str] = None
    external: Optional[str] = None
    kind: str
    name: str
    namespace: Optional[str] = None


class ResourceRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    apiVersion: Optional[str] = None
    external: str
    kind: str
    name: Optional[str] = None
    namespace: Optional[str] = None


class ResourceRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    apiVersion: Optional[str] = None
    external: Optional[str] = None
    kind: str
    name: Optional[str] = None
    namespace: Optional[str] = None


class ResourceRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    apiVersion: Optional[str] = None
    external: Optional[str] = None
    kind: str
    name: str
    namespace: Optional[str] = None


class ResourceRef4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    apiVersion: Optional[str] = None
    external: str
    kind: str
    name: Optional[str] = None
    namespace: Optional[str] = None


class ResourceRef5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    apiVersion: Optional[str] = None
    external: Optional[str] = None
    kind: str
    name: Optional[str] = None
    namespace: Optional[str] = None


class ServiceAccountRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    namespace: Optional[str] = None


class ServiceIdentityRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    namespace: Optional[str] = None


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    condition: Optional[Condition] = Field(
        default=None,
        description='Immutable. Optional. The condition under which the binding applies.',
    )
    member: str = Field(
        ...,
        description="Immutable. The IAM identity to be bound to the role. Exactly one of 'member' or 'memberFrom' must be used.",
    )
    memberFrom: Optional[Union[MemberFrom, MemberFrom1, MemberFrom2, MemberFrom3]] = (
        Field(
            default=None,
            description="Immutable. The IAM identity to be bound to the role. Exactly one of 'member' or 'memberFrom' must be used, and only one subfield within 'memberFrom' can be used.",
        )
    )
    resourceRef: Union[ResourceRef, ResourceRef1, ResourceRef2] = Field(
        ...,
        description='Immutable. Required. The GCP resource to set the IAM policy on.',
    )
    role: constr(pattern=r'^((projects|organizations)/[^/]+/)?roles/[\w_\.]+$') = Field(
        ...,
        description='Immutable. Required. The role for which the Member will be bound.',
    )


class Spec1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    condition: Optional[Condition] = Field(
        default=None,
        description='Immutable. Optional. The condition under which the binding applies.',
    )
    member: Optional[str] = Field(
        default=None,
        description="Immutable. The IAM identity to be bound to the role. Exactly one of 'member' or 'memberFrom' must be used.",
    )
    memberFrom: Union[MemberFrom4, MemberFrom5, MemberFrom6, MemberFrom7] = Field(
        ...,
        description="Immutable. The IAM identity to be bound to the role. Exactly one of 'member' or 'memberFrom' must be used, and only one subfield within 'memberFrom' can be used.",
    )
    resourceRef: Union[ResourceRef3, ResourceRef4, ResourceRef5] = Field(
        ...,
        description='Immutable. Required. The GCP resource to set the IAM policy on.',
    )
    role: constr(pattern=r'^((projects|organizations)/[^/]+/)?roles/[\w_\.]+$') = Field(
        ...,
        description='Immutable. Required. The role for which the Member will be bound.',
    )


class SqlInstanceRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str
    namespace: Optional[str] = None


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition2]] = Field(
        default=None,
        description="Conditions represent the latest available observations of the IAM policy's current state.",
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
