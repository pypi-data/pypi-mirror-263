# generated by datamodel-codegen:
#   filename:  iampolicy_v1beta1.json
#   timestamp: 2024-03-18T21:08:07+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, constr


class AuditConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    auditLogConfigs: List[AuditLogConfig] = Field(
        ...,
        description='Required. The configuration for logging of each type of permission.',
    )
    service: str = Field(
        ...,
        description="Required. The service for which to enable Data Access audit logs. The special value 'allServices' covers all services. Note that if there are audit configs covering both 'allServices' and a specific service, then the union of the two audit configs is used for that service: the 'logTypes' specified in each 'auditLogConfig' are enabled, and the 'exemptedMembers' in each 'auditLogConfg' are exempted.",
    )


class AuditLogConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    exemptedMembers: Optional[List[str]] = Field(
        default=None,
        description="Identities that do not cause logging for this type of permission. The format is the same as that for 'members' in IAMPolicy/IAMPolicyMember.",
    )
    logType: constr(pattern=r'^(DATA_READ|DATA_WRITE|ADMIN_READ)$') = Field(
        ...,
        description="Permission type for which logging is to be configured. Must be one of 'DATA_READ', 'DATA_WRITE', or 'ADMIN_READ'.",
    )


class Binding(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    condition: Optional[Condition] = Field(
        default=None,
        description='Optional. The condition under which the binding applies.',
    )
    members: Optional[List[str]] = Field(
        default=None,
        description='Optional. The list of IAM users to be bound to the role.',
    )
    role: constr(pattern=r'^((projects|organizations)/[^/]+/)?roles/[\w_\.]+$') = Field(
        ..., description='Required. The role to bind the users to.'
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    description: Optional[str] = None
    expression: str
    title: str


class Condition1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Optional[Spec] = Field(
        default=None, description='IAMPolicySpec defines the desired state of IAMPolicy'
    )
    status: Optional[Status] = Field(
        default=None,
        description='IAMPolicyStatus defines the observed state of IAMPolicy',
    )


class ResourceRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    apiVersion: Optional[str] = None
    external: Optional[str] = None
    kind: str
    name: str
    namespace: Optional[str] = None


class ResourceRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    apiVersion: Optional[str] = None
    external: str
    kind: str
    name: Optional[str] = None
    namespace: Optional[str] = None


class ResourceRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    apiVersion: Optional[str] = None
    external: Optional[str] = None
    kind: str
    name: Optional[str] = None
    namespace: Optional[str] = None


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    auditConfigs: Optional[List[AuditConfig]] = Field(
        default=None, description='Optional. The list of IAM audit configs.'
    )
    bindings: Optional[List[Binding]] = Field(
        default=None, description='Optional. The list of IAM bindings.'
    )
    resourceRef: Union[ResourceRef, ResourceRef1, ResourceRef2] = Field(
        ...,
        description='Immutable. Required. The GCP resource to set the IAM policy on.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition1]] = Field(
        default=None,
        description="Conditions represent the latest available observations of the IAM policy's current state.",
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
