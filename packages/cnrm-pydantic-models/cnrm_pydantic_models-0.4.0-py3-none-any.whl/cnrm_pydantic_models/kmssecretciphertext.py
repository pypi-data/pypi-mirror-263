# generated by datamodel-codegen:
#   filename:  kmssecretciphertext_v1alpha1.json
#   timestamp: 2024-03-18T21:08:16+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class AdditionalAuthenticatedData(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class AdditionalAuthenticatedData1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom1 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class Plaintext(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom2] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class Plaintext1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom3 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class SecretKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: str = Field(..., description='Key that identifies the value to be extracted.')
    name: str = Field(..., description='Name of the Secret to extract a value from.')


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    additionalAuthenticatedData: Optional[
        Union[AdditionalAuthenticatedData, AdditionalAuthenticatedData1]
    ] = Field(
        default=None,
        description='Immutable. The additional authenticated data used for integrity checks during encryption and decryption.',
    )
    cryptoKey: str = Field(
        ...,
        description="Immutable. The full name of the CryptoKey that will be used to encrypt the provided plaintext.\nFormat: ''projects/{{project}}/locations/{{location}}/keyRings/{{keyRing}}/cryptoKeys/{{cryptoKey}}''.",
    )
    plaintext: Union[Plaintext, Plaintext1] = Field(
        ..., description='Immutable. The plaintext to be encrypted.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The service-generated ciphertext of the resource. Used for acquisition only. Leave unset to create a new resource.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ciphertext: Optional[str] = Field(
        default=None,
        description='Contains the result of encrypting the provided plaintext, encoded in base64.',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )


class ValueFrom(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )
