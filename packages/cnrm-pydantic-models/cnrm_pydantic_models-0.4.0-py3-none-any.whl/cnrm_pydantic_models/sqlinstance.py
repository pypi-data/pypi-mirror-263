# generated by datamodel-codegen:
#   filename:  sqlinstance_v1beta1.json
#   timestamp: 2024-03-18T21:08:52+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class ActiveDirectoryConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    domain: str = Field(
        ...,
        description='Domain name of the Active Directory for SQL Server (e.g., mydomain.com).',
    )


class AdvancedMachineFeatures(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    threadsPerCore: Optional[int] = Field(
        default=None,
        description='The number of threads per physical core. Can be 1 or 2.',
    )


class AuthorizedNetwork(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    expirationTime: Optional[str] = None
    name: Optional[str] = None
    value: str


class BackupConfiguration(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    backupRetentionSettings: Optional[BackupRetentionSettings] = None
    binaryLogEnabled: Optional[bool] = Field(
        default=None,
        description='True if binary logging is enabled. If settings.backup_configuration.enabled is false, this must be as well. Can only be used with MySQL.',
    )
    enabled: Optional[bool] = Field(
        default=None, description='True if backup configuration is enabled.'
    )
    location: Optional[str] = Field(
        default=None, description='Location of the backup configuration.'
    )
    pointInTimeRecoveryEnabled: Optional[bool] = Field(
        default=None, description='True if Point-in-time recovery is enabled.'
    )
    startTime: Optional[str] = Field(
        default=None,
        description='HH:MM format time indicating when backup configuration starts.',
    )
    transactionLogRetentionDays: Optional[int] = Field(
        default=None,
        description='The number of days of transaction logs we retain for point in time restore, from 1-7. (For PostgreSQL Enterprise Plus instances, from 1 to 35.).',
    )


class BackupRetentionSettings(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    retainedBackups: int = Field(..., description='Number of backups to retain.')
    retentionUnit: Optional[str] = Field(
        default=None,
        description="The unit that 'retainedBackups' represents. Defaults to COUNT.",
    )


class BucketRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `url` field of a `StorageBucket` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class BucketRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ..., description='Allowed value: The `url` field of a `StorageBucket` resource.'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class DataCacheConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataCacheEnabled: Optional[bool] = Field(
        default=None, description='Whether data cache is enabled for the instance.'
    )


class DatabaseFlag(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: str = Field(..., description='Name of the flag.')
    value: str = Field(..., description='Value of the flag.')


class DenyMaintenancePeriod(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    endDate: str = Field(
        ...,
        description='End date before which maintenance will not take place. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01.',
    )
    startDate: str = Field(
        ...,
        description='Start date after which maintenance will not take place. The date is in format yyyy-mm-dd i.e., 2020-11-01, or mm-dd, i.e., 11-01.',
    )
    time: str = Field(
        ...,
        description='Time in UTC when the "deny maintenance period" starts on start_date and ends on end_date. The time is in format: HH:mm:SS, i.e., 00:00:00.',
    )


class EncryptionKMSCryptoKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class EncryptionKMSCryptoKeyRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class InsightsConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    queryInsightsEnabled: Optional[bool] = Field(
        default=None, description='True if Query Insights feature is enabled.'
    )
    queryPlansPerMinute: Optional[int] = Field(
        default=None,
        description='Number of query execution plans captured by Insights per minute for all queries combined. Between 0 and 20. Default to 5.',
    )
    queryStringLength: Optional[int] = Field(
        default=None,
        description='Maximum query length stored in bytes. Between 256 and 4500. Default to 1024.',
    )
    recordApplicationTags: Optional[bool] = Field(
        default=None,
        description='True if Query Insights will record application tags from query when enabled.',
    )
    recordClientAddress: Optional[bool] = Field(
        default=None,
        description='True if Query Insights will record client address when enabled.',
    )


class IpAddres(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ipAddress: Optional[str] = None
    timeToRetire: Optional[str] = None
    type: Optional[str] = None


class IpConfiguration(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allocatedIpRange: Optional[str] = Field(
        default=None,
        description='The name of the allocated ip range for the private ip CloudSQL instance. For example: "google-managed-services-default". If set, the instance ip will be created in the allocated range. The range name must comply with RFC 1035. Specifically, the name must be 1-63 characters long and match the regular expression [a-z]([-a-z0-9]*[a-z0-9])?.',
    )
    authorizedNetworks: Optional[List[AuthorizedNetwork]] = None
    enablePrivatePathForGoogleCloudServices: Optional[bool] = Field(
        default=None,
        description='Whether Google Cloud services such as BigQuery are allowed to access data in this Cloud SQL instance over a private IP connection. SQLSERVER database type is not supported.',
    )
    ipv4Enabled: Optional[bool] = Field(
        default=None,
        description='Whether this Cloud SQL instance should be assigned a public IPV4 address. At least ipv4_enabled must be enabled or a private_network must be configured.',
    )
    privateNetworkRef: Optional[Union[PrivateNetworkRef, PrivateNetworkRef1]] = None
    pscConfig: Optional[List[PscConfigItem]] = Field(
        default=None, description='PSC settings for a Cloud SQL instance.'
    )
    requireSsl: Optional[bool] = None


class LocationPreference(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    followGaeApplication: Optional[str] = Field(
        default=None,
        description='A Google App Engine application whose zone to remain in. Must be in the same region as this instance.',
    )
    secondaryZone: Optional[str] = Field(
        default=None,
        description='The preferred Compute Engine zone for the secondary/failover.',
    )
    zone: Optional[str] = Field(
        default=None, description='The preferred compute engine zone.'
    )


class MaintenanceWindow(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    day: Optional[int] = Field(
        default=None, description='Day of week (1-7), starting on Monday.'
    )
    hour: Optional[int] = Field(
        default=None, description='Hour of day (0-23), ignored if day not set.'
    )
    updateTrack: Optional[str] = Field(
        default=None, description='Receive updates earlier (canary) or later (stable).'
    )


class MasterInstanceRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `SQLInstance` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class MasterInstanceRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ..., description='Allowed value: The `name` field of a `SQLInstance` resource.'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class Password(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class Password1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom1 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class PasswordValidationPolicy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    complexity: Optional[str] = Field(default=None, description='Password complexity.')
    disallowUsernameSubstring: Optional[bool] = Field(
        default=None, description='Disallow username as a part of the password.'
    )
    enablePasswordPolicy: bool = Field(
        ..., description='Whether the password policy is enabled or not.'
    )
    minLength: Optional[int] = Field(
        default=None, description='Minimum number of characters allowed.'
    )
    passwordChangeInterval: Optional[str] = Field(
        default=None,
        description='Minimum interval after which the password can be changed. This flag is only supported for PostgresSQL.',
    )
    reuseInterval: Optional[int] = Field(
        default=None, description='Number of previous passwords that cannot be reused.'
    )


class PrivateNetworkRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeNetwork` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class PrivateNetworkRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeNetwork` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class PscConfigItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowedConsumerProjects: Optional[List[str]] = Field(
        default=None,
        description='List of consumer projects that are allow-listed for PSC connections to this instance. This instance can be connected to with PSC from any network in these projects. Each consumer project in this list may be represented by a project number (numeric) or by a project id (alphanumeric).',
    )
    pscEnabled: Optional[bool] = Field(
        default=None,
        description='Whether PSC connectivity is enabled for this instance.',
    )


class ReplicaConfiguration(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    caCertificate: Optional[str] = Field(
        default=None,
        description="Immutable. PEM representation of the trusted CA's x509 certificate.",
    )
    clientCertificate: Optional[str] = Field(
        default=None,
        description="Immutable. PEM representation of the replica's x509 certificate.",
    )
    clientKey: Optional[str] = Field(
        default=None,
        description="Immutable. PEM representation of the replica's private key. The corresponding public key in encoded in the client_certificate.",
    )
    connectRetryInterval: Optional[int] = Field(
        default=None,
        description="Immutable. The number of seconds between connect retries. MySQL's default is 60 seconds.",
    )
    dumpFilePath: Optional[str] = Field(
        default=None,
        description='Immutable. Path to a SQL file in Google Cloud Storage from which replica instances are created. Format is gs://bucket/filename.',
    )
    failoverTarget: Optional[bool] = Field(
        default=None,
        description='Immutable. Specifies if the replica is the failover target. If the field is set to true the replica will be designated as a failover replica. If the master instance fails, the replica instance will be promoted as the new master instance. Not supported for Postgres.',
    )
    masterHeartbeatPeriod: Optional[int] = Field(
        default=None,
        description='Immutable. Time in ms between replication heartbeats.',
    )
    password: Optional[Union[Password, Password1]] = Field(
        default=None, description='Immutable. Password for the replication connection.'
    )
    sslCipher: Optional[str] = Field(
        default=None,
        description='Immutable. Permissible ciphers for use in SSL encryption.',
    )
    username: Optional[str] = Field(
        default=None, description='Immutable. Username for replication connection.'
    )
    verifyServerCertificate: Optional[bool] = Field(
        default=None,
        description="Immutable. True if the master's common name value is checked during the SSL handshake.",
    )


class RootPassword(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom2] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class RootPassword1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom3 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class SecretKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: str = Field(..., description='Key that identifies the value to be extracted.')
    name: str = Field(..., description='Name of the Secret to extract a value from.')


class ServerCaCert(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cert: Optional[str] = Field(
        default=None,
        description='The CA Certificate used to connect to the SQL Instance via SSL.',
    )
    commonName: Optional[str] = Field(
        default=None, description='The CN valid for the CA Cert.'
    )
    createTime: Optional[str] = Field(
        default=None, description='Creation time of the CA Cert.'
    )
    expirationTime: Optional[str] = Field(
        default=None, description='Expiration time of the CA Cert.'
    )
    sha1Fingerprint: Optional[str] = Field(
        default=None, description='SHA Fingerprint of the CA Cert.'
    )


class Settings(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    activationPolicy: Optional[str] = Field(
        default=None,
        description='This specifies when the instance should be active. Can be either ALWAYS, NEVER or ON_DEMAND.',
    )
    activeDirectoryConfig: Optional[ActiveDirectoryConfig] = None
    advancedMachineFeatures: Optional[AdvancedMachineFeatures] = None
    authorizedGaeApplications: Optional[List[str]] = Field(
        default=None,
        description="DEPRECATED. This property is only applicable to First Generation instances, and First Generation instances are now deprecated. see https://cloud.google.com/sql/docs/mysql/deprecation-notice for information on how to upgrade to Second Generation instances.\nSpecifying this field has no-ops; it's recommended to remove this field from your configuration.",
    )
    availabilityType: Optional[str] = Field(
        default=None,
        description='The availability type of the Cloud SQL instance, high availability\n(REGIONAL) or single zone (ZONAL). For all instances, ensure that\nsettings.backup_configuration.enabled is set to true.\nFor MySQL instances, ensure that settings.backup_configuration.binary_log_enabled is set to true.\nFor Postgres instances, ensure that settings.backup_configuration.point_in_time_recovery_enabled\nis set to true. Defaults to ZONAL.',
    )
    backupConfiguration: Optional[BackupConfiguration] = None
    collation: Optional[str] = Field(
        default=None, description='Immutable. The name of server instance collation.'
    )
    connectorEnforcement: Optional[str] = Field(
        default=None,
        description='Specifies if connections must use Cloud SQL connectors.',
    )
    crashSafeReplication: Optional[bool] = Field(
        default=None,
        description="DEPRECATED. This property is only applicable to First Generation instances, and First Generation instances are now deprecated. see https://cloud.google.com/sql/docs/mysql/deprecation-notice for information on how to upgrade to Second Generation instances.\nSpecifying this field has no-ops; it's recommended to remove this field from your configuration.",
    )
    dataCacheConfig: Optional[DataCacheConfig] = Field(
        default=None, description='Data cache configurations.'
    )
    databaseFlags: Optional[List[DatabaseFlag]] = None
    deletionProtectionEnabled: Optional[bool] = Field(
        default=None,
        description='Configuration to protect against accidental instance deletion.',
    )
    denyMaintenancePeriod: Optional[DenyMaintenancePeriod] = None
    diskAutoresize: Optional[bool] = Field(
        default=None,
        description='Enables auto-resizing of the storage size. Defaults to true.',
    )
    diskAutoresizeLimit: Optional[int] = Field(
        default=None,
        description='The maximum size, in GB, to which storage capacity can be automatically increased. The default value is 0, which specifies that there is no limit.',
    )
    diskSize: Optional[int] = Field(
        default=None,
        description='The size of data disk, in GB. Size of a running instance cannot be reduced but can be increased. The minimum value is 10GB.',
    )
    diskType: Optional[str] = Field(
        default=None,
        description='Immutable. The type of data disk: PD_SSD or PD_HDD. Defaults to PD_SSD.',
    )
    edition: Optional[str] = Field(
        default=None,
        description='The edition of the instance, can be ENTERPRISE or ENTERPRISE_PLUS.',
    )
    insightsConfig: Optional[InsightsConfig] = Field(
        default=None, description='Configuration of Query Insights.'
    )
    ipConfiguration: Optional[IpConfiguration] = None
    locationPreference: Optional[LocationPreference] = None
    maintenanceWindow: Optional[MaintenanceWindow] = Field(
        default=None,
        description='Declares a one-hour maintenance window when an Instance can automatically restart to apply updates. The maintenance window is specified in UTC time.',
    )
    passwordValidationPolicy: Optional[PasswordValidationPolicy] = None
    pricingPlan: Optional[str] = Field(
        default=None, description='Pricing plan for this instance, can only be PER_USE.'
    )
    replicationType: Optional[str] = Field(
        default=None,
        description="DEPRECATED. This property is only applicable to First Generation instances, and First Generation instances are now deprecated. see https://cloud.google.com/sql/docs/mysql/deprecation-notice for information on how to upgrade to Second Generation instances.\nSpecifying this field has no-ops; it's recommended to remove this field from your configuration.",
    )
    sqlServerAuditConfig: Optional[SqlServerAuditConfig] = None
    tier: str = Field(
        ...,
        description='The machine type to use. See tiers for more details and supported versions. Postgres supports only shared-core machine types, and custom machine types such as db-custom-2-13312. See the Custom Machine Type Documentation to learn about specifying custom machine types.',
    )
    timeZone: Optional[str] = Field(
        default=None,
        description='Immutable. The time_zone to be used by the database engine (supported only for SQL Server), in SQL Server timezone format.',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    databaseVersion: Optional[str] = Field(
        default='MYSQL_5_6',
        description='The MySQL, PostgreSQL or SQL Server (beta) version to use. Supported values include MYSQL_5_6, MYSQL_5_7, MYSQL_8_0, POSTGRES_9_6, POSTGRES_10, POSTGRES_11, POSTGRES_12, POSTGRES_13, POSTGRES_14, POSTGRES_15, SQLSERVER_2017_STANDARD, SQLSERVER_2017_ENTERPRISE, SQLSERVER_2017_EXPRESS, SQLSERVER_2017_WEB. Database Version Policies includes an up-to-date reference of supported versions.',
    )
    encryptionKMSCryptoKeyRef: Optional[
        Union[EncryptionKMSCryptoKeyRef, EncryptionKMSCryptoKeyRef1]
    ] = None
    instanceType: Optional[str] = Field(
        default=None,
        description="The type of the instance. The valid values are:- 'SQL_INSTANCE_TYPE_UNSPECIFIED', 'CLOUD_SQL_INSTANCE', 'ON_PREMISES_INSTANCE' and 'READ_REPLICA_INSTANCE'.",
    )
    maintenanceVersion: Optional[str] = Field(
        default=None, description='Maintenance version.'
    )
    masterInstanceRef: Optional[Union[MasterInstanceRef, MasterInstanceRef1]] = None
    region: Optional[str] = Field(
        default=None,
        description='Immutable. The region the instance will sit in. Note, Cloud SQL is not available in all regions. A valid region must be provided to use this resource. If a region is not provided in the resource definition, the provider region will be used instead, but this will be an apply-time error for instances if the provider region is not supported with Cloud SQL. If you choose not to provide the region argument for this resource, make sure you understand this.',
    )
    replicaConfiguration: Optional[ReplicaConfiguration] = Field(
        default=None, description='The configuration for replication.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    rootPassword: Optional[Union[RootPassword, RootPassword1]] = Field(
        default=None, description='Initial root password. Required for MS SQL Server.'
    )
    settings: Settings = Field(
        ...,
        description='The settings to use for the database. The configuration is detailed below.',
    )


class SqlServerAuditConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    bucketRef: Optional[Union[BucketRef, BucketRef1]] = Field(
        default=None,
        description='The name of the destination bucket (e.g., gs://mybucket).',
    )
    retentionInterval: Optional[str] = Field(
        default=None,
        description='How long to keep generated audit files. A duration in seconds with up to nine fractional digits, terminated by \'s\'. Example: "3.5s"..',
    )
    uploadInterval: Optional[str] = Field(
        default=None,
        description='How often to upload generated audit files. A duration in seconds with up to nine fractional digits, terminated by \'s\'. Example: "3.5s".',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    availableMaintenanceVersions: Optional[List[str]] = Field(
        default=None, description='Available Maintenance versions.'
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    connectionName: Optional[str] = Field(
        default=None,
        description='The connection name of the instance to be used in connection strings. For example, when connecting with Cloud SQL Proxy.',
    )
    dnsName: Optional[str] = Field(
        default=None, description='The dns name of the instance.'
    )
    firstIpAddress: Optional[str] = None
    instanceType: Optional[str] = Field(
        default=None,
        description="The type of the instance. The valid values are:- 'SQL_INSTANCE_TYPE_UNSPECIFIED', 'CLOUD_SQL_INSTANCE', 'ON_PREMISES_INSTANCE' and 'READ_REPLICA_INSTANCE'.",
    )
    ipAddress: Optional[List[IpAddres]] = None
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    privateIpAddress: Optional[str] = None
    pscServiceAttachmentLink: Optional[str] = Field(
        default=None, description='The link to service attachment of PSC instance.'
    )
    publicIpAddress: Optional[str] = None
    selfLink: Optional[str] = Field(
        default=None, description='The URI of the created resource.'
    )
    serverCaCert: Optional[ServerCaCert] = None
    serviceAccountEmailAddress: Optional[str] = Field(
        default=None,
        description='The service account email address assigned to the instance.',
    )


class ValueFrom(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )
