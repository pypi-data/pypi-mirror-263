# generated by datamodel-codegen:
#   filename:  containeranalysisnote_v1beta1.json
#   timestamp: 2024-03-18T21:07:29+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class AffectedVersionEnd(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    epoch: Optional[int] = Field(
        default=None,
        description='Used to correct mistakes in the version numbering scheme.',
    )
    fullName: Optional[str] = Field(
        default=None,
        description='Human readable version string. This string is of the form :- and is only set when kind is NORMAL.',
    )
    kind: str = Field(
        ...,
        description='Required. Distinguishes between sentinel MIN/MAX versions and normal versions. Possible values: NOTE_KIND_UNSPECIFIED, VULNERABILITY, BUILD, IMAGE, PACKAGE, DEPLOYMENT, DISCOVERY, ATTESTATION, UPGRADE',
    )
    name: Optional[str] = Field(
        default=None,
        description='Required only when version kind is NORMAL. The main part of the version name.',
    )
    revision: Optional[str] = Field(
        default=None,
        description='The iteration of the package build from the above version.',
    )


class AffectedVersionStart(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    epoch: Optional[int] = Field(
        default=None,
        description='Used to correct mistakes in the version numbering scheme.',
    )
    fullName: Optional[str] = Field(
        default=None,
        description='Human readable version string. This string is of the form :- and is only set when kind is NORMAL.',
    )
    kind: str = Field(
        ...,
        description='Required. Distinguishes between sentinel MIN/MAX versions and normal versions. Possible values: NOTE_KIND_UNSPECIFIED, VULNERABILITY, BUILD, IMAGE, PACKAGE, DEPLOYMENT, DISCOVERY, ATTESTATION, UPGRADE',
    )
    name: Optional[str] = Field(
        default=None,
        description='Required only when version kind is NORMAL. The main part of the version name.',
    )
    revision: Optional[str] = Field(
        default=None,
        description='The iteration of the package build from the above version.',
    )


class Attestation(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hint: Optional[Hint] = Field(
        default=None,
        description='Hint hints at the purpose of the attestation authority.',
    )


class Build(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    builderVersion: str = Field(
        ...,
        description='Required. Immutable. Version of the builder which produced this build.',
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class CvssV3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    attackComplexity: Optional[str] = Field(
        default=None,
        description=' Possible values: ATTACK_COMPLEXITY_UNSPECIFIED, ATTACK_COMPLEXITY_LOW, ATTACK_COMPLEXITY_HIGH',
    )
    attackVector: Optional[str] = Field(
        default=None,
        description='Base Metrics Represents the intrinsic characteristics of a vulnerability that are constant over time and across user environments. Possible values: ATTACK_VECTOR_UNSPECIFIED, ATTACK_VECTOR_NETWORK, ATTACK_VECTOR_ADJACENT, ATTACK_VECTOR_LOCAL, ATTACK_VECTOR_PHYSICAL',
    )
    availabilityImpact: Optional[str] = Field(
        default=None,
        description=' Possible values: IMPACT_UNSPECIFIED, IMPACT_HIGH, IMPACT_LOW, IMPACT_NONE',
    )
    baseScore: Optional[float] = Field(
        default=None,
        description='The base score is a function of the base metric scores.',
    )
    confidentialityImpact: Optional[str] = Field(
        default=None,
        description=' Possible values: IMPACT_UNSPECIFIED, IMPACT_HIGH, IMPACT_LOW, IMPACT_NONE',
    )
    exploitabilityScore: Optional[float] = None
    impactScore: Optional[float] = None
    integrityImpact: Optional[str] = Field(
        default=None,
        description=' Possible values: IMPACT_UNSPECIFIED, IMPACT_HIGH, IMPACT_LOW, IMPACT_NONE',
    )
    privilegesRequired: Optional[str] = Field(
        default=None,
        description=' Possible values: PRIVILEGES_REQUIRED_UNSPECIFIED, PRIVILEGES_REQUIRED_NONE, PRIVILEGES_REQUIRED_LOW, PRIVILEGES_REQUIRED_HIGH',
    )
    scope: Optional[str] = Field(
        default=None,
        description=' Possible values: SCOPE_UNSPECIFIED, SCOPE_UNCHANGED, SCOPE_CHANGED',
    )
    userInteraction: Optional[str] = Field(
        default=None,
        description=' Possible values: USER_INTERACTION_UNSPECIFIED, USER_INTERACTION_NONE, USER_INTERACTION_REQUIRED',
    )


class Deployment(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    resourceUri: List[str] = Field(
        ..., description='Required. Resource URI for the artifact being deployed.'
    )


class Detail(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    affectedCpeUri: str = Field(
        ...,
        description='Required. The (https://cpe.mitre.org/specification/) this vulnerability affects.',
    )
    affectedPackage: str = Field(
        ..., description='Required. The package this vulnerability affects.'
    )
    affectedVersionEnd: Optional[AffectedVersionEnd] = Field(
        default=None,
        description='The version number at the end of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: ) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.',
    )
    affectedVersionStart: Optional[AffectedVersionStart] = Field(
        default=None,
        description='The version number at the start of an interval in which this vulnerability exists. A vulnerability can affect a package between version numbers that are disjoint sets of intervals (example: ) each of which will be represented in its own Detail. If a specific affected version is provided by a vulnerability database, affected_version_start and affected_version_end will be the same in that Detail.',
    )
    description: Optional[str] = Field(
        default=None, description='A vendor-specific description of this vulnerability.'
    )
    fixedCpeUri: Optional[str] = Field(
        default=None,
        description='The distro recommended (https://cpe.mitre.org/specification/) to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_cpe_uri.',
    )
    fixedPackage: Optional[str] = Field(
        default=None,
        description='The distro recommended package to update to that contains a fix for this vulnerability. It is possible for this to be different from the affected_package.',
    )
    fixedVersion: Optional[FixedVersion] = Field(
        default=None,
        description='The distro recommended version to update to that contains a fix for this vulnerability. Setting this to VersionKind.MAXIMUM means no such version is yet available.',
    )
    isObsolete: Optional[bool] = Field(
        default=None,
        description='Whether this detail is obsolete. Occurrences are expected not to point to obsolete details.',
    )
    packageType: Optional[str] = Field(
        default=None,
        description='The type of package; whether native or non native (e.g., ruby gems, node.js packages, etc.).',
    )
    severityName: Optional[str] = Field(
        default=None, description='The distro assigned severity of this vulnerability.'
    )
    sourceUpdateTime: Optional[AwareDatetime] = Field(
        default=None,
        description='The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.',
    )


class Discovery(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    analysisKind: str = Field(
        ...,
        description='The kind of analysis that is handled by this discovery. Possible values: NOTE_KIND_UNSPECIFIED, VULNERABILITY, BUILD, IMAGE, PACKAGE, DEPLOYMENT, DISCOVERY, ATTESTATION, UPGRADE',
    )


class DistributionItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    architecture: Optional[str] = Field(
        default=None,
        description='The CPU architecture for which packages in this distribution channel were built Possible values: ARCHITECTURE_UNSPECIFIED, X86, X64',
    )
    cpeUri: str = Field(
        ...,
        description='The cpe_uri in [cpe format](https://cpe.mitre.org/specification/) denoting the package manager version distributing a package.',
    )
    description: Optional[str] = Field(
        default=None,
        description='The distribution channel-specific description of this package.',
    )
    latestVersion: Optional[LatestVersion] = Field(
        default=None,
        description='The latest available version of this package in this distribution channel.',
    )
    maintainer: Optional[str] = Field(
        default=None,
        description='A freeform string denoting the maintainer of this package.',
    )
    url: Optional[str] = Field(
        default=None,
        description='The distribution channel-specific homepage for this package.',
    )


class Fingerprint(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v1Name: str = Field(
        ...,
        description="Required. The layer ID of the final layer in the Docker image's v1 representation.",
    )
    v2Blob: List[str] = Field(
        ...,
        description='Required. The ordered list of v2 blobs that represent a given image.',
    )


class Fingerprint1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    v2Name: Optional[str] = Field(
        default=None,
        description="Output only. The name of the image's v2 blobs computed via: ) Only the name of the final blob is kept.",
    )


class FixedVersion(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    epoch: Optional[int] = Field(
        default=None,
        description='Used to correct mistakes in the version numbering scheme.',
    )
    fullName: Optional[str] = Field(
        default=None,
        description='Human readable version string. This string is of the form :- and is only set when kind is NORMAL.',
    )
    kind: str = Field(
        ...,
        description='Required. Distinguishes between sentinel MIN/MAX versions and normal versions. Possible values: NOTE_KIND_UNSPECIFIED, VULNERABILITY, BUILD, IMAGE, PACKAGE, DEPLOYMENT, DISCOVERY, ATTESTATION, UPGRADE',
    )
    name: Optional[str] = Field(
        default=None,
        description='Required only when version kind is NORMAL. The main part of the version name.',
    )
    revision: Optional[str] = Field(
        default=None,
        description='The iteration of the package build from the above version.',
    )


class FixingKb(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    name: Optional[str] = Field(
        default=None,
        description='The KB name (generally of the form KB+ (e.g., KB123456)).',
    )
    url: Optional[str] = Field(
        default=None,
        description='A link to the KB in the (https://www.catalog.update.microsoft.com/).',
    )


class Hint(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    humanReadableName: str = Field(
        ...,
        description='Required. The human readable name of this attestation authority, for example "qa".',
    )


class Image(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    fingerprint: Fingerprint = Field(
        ..., description='Required. Immutable. The fingerprint of the base image.'
    )
    resourceUrl: str = Field(
        ...,
        description='Required. Immutable. The resource_url for the resource representing the basis of associated occurrence images.',
    )


class Image1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    fingerprint: Optional[Fingerprint1] = None


class LatestVersion(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    epoch: Optional[int] = Field(
        default=None,
        description='Used to correct mistakes in the version numbering scheme.',
    )
    fullName: Optional[str] = Field(
        default=None,
        description='Human readable version string. This string is of the form :- and is only set when kind is NORMAL.',
    )
    kind: str = Field(
        ...,
        description='Distinguish between sentinel MIN/MAX versions and normal versions. If kind is not NORMAL, then the other fields are ignored. Possible values: VERSION_KIND_UNSPECIFIED, NORMAL, MINIMUM, MAXIMUM',
    )
    name: Optional[str] = Field(
        default=None, description='The main part of the version name.'
    )
    revision: Optional[str] = Field(
        default=None,
        description='The iteration of the package build from the above version.',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Optional[Spec] = None
    status: Optional[Status] = None


class Package(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    distribution: Optional[List[DistributionItem]] = Field(
        default=None,
        description='The various channels by which a package is distributed.',
    )
    name: str = Field(..., description='The name of the package.')


class RelatedNoteNames(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The Google Cloud resource name of a `ContainerAnalysisNote` resource (format: `projects/{{project}}/notes/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class RelatedNoteNames1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The Google Cloud resource name of a `ContainerAnalysisNote` resource (format: `projects/{{project}}/notes/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class RelatedUrlItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    label: Optional[str] = Field(
        default=None, description='Label to describe usage of the URL'
    )
    url: Optional[str] = Field(
        default=None, description='Specific URL to associate with the note'
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    attestation: Optional[Attestation] = Field(
        default=None, description='A note describing an attestation role.'
    )
    build: Optional[Build] = Field(
        default=None,
        description='A note describing build provenance for a verifiable build.',
    )
    deployment: Optional[Deployment] = Field(
        default=None, description='A note describing something that can be deployed.'
    )
    discovery: Optional[Discovery] = Field(
        default=None,
        description='A note describing the initial analysis of a resource.',
    )
    expirationTime: Optional[AwareDatetime] = Field(
        default=None,
        description='Time of expiration for this note. Empty if note does not expire.',
    )
    image: Optional[Image] = Field(
        default=None, description='A note describing a base image.'
    )
    longDescription: Optional[str] = Field(
        default=None, description='A detailed description of this note.'
    )
    package: Optional[Package] = Field(
        default=None,
        description='Required for non-Windows OS. The package this Upgrade is for.',
    )
    relatedNoteNames: Optional[List[Union[RelatedNoteNames, RelatedNoteNames1]]] = None
    relatedUrl: Optional[List[RelatedUrlItem]] = Field(
        default=None, description='URLs associated with this note.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    shortDescription: Optional[str] = Field(
        default=None, description='A one sentence description of this note.'
    )
    vulnerability: Optional[Vulnerability] = Field(
        default=None, description='A note describing a package vulnerability.'
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    createTime: Optional[AwareDatetime] = Field(
        default=None,
        description='Output only. The time this note was created. This field can be used as a filter in list requests.',
    )
    image: Optional[Image1] = None
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    updateTime: Optional[AwareDatetime] = Field(
        default=None,
        description='Output only. The time this note was last updated. This field can be used as a filter in list requests.',
    )


class Vulnerability(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cvssScore: Optional[float] = Field(
        default=None,
        description='The CVSS score of this vulnerability. CVSS score is on a scale of 0 - 10 where 0 indicates low severity and 10 indicates high severity.',
    )
    cvssV3: Optional[CvssV3] = Field(
        default=None,
        description='The full description of the CVSSv3 for this vulnerability.',
    )
    details: Optional[List[Detail]] = Field(
        default=None,
        description='Details of all known distros and packages affected by this vulnerability.',
    )
    severity: Optional[str] = Field(
        default=None,
        description='The note provider assigned severity of this vulnerability. Possible values: SEVERITY_UNSPECIFIED, MINIMAL, LOW, MEDIUM, HIGH, CRITICAL',
    )
    sourceUpdateTime: Optional[AwareDatetime] = Field(
        default=None,
        description='The time this information was last changed at the source. This is an upstream timestamp from the underlying information source - e.g. Ubuntu security tracker.',
    )
    windowsDetails: Optional[List[WindowsDetail]] = Field(
        default=None,
        description="Windows details get their own format because the information format and model don't match a normal detail. Specifically Windows updates are done as patches, thus Windows vulnerabilities really are a missing package, rather than a package being at an incorrect version.",
    )


class WindowsDetail(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cpeUri: str = Field(
        ...,
        description='Required. The (https://cpe.mitre.org/specification/) this vulnerability affects.',
    )
    description: Optional[str] = Field(
        default=None, description='The description of this vulnerability.'
    )
    fixingKbs: List[FixingKb] = Field(
        ...,
        description='Required. The names of the KBs which have hotfixes to mitigate this vulnerability. Note that there may be multiple hotfixes (and thus multiple KBs) that mitigate a given vulnerability. Currently any listed KBs presence is considered a fix.',
    )
    name: str = Field(..., description='Required. The name of this vulnerability.')
