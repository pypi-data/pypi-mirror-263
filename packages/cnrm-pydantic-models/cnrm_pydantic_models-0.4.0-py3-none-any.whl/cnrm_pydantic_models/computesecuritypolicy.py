# generated by datamodel-codegen:
#   filename:  computesecuritypolicy_v1beta1.json
#   timestamp: 2024-03-18T21:07:19+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class AdaptiveProtectionConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    autoDeployConfig: Optional[AutoDeployConfig] = Field(
        default=None, description='Auto Deploy Config of this security policy.'
    )
    layer7DdosDefenseConfig: Optional[Layer7DdosDefenseConfig] = Field(
        default=None, description='Layer 7 DDoS Defense Config of this security policy.'
    )


class AdvancedOptionsConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    jsonCustomConfig: Optional[JsonCustomConfig] = Field(
        default=None,
        description='Custom configuration to apply the JSON parsing. Only applicable when JSON parsing is set to STANDARD.',
    )
    jsonParsing: Optional[str] = Field(
        default=None,
        description='JSON body parsing. Supported values include: "DISABLED", "STANDARD".',
    )
    logLevel: Optional[str] = Field(
        default=None,
        description='Logging level. Supported values include: "NORMAL", "VERBOSE".',
    )
    userIpRequestHeaders: Optional[List[str]] = Field(
        default=None,
        description='An optional list of case-insensitive request header names to use for resolving the callers client IP address.',
    )


class AutoDeployConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    confidenceThreshold: Optional[float] = Field(
        default=None,
        description='Rules are only automatically deployed for alerts on potential attacks with confidence scores greater than this threshold.',
    )
    expirationSec: Optional[int] = Field(
        default=None,
        description='Google Cloud Armor stops applying the action in the automatically deployed rule to an identified attacker after this duration. The rule continues to operate against new requests.',
    )
    impactedBaselineThreshold: Optional[float] = Field(
        default=None,
        description='Rules are only automatically deployed when the estimated impact to baseline traffic from the suggested mitigation is below this threshold.',
    )
    loadThreshold: Optional[float] = Field(
        default=None,
        description='Identifies new attackers only when the load to the backend service that is under attack exceeds this threshold.',
    )


class BanThreshold(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    count: int = Field(
        ..., description='Number of HTTP(S) requests for calculating the threshold.'
    )
    intervalSec: int = Field(
        ..., description='Interval over which the threshold is computed.'
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class Config(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    srcIpRanges: List[str] = Field(
        ...,
        description="Set of IP addresses or ranges (IPV4 or IPV6) in CIDR notation to match against inbound traffic. There is a limit of 10 IP ranges per rule. A value of '*' matches all IPs (can be used to override the default behavior).",
    )


class EnforceOnKeyConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enforceOnKeyName: Optional[str] = Field(
        default=None,
        description='Rate limit key name applicable only for the following key types: HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value. HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value.',
    )
    enforceOnKeyType: Optional[str] = Field(
        default=None,
        description='Determines the key to enforce the rate_limit_threshold on.',
    )


class ExceedRedirectOptions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    target: Optional[str] = Field(
        default=None,
        description='Target for the redirect action. This is required if the type is EXTERNAL_302 and cannot be specified for GOOGLE_RECAPTCHA.',
    )
    type: str = Field(..., description='Type of the redirect action.')


class ExclusionItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    requestCookie: Optional[List[RequestCookieItem]] = Field(
        default=None,
        description='Request cookie whose value will be excluded from inspection during preconfigured WAF evaluation.',
    )
    requestHeader: Optional[List[RequestHeaderItem]] = Field(
        default=None,
        description='Request header whose value will be excluded from inspection during preconfigured WAF evaluation.',
    )
    requestQueryParam: Optional[List[RequestQueryParamItem]] = Field(
        default=None,
        description='Request query parameter whose value will be excluded from inspection during preconfigured WAF evaluation.  Note that the parameter can be in the query string or in the POST body.',
    )
    requestUri: Optional[List[RequestUriItem]] = Field(
        default=None,
        description='Request URI from the request line to be excluded from inspection during preconfigured WAF evaluation. When specifying this field, the query or fragment part should be excluded.',
    )
    targetRuleIds: Optional[List[str]] = Field(
        default=None,
        description='A list of target rule IDs under the WAF rule set to apply the preconfigured WAF exclusion. If omitted, it refers to all the rule IDs under the WAF rule set.',
    )
    targetRuleSet: str = Field(
        ..., description='Target WAF rule set to apply the preconfigured WAF exclusion.'
    )


class Expr(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    expression: str = Field(
        ...,
        description='Textual representation of an expression in Common Expression Language syntax. The application context of the containing message determines which well-known feature set of CEL is supported.',
    )


class HeaderAction(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    requestHeadersToAdds: List[RequestHeadersToAdd] = Field(
        ...,
        description="The list of request headers to add or overwrite if they're already present.",
    )


class JsonCustomConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    contentTypes: List[str] = Field(
        ...,
        description='A list of custom Content-Type header values to apply the JSON parsing.',
    )


class Layer7DdosDefenseConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enable: Optional[bool] = Field(
        default=None, description='If set to true, enables CAAP for L7 DDoS detection.'
    )
    ruleVisibility: Optional[str] = Field(
        default=None,
        description='Rule visibility. Supported values include: "STANDARD", "PREMIUM".',
    )


class Match(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    config: Optional[Config] = Field(
        default=None,
        description='The configuration options available when specifying versioned_expr. This field must be specified if versioned_expr is specified and cannot be specified if versioned_expr is not specified.',
    )
    expr: Optional[Expr] = Field(
        default=None,
        description='User defined CEVAL expression. A CEVAL expression is used to specify match criteria such as origin.ip, source.region_code and contents in the request header.',
    )
    versionedExpr: Optional[str] = Field(
        default=None,
        description='Predefined rule expression. If this field is specified, config must also be specified. Available options:   SRC_IPS_V1: Must specify the corresponding src_ip_ranges field in config.',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Optional[Spec] = None
    status: Optional[Status] = None


class PreconfiguredWafConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    exclusion: Optional[List[ExclusionItem]] = Field(
        default=None,
        description='An exclusion to apply during preconfigured WAF evaluation.',
    )


class RateLimitOptions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    banDurationSec: Optional[int] = Field(
        default=None,
        description='Can only be specified if the action for the rule is "rate_based_ban". If specified, determines the time (in seconds) the traffic will continue to be banned by the rate limit after the rate falls below the threshold.',
    )
    banThreshold: Optional[BanThreshold] = Field(
        default=None,
        description='Can only be specified if the action for the rule is "rate_based_ban". If specified, the key will be banned for the configured \'banDurationSec\' when the number of requests that exceed the \'rateLimitThreshold\' also exceed this \'banThreshold\'.',
    )
    conformAction: str = Field(
        ...,
        description='Action to take for requests that are under the configured rate limit threshold. Valid option is "allow" only.',
    )
    enforceOnKey: Optional[str] = Field(
        default=None,
        description='Determines the key to enforce the rateLimitThreshold on.',
    )
    enforceOnKeyConfigs: Optional[List[EnforceOnKeyConfig]] = Field(
        default=None, description='Enforce On Key Config of this security policy.'
    )
    enforceOnKeyName: Optional[str] = Field(
        default=None,
        description='Rate limit key name applicable only for the following key types: HTTP_HEADER -- Name of the HTTP header whose value is taken as the key value. HTTP_COOKIE -- Name of the HTTP cookie whose value is taken as the key value.',
    )
    exceedAction: str = Field(
        ...,
        description='Action to take for requests that are above the configured rate limit threshold, to either deny with a specified HTTP response code, or redirect to a different endpoint. Valid options are "deny()" where valid values for status are 403, 404, 429, and 502, and "redirect" where the redirect parameters come from exceedRedirectOptions below.',
    )
    exceedRedirectOptions: Optional[ExceedRedirectOptions] = Field(
        default=None,
        description='Parameters defining the redirect action that is used as the exceed action. Cannot be specified if the exceed action is not redirect.',
    )
    rateLimitThreshold: RateLimitThreshold = Field(
        ..., description='Threshold at which to begin ratelimiting.'
    )


class RateLimitThreshold(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    count: int = Field(
        ..., description='Number of HTTP(S) requests for calculating the threshold.'
    )
    intervalSec: int = Field(
        ..., description='Interval over which the threshold is computed.'
    )


class RecaptchaOptionsConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    redirectSiteKeyRef: Union[RedirectSiteKeyRef, RedirectSiteKeyRef1] = Field(
        ...,
        description='A field to supply a reCAPTCHA site key to be used for all the rules\nusing the redirect action with the type of GOOGLE_RECAPTCHA under\nthe security policy. The specified site key needs to be created from\nthe reCAPTCHA API. The user is responsible for the validity of the\nspecified site key. If not specified, a Google-managed site key is\nused.',
    )


class RedirectOptions(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    target: Optional[str] = Field(
        default=None,
        description='Target for the redirect action. This is required if the type is EXTERNAL_302 and cannot be specified for GOOGLE_RECAPTCHA.',
    )
    type: str = Field(
        ...,
        description='Type of the redirect action. Available options: EXTERNAL_302: Must specify the corresponding target field in config. GOOGLE_RECAPTCHA: Cannot specify target field in config.',
    )


class RedirectSiteKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `RecaptchaEnterpriseKey` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class RedirectSiteKeyRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `name` field of a `RecaptchaEnterpriseKey` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class RequestCookieItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    operator: str = Field(
        ...,
        description='You can specify an exact match or a partial match by using a field operator and a field value. Available options: EQUALS: The operator matches if the field value equals the specified value. STARTS_WITH: The operator matches if the field value starts with the specified value. ENDS_WITH: The operator matches if the field value ends with the specified value. CONTAINS: The operator matches if the field value contains the specified value. EQUALS_ANY: The operator matches if the field value is any value.',
    )
    value: Optional[str] = Field(
        default=None,
        description='A request field matching the specified value will be excluded from inspection during preconfigured WAF evaluation. The field value must be given if the field operator is not EQUALS_ANY, and cannot be given if the field operator is EQUALS_ANY.',
    )


class RequestHeaderItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    operator: str = Field(
        ...,
        description='You can specify an exact match or a partial match by using a field operator and a field value. Available options: EQUALS: The operator matches if the field value equals the specified value. STARTS_WITH: The operator matches if the field value starts with the specified value. ENDS_WITH: The operator matches if the field value ends with the specified value. CONTAINS: The operator matches if the field value contains the specified value. EQUALS_ANY: The operator matches if the field value is any value.',
    )
    value: Optional[str] = Field(
        default=None,
        description='A request field matching the specified value will be excluded from inspection during preconfigured WAF evaluation. The field value must be given if the field operator is not EQUALS_ANY, and cannot be given if the field operator is EQUALS_ANY.',
    )


class RequestHeadersToAdd(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    headerName: str = Field(..., description='The name of the header to set.')
    headerValue: Optional[str] = Field(
        default=None, description='The value to set the named header to.'
    )


class RequestQueryParamItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    operator: str = Field(
        ...,
        description='You can specify an exact match or a partial match by using a field operator and a field value. Available options: EQUALS: The operator matches if the field value equals the specified value. STARTS_WITH: The operator matches if the field value starts with the specified value. ENDS_WITH: The operator matches if the field value ends with the specified value. CONTAINS: The operator matches if the field value contains the specified value. EQUALS_ANY: The operator matches if the field value is any value.',
    )
    value: Optional[str] = Field(
        default=None,
        description='A request field matching the specified value will be excluded from inspection during preconfigured WAF evaluation. The field value must be given if the field operator is not EQUALS_ANY, and cannot be given if the field operator is EQUALS_ANY.',
    )


class RequestUriItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    operator: str = Field(
        ...,
        description='You can specify an exact match or a partial match by using a field operator and a field value. Available options: EQUALS: The operator matches if the field value equals the specified value. STARTS_WITH: The operator matches if the field value starts with the specified value. ENDS_WITH: The operator matches if the field value ends with the specified value. CONTAINS: The operator matches if the field value contains the specified value. EQUALS_ANY: The operator matches if the field value is any value.',
    )
    value: Optional[str] = Field(
        default=None,
        description='A request field matching the specified value will be excluded from inspection during preconfigured WAF evaluation. The field value must be given if the field operator is not EQUALS_ANY, and cannot be given if the field operator is EQUALS_ANY.',
    )


class RuleItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    action: str = Field(
        ..., description='Action to take when match matches the request.'
    )
    description: Optional[str] = Field(
        default=None,
        description='An optional description of this rule. Max size is 64.',
    )
    headerAction: Optional[HeaderAction] = Field(
        default=None, description='Additional actions that are performed on headers.'
    )
    match: Match = Field(
        ...,
        description='A match condition that incoming traffic is evaluated against. If it evaluates to true, the corresponding action is enforced.',
    )
    preconfiguredWafConfig: Optional[PreconfiguredWafConfig] = Field(
        default=None,
        description='Preconfigured WAF configuration to be applied for the rule. If the rule does not evaluate preconfigured WAF rules, i.e., if evaluatePreconfiguredWaf() is not used, this field will have no effect.',
    )
    preview: Optional[bool] = Field(
        default=None,
        description='When set to true, the action specified above is not enforced. Stackdriver logs for requests that trigger a preview action are annotated as such.',
    )
    priority: int = Field(
        ...,
        description='An unique positive integer indicating the priority of evaluation for a rule. Rules are evaluated from highest priority (lowest numerically) to lowest priority (highest numerically) in order.',
    )
    rateLimitOptions: Optional[RateLimitOptions] = Field(
        default=None,
        description='Rate limit threshold for this security policy. Must be specified if the action is "rate_based_ban" or "throttle". Cannot be specified for any other actions.',
    )
    redirectOptions: Optional[RedirectOptions] = Field(
        default=None,
        description='Parameters defining the redirect action. Cannot be specified for any other actions.',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    adaptiveProtectionConfig: Optional[AdaptiveProtectionConfig] = Field(
        default=None, description='Adaptive Protection Config of this security policy.'
    )
    advancedOptionsConfig: Optional[AdvancedOptionsConfig] = Field(
        default=None, description='Advanced Options Config of this security policy.'
    )
    description: Optional[str] = Field(
        default=None,
        description='An optional description of this security policy. Max size is 2048.',
    )
    recaptchaOptionsConfig: Optional[RecaptchaOptionsConfig] = Field(
        default=None,
        description='reCAPTCHA configuration options to be applied for the security policy.',
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    rule: Optional[List[RuleItem]] = Field(
        default=None,
        description='The set of rules that belong to this policy. There must always be a default rule (rule with priority 2147483647 and match "*"). If no rules are provided when creating a security policy, a default rule with action "allow" will be added.',
    )
    type: Optional[str] = Field(
        default=None,
        description="The type indicates the intended use of the security policy. CLOUD_ARMOR - Cloud Armor backend security policies can be configured to filter incoming HTTP requests targeting backend services. They filter requests before they hit the origin servers. CLOUD_ARMOR_EDGE - Cloud Armor edge security policies can be configured to filter incoming HTTP requests targeting backend services (including Cloud CDN-enabled) as well as backend buckets (Cloud Storage). They filter requests before the request is served from Google's cache.",
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    fingerprint: Optional[str] = Field(
        default=None, description='Fingerprint of this resource.'
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    selfLink: Optional[str] = Field(
        default=None, description='The URI of the created resource.'
    )
