# generated by datamodel-codegen:
#   filename:  containernodepool_v1beta1.json
#   timestamp: 2024-03-18T21:07:31+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class AdditionalNodeNetworkConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    networkRef: Optional[Union[NetworkRef, NetworkRef1]] = Field(
        default=None,
        description='Immutable. Name of the VPC where the additional interface belongs.',
    )
    subnetworkRef: Optional[Union[SubnetworkRef, SubnetworkRef1]] = Field(
        default=None,
        description='Immutable. Name of the subnetwork where the additional interface belongs.',
    )


class AdditionalPodNetworkConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    maxPodsPerNode: Optional[int] = Field(
        default=None,
        description='Immutable. The maximum number of pods per node which use this pod network.',
    )
    secondaryPodRange: Optional[str] = Field(
        default=None,
        description='Immutable. The name of the secondary range on the subnet which provides IP address for this pod range.',
    )
    subnetworkRef: Optional[Union[SubnetworkRef2, SubnetworkRef3]] = Field(
        default=None,
        description='Immutable. Name of the subnetwork where the additional pod network belongs.',
    )


class AdvancedMachineFeatures(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    threadsPerCore: int = Field(
        ...,
        description='Immutable. The number of threads per physical core. To disable simultaneous multithreading (SMT) set this to 1. If unset, the maximum number of threads supported per core by the underlying processor is assumed.',
    )


class Autoscaling(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    locationPolicy: Optional[str] = Field(
        default=None,
        description='Location policy specifies the algorithm used when scaling-up the node pool. "BALANCED" - Is a best effort policy that aims to balance the sizes of available zones. "ANY" - Instructs the cluster autoscaler to prioritize utilization of unused reservations, and reduces preemption risk for Spot VMs.',
    )
    maxNodeCount: Optional[int] = Field(
        default=None,
        description='Maximum number of nodes per zone in the node pool. Must be >= min_node_count. Cannot be used with total limits.',
    )
    minNodeCount: Optional[int] = Field(
        default=None,
        description='Minimum number of nodes per zone in the node pool. Must be >=0 and <= max_node_count. Cannot be used with total limits.',
    )
    totalMaxNodeCount: Optional[int] = Field(
        default=None,
        description='Maximum number of all nodes in the node pool. Must be >= total_min_node_count. Cannot be used with per zone limits.',
    )
    totalMinNodeCount: Optional[int] = Field(
        default=None,
        description='Minimum number of all nodes in the node pool. Must be >=0 and <= total_max_node_count. Cannot be used with per zone limits.',
    )


class BlueGreenSettings(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nodePoolSoakDuration: Optional[str] = Field(
        default=None,
        description='Time needed after draining entire blue pool. After this period, blue pool will be cleaned up.',
    )
    standardRolloutPolicy: StandardRolloutPolicy = Field(
        ..., description='Standard rollout policy is the default policy for blue-green.'
    )


class BootDiskKMSCryptoKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class BootDiskKMSCryptoKeyRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ClusterRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `ContainerCluster` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ClusterRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `name` field of a `ContainerCluster` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class ConfidentialNodes(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: bool = Field(
        ...,
        description='Immutable. Whether Confidential Nodes feature is enabled for all nodes in this pool.',
    )


class EphemeralStorageConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    localSsdCount: int = Field(
        ...,
        description='Immutable. Number of local SSDs to use to back ephemeral storage. Uses NVMe interfaces. Each local SSD must be 375 or 3000 GB in size, and all local SSDs must share the same size.',
    )


class EphemeralStorageLocalSsdConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    localSsdCount: int = Field(
        ...,
        description='Immutable. Number of local SSDs to use to back ephemeral storage. Uses NVMe interfaces. Each local SSD must be 375 or 3000 GB in size, and all local SSDs must share the same size.',
    )


class FastSocket(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: bool = Field(
        ..., description='Whether or not NCCL Fast Socket is enabled.'
    )


class GcfsConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: bool = Field(..., description='Immutable. Whether or not GCFS is enabled.')


class GpuDriverInstallationConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    gpuDriverVersion: str = Field(
        ..., description='Immutable. Mode for how the GPU driver is installed.'
    )


class GpuSharingConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    gpuSharingStrategy: str = Field(
        ...,
        description='Immutable. The type of GPU sharing strategy to enable on the GPU node. Possible values are described in the API package (https://pkg.go.dev/google.golang.org/api/container/v1#GPUSharingConfig).',
    )
    maxSharedClientsPerGpu: int = Field(
        ...,
        description='Immutable. The maximum number of containers that can share a GPU.',
    )


class GuestAcceleratorItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    count: int = Field(
        ...,
        description='Immutable. The number of the accelerator cards exposed to an instance.',
    )
    gpuDriverInstallationConfig: Optional[GpuDriverInstallationConfig] = Field(
        default=None,
        description='Immutable. Configuration for auto installation of GPU driver.',
    )
    gpuPartitionSize: Optional[str] = Field(
        default=None,
        description='Immutable. Size of partitions to create on the GPU. Valid values are described in the NVIDIA mig user guide (https://docs.nvidia.com/datacenter/tesla/mig-user-guide/#partitioning).',
    )
    gpuSharingConfig: Optional[GpuSharingConfig] = Field(
        default=None, description='Immutable. Configuration for GPU sharing.'
    )
    type: str = Field(..., description='Immutable. The accelerator type resource name.')


class Gvnic(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: bool = Field(
        ..., description='Immutable. Whether or not gvnic is enabled.'
    )


class HostMaintenancePolicy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    maintenanceInterval: str = Field(..., description='Immutable. .')


class KubeletConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cpuCfsQuota: Optional[bool] = Field(
        default=None,
        description='Enable CPU CFS quota enforcement for containers that specify CPU limits.',
    )
    cpuCfsQuotaPeriod: Optional[str] = Field(
        default=None,
        description="Set the CPU CFS quota period value 'cpu.cfs_period_us'.",
    )
    cpuManagerPolicy: str = Field(
        ..., description='Control the CPU management policy on the node.'
    )
    podPidsLimit: Optional[int] = Field(
        default=None,
        description='Controls the maximum number of processes allowed to run in a pod.',
    )


class LinuxNodeConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    sysctls: Dict[str, str] = Field(
        ...,
        description='The Linux kernel parameters to be applied to the nodes and all pods running on the nodes.',
    )


class LocalNvmeSsdBlockConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    localSsdCount: int = Field(
        ...,
        description='Immutable. Number of raw-block local NVMe SSD disks to be attached to the node. Each local SSD is 375 GB in size.',
    )


class Management(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    autoRepair: Optional[bool] = Field(
        default=None, description='Whether the nodes will be automatically repaired.'
    )
    autoUpgrade: Optional[bool] = Field(
        default=None, description='Whether the nodes will be automatically upgraded.'
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class NetworkConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    additionalNodeNetworkConfigs: Optional[List[AdditionalNodeNetworkConfig]] = Field(
        default=None,
        description='Immutable. We specify the additional node networks for this node pool using this list. Each node network corresponds to an additional interface.',
    )
    additionalPodNetworkConfigs: Optional[List[AdditionalPodNetworkConfig]] = Field(
        default=None,
        description='Immutable. We specify the additional pod networks for this node pool using this list. Each pod network corresponds to an additional alias IP range for the node.',
    )
    createPodRange: Optional[bool] = Field(
        default=None,
        description='Immutable. Whether to create a new range for pod IPs in this node pool. Defaults are provided for pod_range and pod_ipv4_cidr_block if they are not specified.',
    )
    enablePrivateNodes: Optional[bool] = Field(
        default=None, description='Whether nodes have internal IP addresses only.'
    )
    podCidrOverprovisionConfig: Optional[PodCidrOverprovisionConfig] = Field(
        default=None,
        description='Immutable. Configuration for node-pool level pod cidr overprovision. If not set, the cluster level setting will be inherited.',
    )
    podIpv4CidrBlock: Optional[str] = Field(
        default=None,
        description='Immutable. The IP address range for pod IPs in this node pool. Only applicable if create_pod_range is true. Set to blank to have a range chosen with the default size. Set to /netmask (e.g. /14) to have a range chosen with a specific netmask. Set to a CIDR notation (e.g. 10.96.0.0/14) to pick a specific range to use.',
    )
    podRange: Optional[str] = Field(
        default=None,
        description='Immutable. The ID of the secondary range for pod IPs. If create_pod_range is true, this ID is used for the new range. If create_pod_range is false, uses an existing secondary range with this ID.',
    )


class NetworkRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeNetwork` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NetworkRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeNetwork` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NodeAffinityItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: str = Field(..., description='Immutable. .')
    operator: str = Field(..., description='Immutable. .')
    values: List[str] = Field(..., description='Immutable. .')


class NodeConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    advancedMachineFeatures: Optional[AdvancedMachineFeatures] = Field(
        default=None,
        description='Immutable. Specifies options for controlling advanced machine features.',
    )
    bootDiskKMSCryptoKeyRef: Optional[
        Union[BootDiskKMSCryptoKeyRef, BootDiskKMSCryptoKeyRef1]
    ] = None
    confidentialNodes: Optional[ConfidentialNodes] = Field(
        default=None,
        description="Immutable. Configuration for the confidential nodes feature, which makes nodes run on confidential VMs. Warning: This configuration can't be changed (or added/removed) after pool creation without deleting and recreating the entire pool.",
    )
    diskSizeGb: Optional[int] = Field(
        default=None,
        description='Immutable. Size of the disk attached to each node, specified in GB. The smallest allowed disk size is 10GB.',
    )
    diskType: Optional[str] = Field(
        default=None,
        description='Immutable. Type of the disk attached to each node. Such as pd-standard, pd-balanced or pd-ssd.',
    )
    ephemeralStorageConfig: Optional[EphemeralStorageConfig] = Field(
        default=None,
        description='Immutable. Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.',
    )
    ephemeralStorageLocalSsdConfig: Optional[EphemeralStorageLocalSsdConfig] = Field(
        default=None,
        description='Immutable. Parameters for the ephemeral storage filesystem. If unspecified, ephemeral storage is backed by the boot disk.',
    )
    fastSocket: Optional[FastSocket] = Field(
        default=None, description='Enable or disable NCCL Fast Socket in the node pool.'
    )
    gcfsConfig: Optional[GcfsConfig] = Field(
        default=None, description='Immutable. GCFS configuration for this node.'
    )
    guestAccelerator: Optional[List[GuestAcceleratorItem]] = Field(
        default=None,
        description='Immutable. List of the type and count of accelerator cards attached to the instance.',
    )
    gvnic: Optional[Gvnic] = Field(
        default=None, description='Immutable. Enable or disable gvnic in the node pool.'
    )
    hostMaintenancePolicy: Optional[HostMaintenancePolicy] = Field(
        default=None,
        description='Immutable. The maintenance policy for the hosts on which the GKE VMs run on.',
    )
    imageType: Optional[str] = Field(
        default=None,
        description='The image type to use for this node. Note that for a given image type, the latest version of it will be used.',
    )
    kubeletConfig: Optional[KubeletConfig] = Field(
        default=None, description='Node kubelet configs.'
    )
    labels: Optional[Dict[str, str]] = Field(
        default=None,
        description='The map of Kubernetes labels (key/value pairs) to be applied to each node. These will added in addition to any default label(s) that Kubernetes may apply to the node.',
    )
    linuxNodeConfig: Optional[LinuxNodeConfig] = Field(
        default=None, description='Parameters that can be configured on Linux nodes.'
    )
    localNvmeSsdBlockConfig: Optional[LocalNvmeSsdBlockConfig] = Field(
        default=None, description='Immutable. Parameters for raw-block local NVMe SSDs.'
    )
    localSsdCount: Optional[int] = Field(
        default=None,
        description='Immutable. The number of local SSD disks to be attached to the node.',
    )
    loggingVariant: Optional[str] = Field(
        default=None,
        description='Type of logging agent that is used as the default value for node pools in the cluster. Valid values include DEFAULT and MAX_THROUGHPUT.',
    )
    machineType: Optional[str] = Field(
        default=None,
        description='Immutable. The name of a Google Compute Engine machine type.',
    )
    metadata: Optional[Dict[str, str]] = Field(
        default=None,
        description='Immutable. The metadata key/value pairs assigned to instances in the cluster.',
    )
    minCpuPlatform: Optional[str] = Field(
        default=None,
        description='Immutable. Minimum CPU platform to be used by this instance. The instance may be scheduled on the specified or newer CPU platform.',
    )
    nodeGroupRef: Optional[Union[NodeGroupRef, NodeGroupRef1]] = Field(
        default=None,
        description='Immutable. Setting this field will assign instances\nof this pool to run on the specified node group. This is useful\nfor running workloads on sole tenant nodes.',
    )
    oauthScopes: Optional[List[str]] = Field(
        default=None,
        description='Immutable. The set of Google API scopes to be made available on all of the node VMs.',
    )
    preemptible: Optional[bool] = Field(
        default=None,
        description='Immutable. Whether the nodes are created as preemptible VM instances.',
    )
    reservationAffinity: Optional[ReservationAffinity] = Field(
        default=None,
        description='Immutable. The reservation affinity configuration for the node pool.',
    )
    resourceLabels: Optional[Dict[str, str]] = Field(
        default=None,
        description='The GCE resource labels (a map of key/value pairs) to be applied to the node pool.',
    )
    sandboxConfig: Optional[SandboxConfig] = Field(
        default=None, description='Immutable. Sandbox configuration for this node.'
    )
    serviceAccountRef: Optional[Union[ServiceAccountRef, ServiceAccountRef1]] = None
    shieldedInstanceConfig: Optional[ShieldedInstanceConfig] = Field(
        default=None, description='Immutable. Shielded Instance options.'
    )
    soleTenantConfig: Optional[SoleTenantConfig] = Field(
        default=None,
        description='Immutable. Node affinity options for sole tenant node pools.',
    )
    spot: Optional[bool] = Field(
        default=None,
        description='Immutable. Whether the nodes are created as spot VM instances.',
    )
    tags: Optional[List[str]] = Field(
        default=None, description='The list of instance tags applied to all nodes.'
    )
    taint: Optional[List[TaintItem]] = Field(
        default=None,
        description='Immutable. List of Kubernetes taints to be applied to each node.',
    )
    workloadMetadataConfig: Optional[WorkloadMetadataConfig] = Field(
        default=None, description='The workload metadata configuration for this node.'
    )


class NodeGroupRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `ComputeNodeGroup` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NodeGroupRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `name` field of a `ComputeNodeGroup` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class PlacementPolicy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    policyNameRef: Optional[Union[PolicyNameRef, PolicyNameRef1]] = Field(
        default=None,
        description='Immutable. If set, refers to the name of a custom resource policy supplied by the user. The resource policy must be in the same project and region as the node pool. If not found, InvalidArgument error is returned.',
    )
    tpuTopology: Optional[str] = Field(
        default=None,
        description='TPU placement topology for pod slice node pool. https://cloud.google.com/tpu/docs/types-topologies#tpu_topologies.',
    )
    type: str = Field(..., description='Type defines the type of placement policy.')


class PodCidrOverprovisionConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    disabled: bool


class PolicyNameRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeResourcePolicy` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class PolicyNameRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeResourcePolicy` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ReservationAffinity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    consumeReservationType: str = Field(
        ...,
        description='Immutable. Corresponds to the type of reservation consumption.',
    )
    key: Optional[str] = Field(
        default=None, description='Immutable. The label key of a reservation resource.'
    )
    values: Optional[List[str]] = Field(
        default=None,
        description='Immutable. The label values of the reservation resource.',
    )


class SandboxConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    sandboxType: str = Field(
        ..., description="Type of the sandbox to use for the node (e.g. 'gvisor')."
    )


class ServiceAccountRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ServiceAccountRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `email` field of an `IAMServiceAccount` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ShieldedInstanceConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enableIntegrityMonitoring: Optional[bool] = Field(
        default=None,
        description='Immutable. Defines whether the instance has integrity monitoring enabled.',
    )
    enableSecureBoot: Optional[bool] = Field(
        default=None,
        description='Immutable. Defines whether the instance has Secure Boot enabled.',
    )


class SoleTenantConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    nodeAffinity: List[NodeAffinityItem] = Field(..., description='Immutable. .')


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    autoscaling: Optional[Autoscaling] = Field(
        default=None,
        description='Configuration required by cluster autoscaler to adjust the size of the node pool to the current cluster usage. To disable autoscaling, set minNodeCount and maxNodeCount to 0.',
    )
    clusterRef: Union[ClusterRef, ClusterRef1]
    initialNodeCount: Optional[int] = Field(
        default=None,
        description='Immutable. The initial number of nodes for the pool. In regional or multi-zonal clusters, this is the number of nodes per zone. Changing this will force recreation of the resource.',
    )
    location: str = Field(
        ..., description='Immutable. The location (region or zone) of the cluster.'
    )
    management: Optional[Management] = Field(
        default=None,
        description='Node management configuration, wherein auto-repair and auto-upgrade is configured.',
    )
    maxPodsPerNode: Optional[int] = Field(
        default=None,
        description='Immutable. The maximum number of pods per node in this node pool. Note that this does not work on node pools which are "route-based" - that is, node pools belonging to clusters that do not have IP Aliasing enabled.',
    )
    namePrefix: Optional[str] = Field(
        default=None,
        description='Immutable. Creates a unique name for the node pool beginning with the specified prefix. Conflicts with name.',
    )
    networkConfig: Optional[NetworkConfig] = Field(
        default=None,
        description='Networking configuration for this NodePool. If specified, it overrides the cluster-level defaults.',
    )
    nodeConfig: Optional[NodeConfig] = Field(
        default=None, description='Immutable. The configuration of the nodepool.'
    )
    nodeCount: Optional[int] = Field(
        default=None,
        description='The number of nodes per instance group. This field can be used to update the number of nodes per instance group but should not be used alongside autoscaling.',
    )
    nodeLocations: Optional[List[str]] = Field(
        default=None,
        description="The list of zones in which the node pool's nodes should be located. Nodes must be in the region of their regional cluster or in the same region as their cluster's zone for zonal clusters. If unspecified, the cluster-level node_locations will be used.",
    )
    placementPolicy: Optional[PlacementPolicy] = Field(
        default=None, description='Immutable. Specifies the node placement policy.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    upgradeSettings: Optional[UpgradeSettings] = Field(
        default=None,
        description='Specify node upgrade settings to change how many nodes GKE attempts to upgrade at once. The number of nodes upgraded simultaneously is the sum of max_surge and max_unavailable. The maximum number of nodes upgraded simultaneously is limited to 20.',
    )
    version: Optional[str] = None


class StandardRolloutPolicy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    batchNodeCount: Optional[int] = Field(
        default=None, description='Number of blue nodes to drain in a batch.'
    )
    batchPercentage: Optional[float] = Field(
        default=None,
        description='Percentage of the blue pool nodes to drain in a batch.',
    )
    batchSoakDuration: Optional[str] = Field(
        default=None, description='Soak time after each batch gets drained.'
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    instanceGroupUrls: Optional[List[str]] = Field(
        default=None,
        description='The resource URLs of the managed instance groups associated with this node pool.',
    )
    managedInstanceGroupUrls: Optional[List[str]] = Field(
        default=None,
        description='List of instance group URLs which have been assigned to this node pool.',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    operation: Optional[str] = None


class SubnetworkRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeSubnetwork` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SubnetworkRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeSubnetwork` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SubnetworkRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `ComputeSubnetwork` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SubnetworkRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `ComputeSubnetwork` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class TaintItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    effect: str = Field(..., description='Immutable. Effect for taint.')
    key: str = Field(..., description='Immutable. Key for taint.')
    value: str = Field(..., description='Immutable. Value for taint.')


class UpgradeSettings(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    blueGreenSettings: Optional[BlueGreenSettings] = Field(
        default=None, description='Settings for BlueGreen node pool upgrade.'
    )
    maxSurge: Optional[int] = Field(
        default=None,
        description='The number of additional nodes that can be added to the node pool during an upgrade. Increasing max_surge raises the number of nodes that can be upgraded simultaneously. Can be set to 0 or greater.',
    )
    maxUnavailable: Optional[int] = Field(
        default=None,
        description='The number of nodes that can be simultaneously unavailable during an upgrade. Increasing max_unavailable raises the number of nodes that can be upgraded in parallel. Can be set to 0 or greater.',
    )
    strategy: Optional[str] = Field(
        default=None, description='Update strategy for the given nodepool.'
    )


class WorkloadMetadataConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    mode: Optional[str] = Field(
        default=None,
        description='Mode is the configuration for how to expose metadata to workloads running on the node.',
    )
    nodeMetadata: Optional[str] = Field(
        default=None,
        description='DEPRECATED. Deprecated in favor of mode. NodeMetadata is the configuration for how to expose metadata to the workloads running on the node.',
    )
