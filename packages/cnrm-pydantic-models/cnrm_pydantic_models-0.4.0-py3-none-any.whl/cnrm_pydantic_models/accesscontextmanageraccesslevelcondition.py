# generated by datamodel-codegen:
#   filename:  accesscontextmanageraccesslevelcondition_v1alpha1.json
#   timestamp: 2024-03-18T21:06:26+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class AccessLevelRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of an `AccessContextManagerAccessLevel` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class AccessLevelRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `name` field of an `AccessContextManagerAccessLevel` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class DevicePolicy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allowedDeviceManagementLevels: Optional[List[str]] = Field(
        default=None,
        description='Immutable. A list of allowed device management levels.\nAn empty list allows all management levels. Possible values: ["MANAGEMENT_UNSPECIFIED", "NONE", "BASIC", "COMPLETE"].',
    )
    allowedEncryptionStatuses: Optional[List[str]] = Field(
        default=None,
        description='Immutable. A list of allowed encryptions statuses.\nAn empty list allows all statuses. Possible values: ["ENCRYPTION_UNSPECIFIED", "ENCRYPTION_UNSUPPORTED", "UNENCRYPTED", "ENCRYPTED"].',
    )
    osConstraints: Optional[List[OsConstraint]] = Field(
        default=None,
        description='Immutable. A list of allowed OS versions.\nAn empty list allows all types and all versions.',
    )
    requireAdminApproval: Optional[bool] = Field(
        default=None,
        description='Immutable. Whether the device needs to be approved by the customer admin.',
    )
    requireCorpOwned: Optional[bool] = Field(
        default=None,
        description='Immutable. Whether the device needs to be corp owned.',
    )
    requireScreenLock: Optional[bool] = Field(
        default=None,
        description='Immutable. Whether or not screenlock is required for the DevicePolicy\nto be true. Defaults to false.',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Optional[Spec] = None
    status: Optional[Status] = None


class OsConstraint(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    minimumVersion: Optional[str] = Field(
        default=None,
        description='Immutable. The minimum allowed OS version. If not set, any version\nof this OS satisfies the constraint.\nFormat: "major.minor.patch" such as "10.5.301", "9.2.1".',
    )
    osType: str = Field(
        ...,
        description='Immutable. The operating system type of the device. Possible values: ["OS_UNSPECIFIED", "DESKTOP_MAC", "DESKTOP_WINDOWS", "DESKTOP_LINUX", "DESKTOP_CHROME_OS", "ANDROID", "IOS"].',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    accessLevelRef: Optional[Union[AccessLevelRef, AccessLevelRef1]] = None
    devicePolicy: Optional[DevicePolicy] = Field(
        default=None,
        description='Immutable. Device specific restrictions, all restrictions must hold for\nthe Condition to be true. If not specified, all devices are\nallowed.',
    )
    ipSubnetworks: Optional[List[str]] = Field(
        default=None,
        description='Immutable. A list of CIDR block IP subnetwork specification. May be IPv4\nor IPv6.\nNote that for a CIDR IP address block, the specified IP address\nportion must be properly truncated (i.e. all the host bits must\nbe zero) or the input is considered malformed. For example,\n"192.0.2.0/24" is accepted but "192.0.2.1/24" is not. Similarly,\nfor IPv6, "2001:db8::/32" is accepted whereas "2001:db8::1/32"\nis not. The originating IP of a request must be in one of the\nlisted subnets in order for this Condition to be true.\nIf empty, all IP addresses are allowed.',
    )
    members: Optional[List[str]] = Field(
        default=None,
        description="Immutable. An allowed list of members (users, service accounts).\nUsing groups is not supported yet.\n\nThe signed-in user originating the request must be a part of one\nof the provided members. If not specified, a request may come\nfrom any user (logged in/not logged in, not present in any\ngroups, etc.).\nFormats: 'user:{emailid}', 'serviceAccount:{emailid}'.",
    )
    negate: Optional[bool] = Field(
        default=None,
        description='Immutable. Whether to negate the Condition. If true, the Condition becomes\na NAND over its non-empty fields, each field must be false for\nthe Condition overall to be satisfied. Defaults to false.',
    )
    regions: Optional[List[str]] = Field(
        default=None,
        description='Immutable. The request must originate from one of the provided\ncountries/regions.\nFormat: A valid ISO 3166-1 alpha-2 code.',
    )
    requiredAccessLevels: Optional[List[str]] = Field(
        default=None,
        description='Immutable. A list of other access levels defined in the same Policy,\nreferenced by resource name. Referencing an AccessLevel which\ndoes not exist is an error. All access levels listed must be\ngranted for the Condition to be true.\nFormat: accessPolicies/{policy_id}/accessLevels/{short_name}.',
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The accessLevel of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
