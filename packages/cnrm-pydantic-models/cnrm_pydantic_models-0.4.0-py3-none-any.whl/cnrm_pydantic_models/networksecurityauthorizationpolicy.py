# generated by datamodel-codegen:
#   filename:  networksecurityauthorizationpolicy_v1beta1.json
#   timestamp: 2024-03-18T21:08:30+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class Destination(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hosts: List[str] = Field(
        ...,
        description='Required. List of host names to match. Matched against HOST header in http requests. Each host can be an exact match, or a prefix match (example, “mydomain.*”) or a suffix match (example, *.myorg.com”) or a presence(any) match “*”.',
    )
    httpHeaderMatch: Optional[HttpHeaderMatch] = Field(
        default=None,
        description='Optional. Match against key:value pair in http header. Provides a flexible match based on HTTP headers, for potentially advanced use cases.',
    )
    methods: Optional[List[str]] = Field(
        default=None,
        description='Optional. A list of HTTP methods to match. Should not be set for gRPC services.',
    )
    ports: List[int] = Field(
        ..., description='Required. List of destination ports to match.'
    )


class HttpHeaderMatch(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    headerName: str = Field(
        ...,
        description='Required. The name of the HTTP header to match. For matching against the HTTP request\'s authority, use a headerMatch with the header name ":authority". For matching a request\'s method, use the headerName ":method".',
    )
    regexMatch: str = Field(
        ...,
        description="Required. The value of the header must match the regular expression specified in regexMatch. For regular expression grammar, please see: en.cppreference.com/w/cpp/regex/ecmascript For matching against a port specified in the HTTP request, use a headerMatch with headerName set to Host and a regular expression that satisfies the RFC2616 Host header's port specifier.",
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='The project for the resource\n\nAllowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='The project for the resource\n\nAllowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Rule(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    destinations: Optional[List[Destination]] = Field(
        default=None,
        description='Optional. List of attributes for the traffic destination. If not set, the action specified in the ‘action’ field will be applied without any rule checks for the destination.',
    )
    sources: Optional[List[Source]] = Field(
        default=None,
        description='Optional. List of attributes for the traffic source. If not set, the action specified in the ‘action’ field will be applied without any rule checks for the source.',
    )


class Source(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    ipBlocks: Optional[List[str]] = Field(
        default=None,
        description='Optional. List of CIDR ranges to match based on source IP address. Single IP (e.g., "1.2.3.4") and CIDR (e.g., "1.2.3.0/24") are supported.',
    )
    principals: Optional[List[str]] = Field(
        default=None,
        description='Optional. List of peer identities to match for authorization. Each peer can be an exact match, or a prefix match (example, “namespace/*”) or a suffix match (example, */service-account”) or a presence match “*”.',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    action: str = Field(
        ...,
        description='Required. The action to take when a rule match is found. Possible values are "ALLOW" or "DENY". Possible values: ACTION_UNSPECIFIED, ALLOW, DENY',
    )
    description: Optional[str] = Field(
        default=None, description='Optional. Free-text description of the resource.'
    )
    location: str = Field(..., description='Immutable. The location for the resource')
    projectRef: Union[ProjectRef, ProjectRef1] = Field(
        ..., description='Immutable. The Project that this resource belongs to.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    rules: Optional[List[Rule]] = Field(
        default=None,
        description='Optional. List of rules to match. If not set, the action specified in the ‘action’ field will be applied without any additional rule checks.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    createTime: Optional[AwareDatetime] = Field(
        default=None,
        description='Output only. The timestamp when the resource was created.',
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    updateTime: Optional[AwareDatetime] = Field(
        default=None,
        description='Output only. The timestamp when the resource was updated.',
    )
