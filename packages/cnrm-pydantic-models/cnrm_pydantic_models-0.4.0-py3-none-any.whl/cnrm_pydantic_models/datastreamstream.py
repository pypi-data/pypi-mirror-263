# generated by datamodel-codegen:
#   filename:  datastreamstream_v1alpha1.json
#   timestamp: 2024-03-18T21:07:38+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class BackfillAll(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    mysqlExcludedObjects: Optional[MysqlExcludedObjects] = Field(
        default=None, description='MySQL data source objects to avoid backfilling.'
    )
    oracleExcludedObjects: Optional[OracleExcludedObjects] = Field(
        default=None, description='PostgreSQL data source objects to avoid backfilling.'
    )
    postgresqlExcludedObjects: Optional[PostgresqlExcludedObjects] = Field(
        default=None, description='PostgreSQL data source objects to avoid backfilling.'
    )


class BigqueryDestinationConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataFreshness: Optional[str] = Field(
        default=None,
        description='The guaranteed data freshness (in seconds) when querying tables created by the stream.\nEditing this field will only affect new tables created in the future, but existing tables\nwill not be impacted. Lower values mean that queries will return fresher data, but may result in higher cost.\nA duration in seconds with up to nine fractional digits, terminated by \'s\'. Example: "3.5s". Defaults to 900s.',
    )
    singleTargetDataset: Optional[SingleTargetDataset] = Field(
        default=None,
        description='A single target dataset to which all data will be streamed.',
    )
    sourceHierarchyDatasets: Optional[SourceHierarchyDatasets] = Field(
        default=None,
        description='Destination datasets are created so that hierarchy of the destination data objects matches the source hierarchy.',
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class DatasetTemplate(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    datasetIdPrefix: Optional[str] = Field(
        default=None,
        description='If supplied, every created dataset will have its name prefixed by the provided value.\nThe prefix and name will be separated by an underscore. i.e. _.',
    )
    kmsKeyName: Optional[str] = Field(
        default=None,
        description='Immutable. Describes the Cloud KMS encryption key that will be used to protect destination BigQuery\ntable. The BigQuery Service Account associated with your project requires access to this\nencryption key. i.e. projects/{project}/locations/{location}/keyRings/{key_ring}/cryptoKeys/{cryptoKey}.\nSee https://cloud.google.com/bigquery/docs/customer-managed-encryption for more information.',
    )
    location: str = Field(
        ...,
        description='The geographic location where the dataset should reside.\nSee https://cloud.google.com/bigquery/docs/locations for supported locations.',
    )


class DestinationConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    bigqueryDestinationConfig: Optional[BigqueryDestinationConfig] = Field(
        default=None,
        description='A configuration for how data should be loaded to Cloud Storage.',
    )
    destinationConnectionProfile: str = Field(
        ...,
        description='Immutable. Destination connection profile resource. Format: projects/{project}/locations/{location}/connectionProfiles/{name}.',
    )
    gcsDestinationConfig: Optional[GcsDestinationConfig] = Field(
        default=None,
        description='A configuration for how data should be loaded to Cloud Storage.',
    )


class ExcludeObjects(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    mysqlDatabases: List[MysqlDatabase1] = Field(
        ..., description='MySQL databases on the server.'
    )


class ExcludeObjects1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    oracleSchemas: List[OracleSchema1] = Field(
        ..., description='Oracle schemas/databases in the database server.'
    )


class ExcludeObjects2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    postgresqlSchemas: List[PostgresqlSchema1] = Field(
        ..., description='PostgreSQL schemas on the server.'
    )


class GcsDestinationConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    avroFileFormat: Optional[Dict[str, Any]] = Field(
        default=None, description='AVRO file format configuration.'
    )
    fileRotationInterval: Optional[str] = Field(
        default=None,
        description='The maximum duration for which new events are added before a file is closed and a new file is created.\nA duration in seconds with up to nine fractional digits, terminated by \'s\'. Example: "3.5s". Defaults to 900s.',
    )
    fileRotationMb: Optional[int] = Field(
        default=None, description='The maximum file size to be saved in the bucket.'
    )
    jsonFileFormat: Optional[JsonFileFormat] = Field(
        default=None, description='JSON file format configuration.'
    )
    path: Optional[str] = Field(
        default=None,
        description='Path inside the Cloud Storage bucket to write data to.',
    )


class IncludeObjects(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    mysqlDatabases: List[MysqlDatabase2] = Field(
        ..., description='MySQL databases on the server.'
    )


class IncludeObjects1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    oracleSchemas: List[OracleSchema2] = Field(
        ..., description='Oracle schemas/databases in the database server.'
    )


class IncludeObjects2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    postgresqlSchemas: List[PostgresqlSchema2] = Field(
        ..., description='PostgreSQL schemas on the server.'
    )


class JsonFileFormat(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    compression: Optional[str] = Field(
        default=None,
        description='Compression of the loaded JSON file. Possible values: ["NO_COMPRESSION", "GZIP"].',
    )
    schemaFileFormat: Optional[str] = Field(
        default=None,
        description='The schema file format along JSON data files. Possible values: ["NO_SCHEMA_FILE", "AVRO_SCHEMA_FILE"].',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class MysqlColumn(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    collation: Optional[str] = Field(default=None, description='Column collation.')
    column: Optional[str] = Field(default=None, description='Column name.')
    dataType: Optional[str] = Field(
        default=None,
        description='The MySQL data type. Full data types list can be found here:\nhttps://dev.mysql.com/doc/refman/8.0/en/data-types.html.',
    )
    length: Optional[int] = Field(default=None, description='Column length.')
    nullable: Optional[bool] = Field(
        default=None, description='Whether or not the column can accept a null value.'
    )
    ordinalPosition: Optional[int] = Field(
        default=None, description='The ordinal position of the column in the table.'
    )
    primaryKey: Optional[bool] = Field(
        default=None, description='Whether or not the column represents a primary key.'
    )


class MysqlDatabase(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: str = Field(..., description='Database name.')
    mysqlTables: Optional[List[MysqlTable]] = Field(
        default=None, description='Tables in the database.'
    )


class MysqlDatabase1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: str = Field(..., description='Database name.')
    mysqlTables: Optional[List[MysqlTable1]] = Field(
        default=None, description='Tables in the database.'
    )


class MysqlDatabase2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: str = Field(..., description='Database name.')
    mysqlTables: Optional[List[MysqlTable2]] = Field(
        default=None, description='Tables in the database.'
    )


class MysqlExcludedObjects(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    mysqlDatabases: List[MysqlDatabase] = Field(
        ..., description='MySQL databases on the server.'
    )


class MysqlSourceConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    excludeObjects: Optional[ExcludeObjects] = Field(
        default=None, description='MySQL objects to exclude from the stream.'
    )
    includeObjects: Optional[IncludeObjects] = Field(
        default=None, description='MySQL objects to retrieve from the source.'
    )
    maxConcurrentBackfillTasks: Optional[int] = Field(
        default=None,
        description="Maximum number of concurrent backfill tasks. The number should be non negative.\nIf not set (or set to 0), the system's default value will be used.",
    )
    maxConcurrentCdcTasks: Optional[int] = Field(
        default=None,
        description="Maximum number of concurrent CDC tasks. The number should be non negative.\nIf not set (or set to 0), the system's default value will be used.",
    )


class MysqlTable(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    mysqlColumns: Optional[List[MysqlColumn]] = Field(
        default=None,
        description='MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.',
    )
    table: str = Field(..., description='Table name.')


class MysqlTable1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    mysqlColumns: Optional[List[MysqlColumn]] = Field(
        default=None,
        description='MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.',
    )
    table: str = Field(..., description='Table name.')


class MysqlTable2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    mysqlColumns: Optional[List[MysqlColumn]] = Field(
        default=None,
        description='MySQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.',
    )
    table: str = Field(..., description='Table name.')


class OracleColumn(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    column: Optional[str] = Field(default=None, description='Column name.')
    dataType: Optional[str] = Field(
        default=None,
        description='The Oracle data type. Full data types list can be found here:\nhttps://docs.oracle.com/en/database/oracle/oracle-database/21/sqlrf/Data-Types.html.',
    )
    encoding: Optional[str] = Field(default=None, description='Column encoding.')
    length: Optional[int] = Field(default=None, description='Column length.')
    nullable: Optional[bool] = Field(
        default=None, description='Whether or not the column can accept a null value.'
    )
    ordinalPosition: Optional[int] = Field(
        default=None, description='The ordinal position of the column in the table.'
    )
    precision: Optional[int] = Field(default=None, description='Column precision.')
    primaryKey: Optional[bool] = Field(
        default=None, description='Whether or not the column represents a primary key.'
    )
    scale: Optional[int] = Field(default=None, description='Column scale.')


class OracleExcludedObjects(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    oracleSchemas: List[OracleSchema] = Field(
        ..., description='Oracle schemas/databases in the database server.'
    )


class OracleSchema(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    oracleTables: Optional[List[OracleTable]] = Field(
        default=None, description='Tables in the database.'
    )
    schema_: str = Field(..., alias='schema', description='Schema name.')


class OracleSchema1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    oracleTables: Optional[List[OracleTable1]] = Field(
        default=None, description='Tables in the database.'
    )
    schema_: str = Field(..., alias='schema', description='Schema name.')


class OracleSchema2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    oracleTables: Optional[List[OracleTable2]] = Field(
        default=None, description='Tables in the database.'
    )
    schema_: str = Field(..., alias='schema', description='Schema name.')


class OracleSourceConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dropLargeObjects: Optional[Dict[str, Any]] = Field(
        default=None, description='Configuration to drop large object values.'
    )
    excludeObjects: Optional[ExcludeObjects1] = Field(
        default=None, description='Oracle objects to exclude from the stream.'
    )
    includeObjects: Optional[IncludeObjects1] = Field(
        default=None, description='Oracle objects to retrieve from the source.'
    )
    maxConcurrentBackfillTasks: Optional[int] = Field(
        default=None,
        description="Maximum number of concurrent backfill tasks. The number should be non negative.\nIf not set (or set to 0), the system's default value will be used.",
    )
    maxConcurrentCdcTasks: Optional[int] = Field(
        default=None,
        description="Maximum number of concurrent CDC tasks. The number should be non negative.\nIf not set (or set to 0), the system's default value will be used.",
    )
    streamLargeObjects: Optional[Dict[str, Any]] = Field(
        default=None, description='Configuration to drop large object values.'
    )


class OracleTable(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    oracleColumns: Optional[List[OracleColumn]] = Field(
        default=None,
        description='Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.',
    )
    table: str = Field(..., description='Table name.')


class OracleTable1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    oracleColumns: Optional[List[OracleColumn]] = Field(
        default=None,
        description='Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.',
    )
    table: str = Field(..., description='Table name.')


class OracleTable2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    oracleColumns: Optional[List[OracleColumn]] = Field(
        default=None,
        description='Oracle columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.',
    )
    table: str = Field(..., description='Table name.')


class PostgresqlColumn(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    column: Optional[str] = Field(default=None, description='Column name.')
    dataType: Optional[str] = Field(
        default=None,
        description='The PostgreSQL data type. Full data types list can be found here:\nhttps://www.postgresql.org/docs/current/datatype.html.',
    )
    length: Optional[int] = Field(default=None, description='Column length.')
    nullable: Optional[bool] = Field(
        default=None, description='Whether or not the column can accept a null value.'
    )
    ordinalPosition: Optional[int] = Field(
        default=None, description='The ordinal position of the column in the table.'
    )
    precision: Optional[int] = Field(default=None, description='Column precision.')
    primaryKey: Optional[bool] = Field(
        default=None, description='Whether or not the column represents a primary key.'
    )
    scale: Optional[int] = Field(default=None, description='Column scale.')


class PostgresqlExcludedObjects(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    postgresqlSchemas: List[PostgresqlSchema] = Field(
        ..., description='PostgreSQL schemas on the server.'
    )


class PostgresqlSchema(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    postgresqlTables: Optional[List[PostgresqlTable]] = Field(
        default=None, description='Tables in the schema.'
    )
    schema_: str = Field(..., alias='schema', description='Database name.')


class PostgresqlSchema1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    postgresqlTables: Optional[List[PostgresqlTable1]] = Field(
        default=None, description='Tables in the schema.'
    )
    schema_: str = Field(..., alias='schema', description='Database name.')


class PostgresqlSchema2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    postgresqlTables: Optional[List[PostgresqlTable2]] = Field(
        default=None, description='Tables in the schema.'
    )
    schema_: str = Field(..., alias='schema', description='Database name.')


class PostgresqlSourceConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    excludeObjects: Optional[ExcludeObjects2] = Field(
        default=None, description='PostgreSQL objects to exclude from the stream.'
    )
    includeObjects: Optional[IncludeObjects2] = Field(
        default=None, description='PostgreSQL objects to retrieve from the source.'
    )
    maxConcurrentBackfillTasks: Optional[int] = Field(
        default=None,
        description="Maximum number of concurrent backfill tasks. The number should be non\nnegative. If not set (or set to 0), the system's default value will be used.",
    )
    publication: str = Field(
        ...,
        description="The name of the publication that includes the set of all tables\nthat are defined in the stream's include_objects.",
    )
    replicationSlot: str = Field(
        ...,
        description="The name of the logical replication slot that's configured with\nthe pgoutput plugin.",
    )


class PostgresqlTable(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    postgresqlColumns: Optional[List[PostgresqlColumn]] = Field(
        default=None,
        description='PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.',
    )
    table: str = Field(..., description='Table name.')


class PostgresqlTable1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    postgresqlColumns: Optional[List[PostgresqlColumn]] = Field(
        default=None,
        description='PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.',
    )
    table: str = Field(..., description='Table name.')


class PostgresqlTable2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    postgresqlColumns: Optional[List[PostgresqlColumn]] = Field(
        default=None,
        description='PostgreSQL columns in the schema. When unspecified as part of include/exclude objects, includes/excludes everything.',
    )
    table: str = Field(..., description='Table name.')


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `Project` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ..., description='Allowed value: The `name` field of a `Project` resource.'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SingleTargetDataset(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    datasetId: str = Field(
        ...,
        description='Dataset ID in the format projects/{project}/datasets/{dataset_id} or\n{project}:{dataset_id}.',
    )


class SourceConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    mysqlSourceConfig: Optional[MysqlSourceConfig] = Field(
        default=None, description='MySQL data source configuration.'
    )
    oracleSourceConfig: Optional[OracleSourceConfig] = Field(
        default=None, description='MySQL data source configuration.'
    )
    postgresqlSourceConfig: Optional[PostgresqlSourceConfig] = Field(
        default=None, description='PostgreSQL data source configuration.'
    )
    sourceConnectionProfile: str = Field(
        ...,
        description='Immutable. Source connection profile resource. Format: projects/{project}/locations/{location}/connectionProfiles/{name}.',
    )


class SourceHierarchyDatasets(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    datasetTemplate: DatasetTemplate = Field(
        ..., description='Dataset template used for dynamic dataset creation.'
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    backfillAll: Optional[BackfillAll] = Field(
        default=None,
        description="Backfill strategy to automatically backfill the Stream's objects. Specific objects can be excluded.",
    )
    backfillNone: Optional[Dict[str, Any]] = Field(
        default=None,
        description="Backfill strategy to disable automatic backfill for the Stream's objects.",
    )
    customerManagedEncryptionKey: Optional[str] = Field(
        default=None,
        description='Immutable. A reference to a KMS encryption key. If provided, it will be used to encrypt the data. If left blank, data\nwill be encrypted using an internal Stream-specific encryption key provisioned through KMS.',
    )
    desiredState: Optional[str] = Field(
        default=None,
        description="Desired state of the Stream. Set this field to 'RUNNING' to start the stream, and 'PAUSED' to pause the stream.",
    )
    destinationConfig: DestinationConfig = Field(
        ..., description='Destination connection profile configuration.'
    )
    displayName: str = Field(..., description='Display name.')
    location: str = Field(
        ...,
        description='Immutable. The name of the location this stream is located in.',
    )
    projectRef: Union[ProjectRef, ProjectRef1] = Field(
        ..., description='The project that this resource belongs to.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The streamId of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    sourceConfig: SourceConfig = Field(
        ..., description='Source connection profile configuration.'
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    name: Optional[str] = Field(default=None, description="The stream's name.")
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    state: Optional[str] = Field(default=None, description='The state of the stream.')
