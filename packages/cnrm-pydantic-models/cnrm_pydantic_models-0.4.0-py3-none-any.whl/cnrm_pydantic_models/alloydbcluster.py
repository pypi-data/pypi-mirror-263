# generated by datamodel-codegen:
#   filename:  alloydbcluster_v1beta1.json
#   timestamp: 2024-03-18T21:06:30+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class AutomatedBackupPolicy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    backupWindow: Optional[str] = Field(
        default=None,
        description='The length of the time window during which a backup can be taken. If a backup does not succeed within this time window, it will be canceled and considered failed.\n\nThe backup window must be at least 5 minutes long. There is no upper bound on the window. If not set, it will default to 1 hour.\n\nA duration in seconds with up to nine fractional digits, terminated by \'s\'. Example: "3.5s".',
    )
    enabled: Optional[bool] = Field(
        default=None, description='Whether automated backups are enabled.'
    )
    encryptionConfig: Optional[EncryptionConfig] = Field(
        default=None,
        description='EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).',
    )
    labels: Optional[Dict[str, str]] = Field(
        default=None,
        description='Labels to apply to backups created using this configuration.',
    )
    location: Optional[str] = Field(
        default=None,
        description='The location where the backup will be stored. Currently, the only supported option is to store the backup in the same region as the cluster.',
    )
    quantityBasedRetention: Optional[QuantityBasedRetention] = Field(
        default=None,
        description="Quantity-based Backup retention policy to retain recent backups. Conflicts with 'time_based_retention', both can't be set together.",
    )
    timeBasedRetention: Optional[TimeBasedRetention] = Field(
        default=None,
        description="Time-based Backup retention policy. Conflicts with 'quantity_based_retention', both can't be set together.",
    )
    weeklySchedule: Optional[WeeklySchedule] = Field(
        default=None, description='Weekly schedule for the Backup.'
    )


class BackupNameRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of an `AlloyDBBackup` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class BackupNameRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `name` field of an `AlloyDBBackup` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class BackupSourceItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    backupName: Optional[str] = Field(
        default=None, description='The name of the backup resource.'
    )


class ClusterRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of an `AlloyDBCluster` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ClusterRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `name` field of an `AlloyDBCluster` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class ContinuousBackupConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: Optional[bool] = Field(
        default=None,
        description='Whether continuous backup recovery is enabled. If not set, defaults to true.',
    )
    encryptionConfig: Optional[EncryptionConfig1] = Field(
        default=None,
        description='EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).',
    )
    recoveryWindowDays: Optional[int] = Field(
        default=None,
        description='The numbers of days that are eligible to restore from using PITR. To support the entire recovery window, backups and logs are retained for one day more than the recovery window.\n\nIf not set, defaults to 14 days.',
    )


class ContinuousBackupInfoItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    earliestRestorableTime: Optional[str] = Field(
        default=None,
        description='The earliest restorable time that can be restored to. Output only field.',
    )
    enabledTime: Optional[str] = Field(
        default=None,
        description='When ContinuousBackup was most recently enabled. Set to null if ContinuousBackup is not enabled.',
    )
    encryptionInfo: Optional[List[EncryptionInfoItem]] = Field(
        default=None,
        description='Output only. The encryption information for the WALs and backups required for ContinuousBackup.',
    )
    schedule: Optional[List[str]] = Field(
        default=None,
        description='Days of the week on which a continuous backup is taken. Output only field. Ignored if passed into the request.',
    )


class EncryptionConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kmsKeyNameRef: Optional[Union[KmsKeyNameRef, KmsKeyNameRef1]] = Field(
        default=None,
        description='(Optional) The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME].',
    )


class EncryptionConfig1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kmsKeyNameRef: Optional[Union[KmsKeyNameRef2, KmsKeyNameRef3]] = Field(
        default=None,
        description='(Optional) The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME].',
    )


class EncryptionConfig2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kmsKeyNameRef: Optional[Union[KmsKeyNameRef4, KmsKeyNameRef5]] = Field(
        default=None,
        description='(Optional) The fully-qualified resource name of the KMS key. Each Cloud KMS key is regionalized and has the following format: projects/[PROJECT]/locations/[REGION]/keyRings/[RING]/cryptoKeys/[KEY_NAME].',
    )


class EncryptionInfoItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    encryptionType: Optional[str] = Field(
        default=None, description='Output only. Type of encryption.'
    )
    kmsKeyVersions: Optional[List[str]] = Field(
        default=None,
        description='Output only. Cloud KMS key versions that are being used to protect the database or the backup.',
    )


class InitialUser(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    password: Union[Password, Password1] = Field(
        ..., description='The initial password for the user.'
    )
    user: Optional[str] = Field(default=None, description='The database username.')


class KmsKeyNameRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyNameRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyNameRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyNameRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyNameRef4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyNameRef5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class MigrationSourceItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hostPort: Optional[str] = Field(
        default=None,
        description='The host and port of the on-premises instance in host:port format.',
    )
    referenceId: Optional[str] = Field(
        default=None,
        description='Place holder for the external source identifier(e.g DMS job name) that created the cluster.',
    )
    sourceType: Optional[str] = Field(
        default=None, description='Type of migration source.'
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class NetworkConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    allocatedIpRange: Optional[str] = Field(
        default=None,
        description='The name of the allocated IP range for the private IP AlloyDB cluster. For example: "google-managed-services-default".\nIf set, the instance IPs for this cluster will be created in the allocated range.',
    )
    networkRef: Optional[Union[NetworkRef, NetworkRef1]] = Field(
        default=None,
        description='(Required) The relative resource name of the VPC network on which\nthe instance can be accessed. It is specified in the following form:\nprojects/{project}/global/networks/{network_id}.',
    )


class NetworkRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: string of the format `projects/{{project}}/global/networks/{{value}}`, where {{value}} is the `name` field of a `ComputeNetwork` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NetworkRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: string of the format `projects/{{project}}/global/networks/{{value}}`, where {{value}} is the `name` field of a `ComputeNetwork` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NetworkRef2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: string of the format `projects/{{project}}/global/networks/{{value}}`, where {{value}} is the `name` field of a `ComputeNetwork` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class NetworkRef3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: string of the format `projects/{{project}}/global/networks/{{value}}`, where {{value}} is the `name` field of a `ComputeNetwork` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class Password(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class Password1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom1 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `Project` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ..., description='Allowed value: The `name` field of a `Project` resource.'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class QuantityBasedRetention(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    count: Optional[int] = Field(
        default=None, description='The number of backups to retain.'
    )


class RestoreBackupSource(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    backupNameRef: Union[BackupNameRef, BackupNameRef1] = Field(
        ...,
        description='(Required) The name of the backup that this cluster is restored from.',
    )


class RestoreContinuousBackupSource(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    clusterRef: Union[ClusterRef, ClusterRef1] = Field(
        ...,
        description='(Required) The name of the source cluster that this cluster is restored from.',
    )
    pointInTime: str = Field(
        ...,
        description='Immutable. The point in time that this cluster is restored to, in RFC 3339 format.',
    )


class SecretKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: str = Field(..., description='Key that identifies the value to be extracted.')
    name: str = Field(..., description='Name of the Secret to extract a value from.')


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    automatedBackupPolicy: Optional[AutomatedBackupPolicy] = Field(
        default=None,
        description='The automated backup policy for this cluster. AutomatedBackupPolicy is disabled by default.',
    )
    continuousBackupConfig: Optional[ContinuousBackupConfig] = Field(
        default=None,
        description='The continuous backup config for this cluster.\n\nIf no policy is provided then the default policy will be used. The default policy takes one backup a day and retains backups for 14 days.',
    )
    displayName: Optional[str] = Field(
        default=None,
        description='User-settable and human-readable display name for the Cluster.',
    )
    encryptionConfig: Optional[EncryptionConfig2] = Field(
        default=None,
        description='EncryptionConfig describes the encryption config of a cluster or a backup that is encrypted with a CMEK (customer-managed encryption key).',
    )
    initialUser: Optional[InitialUser] = Field(
        default=None, description='Initial user to setup during cluster creation.'
    )
    location: str = Field(
        ...,
        description='Immutable. The location where the alloydb cluster should reside.',
    )
    networkConfig: Optional[NetworkConfig] = Field(
        default=None, description='Metadata related to network configuration.'
    )
    networkRef: Optional[Union[NetworkRef2, NetworkRef3]] = Field(
        default=None,
        description='(Required) The relative resource name of the VPC network on which\nthe instance can be accessed. It is specified in the following form:\nprojects/{project}/global/networks/{network_id}.',
    )
    projectRef: Union[ProjectRef, ProjectRef1] = Field(
        ..., description='The project that this resource belongs to.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The clusterId of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    restoreBackupSource: Optional[RestoreBackupSource] = Field(
        default=None,
        description="Immutable. The source when restoring from a backup. Conflicts with 'restore_continuous_backup_source', both can't be set together.",
    )
    restoreContinuousBackupSource: Optional[RestoreContinuousBackupSource] = Field(
        default=None,
        description="Immutable. The source when restoring via point in time recovery (PITR). Conflicts with 'restore_backup_source', both can't be set together.",
    )


class StartTime(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hours: Optional[int] = Field(
        default=None,
        description='Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.',
    )
    minutes: Optional[int] = Field(
        default=None,
        description='Minutes of hour of day. Currently, only the value 0 is supported.',
    )
    nanos: Optional[int] = Field(
        default=None,
        description='Fractions of seconds in nanoseconds. Currently, only the value 0 is supported.',
    )
    seconds: Optional[int] = Field(
        default=None,
        description='Seconds of minutes of the time. Currently, only the value 0 is supported.',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    backupSource: Optional[List[BackupSourceItem]] = Field(
        default=None, description='Cluster created from backup.'
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    continuousBackupInfo: Optional[List[ContinuousBackupInfoItem]] = Field(
        default=None,
        description='ContinuousBackupInfo describes the continuous backup properties of a cluster.',
    )
    databaseVersion: Optional[str] = Field(
        default=None,
        description="The database engine major version. This is an output-only field and it's populated at the Cluster creation time. This field cannot be changed after cluster creation.",
    )
    encryptionInfo: Optional[List[EncryptionInfoItem]] = Field(
        default=None,
        description='EncryptionInfo describes the encryption information of a cluster or a backup.',
    )
    migrationSource: Optional[List[MigrationSourceItem]] = Field(
        default=None, description='Cluster created via DMS migration.'
    )
    name: Optional[str] = Field(
        default=None, description='The name of the cluster resource.'
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    uid: Optional[str] = Field(
        default=None, description='The system-generated UID of the resource.'
    )


class TimeBasedRetention(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    retentionPeriod: Optional[str] = Field(
        default=None,
        description='The retention period.\nA duration in seconds with up to nine fractional digits, terminated by \'s\'. Example: "3.5s".',
    )


class ValueFrom(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class WeeklySchedule(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    daysOfWeek: Optional[List[str]] = Field(
        default=None,
        description='The days of the week to perform a backup. At least one day of the week must be provided. Possible values: ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"].',
    )
    startTimes: List[StartTime] = Field(
        ...,
        description='The times during the day to start a backup. At least one start time must be provided. The start times are assumed to be in UTC and to be an exact hour (e.g., 04:00:00).',
    )
