# generated by datamodel-codegen:
#   filename:  gkehubfeature_v1beta1.json
#   timestamp: 2024-03-18T21:08:03+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import AwareDatetime, BaseModel, ConfigDict, Field


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class ConfigMembershipRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`\n\nAllowed value: The Google Cloud resource name of a `GKEHubMembership` resource (format: `projects/{{project}}/locations/{{location}}/memberships/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ConfigMembershipRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`\n\nAllowed value: The Google Cloud resource name of a `GKEHubMembership` resource (format: `projects/{{project}}/locations/{{location}}/memberships/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class DefaultConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    mode: Optional[str] = Field(
        default=None,
        description='The logs routing mode Possible values: MODE_UNSPECIFIED, COPY, MOVE',
    )


class FleetScopeLogsConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    mode: Optional[str] = Field(
        default=None,
        description='The logs routing mode Possible values: MODE_UNSPECIFIED, COPY, MOVE',
    )


class Fleetobservability(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    loggingConfig: Optional[LoggingConfig] = Field(
        default=None, description='Fleet Observability Logging-specific spec.'
    )


class LoggingConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    defaultConfig: Optional[DefaultConfig] = Field(
        default=None,
        description='Specified if applying the default routing config to logs not specified in other configs.',
    )
    fleetScopeLogsConfig: Optional[FleetScopeLogsConfig] = Field(
        default=None,
        description='Specified if applying the routing config to all logs for all fleet scopes.',
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class Multiclusteringress(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    configMembershipRef: Union[ConfigMembershipRef, ConfigMembershipRef1]


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='The project for the resource\n\nAllowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='The project for the resource\n\nAllowed value: The Google Cloud resource name of a `Project` resource (format: `projects/{{name}}`).',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ResourceState(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hasResources: Optional[bool] = Field(
        default=None,
        description='Whether this Feature has outstanding resources that need to be cleaned up before it can be disabled.',
    )
    state: Optional[str] = Field(
        default=None,
        description='The current state of the Feature resource in the Hub API. Possible values: STATE_UNSPECIFIED, ENABLING, ACTIVE, DISABLING, UPDATING, SERVICE_UPDATING',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    location: str = Field(..., description='Immutable. The location for the resource')
    projectRef: Union[ProjectRef, ProjectRef1] = Field(
        ..., description='Immutable. The Project that this resource belongs to.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    spec: Optional[Spec1] = Field(
        default=None,
        description='Optional. Hub-wide Feature configuration. If this Feature does not support any Hub-wide configuration, this field may be unused.',
    )


class Spec1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    fleetobservability: Optional[Fleetobservability] = Field(
        default=None, description='Fleet Observability spec.'
    )
    multiclusteringress: Optional[Multiclusteringress] = Field(
        default=None, description='Multicluster Ingress-specific spec.'
    )


class State(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    state: Optional[State1] = Field(
        default=None,
        description='Output only. The "running state" of the Feature in this Hub.',
    )


class State1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    code: Optional[str] = Field(
        default=None,
        description='The high-level, machine-readable status of this Feature. Possible values: CODE_UNSPECIFIED, OK, WARNING, ERROR',
    )
    description: Optional[str] = Field(
        default=None, description='A human-readable description of the current status.'
    )
    updateTime: Optional[str] = Field(
        default=None,
        description='The time this status and any related Feature-specific details were updated. A timestamp in RFC3339 UTC "Zulu" format, with nanosecond resolution and up to nine fractional digits. Examples: "2014-10-02T15:01:23Z" and "2014-10-02T15:01:23.045123456Z"',
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    createTime: Optional[AwareDatetime] = Field(
        default=None, description='Output only. When the Feature resource was created.'
    )
    deleteTime: Optional[AwareDatetime] = Field(
        default=None, description='Output only. When the Feature resource was deleted.'
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    resourceState: Optional[ResourceState] = Field(
        default=None, description='State of the Feature resource itself.'
    )
    state: Optional[State] = Field(
        default=None, description='Output only. The Hub-wide Feature state'
    )
    updateTime: Optional[AwareDatetime] = Field(
        default=None,
        description='Output only. When the Feature resource was last updated.',
    )
