# generated by datamodel-codegen:
#   filename:  datastreamconnectionprofile_v1alpha1.json
#   timestamp: 2024-03-18T21:07:37+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class CaCertificate(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom6] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class CaCertificate1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom7 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class ClientCertificate(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom8] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class ClientCertificate1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom9 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class ClientKey(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom10] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class ClientKey1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom11 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class ForwardSshConnectivity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hostname: str = Field(..., description='Hostname for the SSH tunnel.')
    password: Optional[Union[Password, Password1]] = Field(
        default=None, description='Immutable. SSH password.'
    )
    port: Optional[int] = Field(default=None, description='Port for the SSH tunnel.')
    privateKey: Optional[Union[PrivateKey, PrivateKey1]] = Field(
        default=None, description='Immutable. SSH private key.'
    )
    username: str = Field(..., description='Username for the SSH tunnel.')


class GcsProfile(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    bucket: str = Field(..., description='The Cloud Storage bucket name.')
    rootPath: Optional[str] = Field(
        default=None, description='The root path inside the Cloud Storage bucket.'
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Spec
    status: Optional[Status] = None


class MysqlProfile(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    hostname: str = Field(..., description='Hostname for the MySQL connection.')
    password: Union[Password2, Password3] = Field(
        ..., description='Password for the MySQL connection.'
    )
    port: Optional[int] = Field(
        default=None, description='Port for the MySQL connection.'
    )
    sslConfig: Optional[SslConfig] = Field(
        default=None, description='SSL configuration for the MySQL connection.'
    )
    username: str = Field(..., description='Username for the MySQL connection.')


class OracleProfile(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    connectionAttributes: Optional[Dict[str, str]] = Field(
        default=None, description='Connection string attributes.'
    )
    databaseService: str = Field(..., description='Database for the Oracle connection.')
    hostname: str = Field(..., description='Hostname for the Oracle connection.')
    password: Union[Password4, Password5] = Field(
        ..., description='Password for the Oracle connection.'
    )
    port: Optional[int] = Field(
        default=None, description='Port for the Oracle connection.'
    )
    username: str = Field(..., description='Username for the Oracle connection.')


class Password(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class Password1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom1 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class Password2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom4] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class Password3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom5 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class Password4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom12] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class Password5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom13 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class Password6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom14] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class Password7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom15 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class PostgresqlProfile(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    database: str = Field(..., description='Database for the PostgreSQL connection.')
    hostname: str = Field(..., description='Hostname for the PostgreSQL connection.')
    password: Union[Password6, Password7] = Field(
        ..., description='Password for the PostgreSQL connection.'
    )
    port: Optional[int] = Field(
        default=None, description='Port for the PostgreSQL connection.'
    )
    username: str = Field(..., description='Username for the PostgreSQL connection.')


class PrivateConnectivity(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    privateConnection: str = Field(
        ...,
        description="A reference to a private connection resource. Format: 'projects/{project}/locations/{location}/privateConnections/{name}'.",
    )


class PrivateKey(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: str = Field(
        ...,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: Optional[ValueFrom2] = Field(
        default=None,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class PrivateKey1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    value: Optional[str] = Field(
        default=None,
        description="Value of the field. Cannot be used if 'valueFrom' is specified.",
    )
    valueFrom: ValueFrom3 = Field(
        ...,
        description="Source for the field's value. Cannot be used if 'value' is specified.",
    )


class ProjectRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `name` field of a `Project` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class ProjectRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ..., description='Allowed value: The `name` field of a `Project` resource.'
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class SecretKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: str = Field(..., description='Key that identifies the value to be extracted.')
    name: str = Field(..., description='Name of the Secret to extract a value from.')


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    bigqueryProfile: Optional[Dict[str, Any]] = Field(
        default=None, description='BigQuery warehouse profile.'
    )
    displayName: str = Field(..., description='Display name.')
    forwardSshConnectivity: Optional[ForwardSshConnectivity] = Field(
        default=None, description='Forward SSH tunnel connectivity.'
    )
    gcsProfile: Optional[GcsProfile] = Field(
        default=None, description='Cloud Storage bucket profile.'
    )
    location: str = Field(
        ...,
        description='Immutable. The name of the location this connection profile is located in.',
    )
    mysqlProfile: Optional[MysqlProfile] = Field(
        default=None, description='MySQL database profile.'
    )
    oracleProfile: Optional[OracleProfile] = Field(
        default=None, description='Oracle database profile.'
    )
    postgresqlProfile: Optional[PostgresqlProfile] = Field(
        default=None, description='PostgreSQL database profile.'
    )
    privateConnectivity: Optional[PrivateConnectivity] = Field(
        default=None, description='Private connectivity.'
    )
    projectRef: Union[ProjectRef, ProjectRef1] = Field(
        ..., description='The project that this resource belongs to.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The connectionProfileId of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )


class SslConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    caCertificate: Optional[Union[CaCertificate, CaCertificate1]] = Field(
        default=None,
        description="Immutable. PEM-encoded certificate of the CA that signed the source database\nserver's certificate.",
    )
    caCertificateSet: Optional[bool] = Field(
        default=None, description='Indicates whether the clientKey field is set.'
    )
    clientCertificate: Optional[Union[ClientCertificate, ClientCertificate1]] = Field(
        default=None,
        description="Immutable. PEM-encoded certificate that will be used by the replica to\nauthenticate against the source database server. If this field\nis used then the 'clientKey' and the 'caCertificate' fields are\nmandatory.",
    )
    clientCertificateSet: Optional[bool] = Field(
        default=None,
        description='Indicates whether the clientCertificate field is set.',
    )
    clientKey: Optional[Union[ClientKey, ClientKey1]] = Field(
        default=None,
        description="Immutable. PEM-encoded private key associated with the Client Certificate.\nIf this field is used then the 'client_certificate' and the\n'ca_certificate' fields are mandatory.",
    )
    clientKeySet: Optional[bool] = Field(
        default=None, description='Indicates whether the clientKey field is set.'
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    name: Optional[str] = Field(default=None, description="The resource's name.")
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )


class ValueFrom(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom10(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom11(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom12(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom13(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom14(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom15(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom2(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom3(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom4(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom5(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom6(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom7(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom8(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )


class ValueFrom9(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    secretKeyRef: Optional[SecretKeyRef] = Field(
        default=None,
        description="Reference to a value with the given key in the given Secret in the resource's namespace.",
    )
