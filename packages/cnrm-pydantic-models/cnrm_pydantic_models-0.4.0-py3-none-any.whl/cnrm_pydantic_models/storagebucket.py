# generated by datamodel-codegen:
#   filename:  storagebucket_v1beta1.json
#   timestamp: 2024-03-18T21:08:53+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field


class Action(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    storageClass: Optional[str] = Field(
        default=None,
        description='The target Storage Class of objects affected by this Lifecycle Rule. Supported values include: MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE.',
    )
    type: str = Field(
        ...,
        description='The type of the action of this Lifecycle Rule. Supported values include: Delete, SetStorageClass and AbortIncompleteMultipartUpload.',
    )


class Autoclass(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: bool = Field(
        ...,
        description="While set to true, autoclass automatically transitions objects in your bucket to appropriate storage classes based on each object's access pattern.",
    )


class Condition(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    age: Optional[int] = Field(
        default=None,
        description='Minimum age of an object in days to satisfy this condition.',
    )
    createdBefore: Optional[str] = Field(
        default=None,
        description='Creation date of an object in RFC 3339 (e.g. 2017-06-13) to satisfy this condition.',
    )
    customTimeBefore: Optional[str] = Field(
        default=None,
        description='Creation date of an object in RFC 3339 (e.g. 2017-06-13) to satisfy this condition.',
    )
    daysSinceCustomTime: Optional[int] = Field(
        default=None,
        description='Number of days elapsed since the user-specified timestamp set on an object.',
    )
    daysSinceNoncurrentTime: Optional[int] = Field(
        default=None,
        description='Number of days elapsed since the noncurrent timestamp of an object. This\n\t\t\t\t\t\t\t\t\t\tcondition is relevant only for versioned objects.',
    )
    matchesPrefix: Optional[List[str]] = Field(
        default=None,
        description='One or more matching name prefixes to satisfy this condition.',
    )
    matchesStorageClass: Optional[List[str]] = Field(
        default=None,
        description='Storage Class of objects to satisfy this condition. Supported values include: MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE, STANDARD, DURABLE_REDUCED_AVAILABILITY.',
    )
    matchesSuffix: Optional[List[str]] = Field(
        default=None,
        description='One or more matching name suffixes to satisfy this condition.',
    )
    noncurrentTimeBefore: Optional[str] = Field(
        default=None,
        description='Creation date of an object in RFC 3339 (e.g. 2017-06-13) to satisfy this condition.',
    )
    numNewerVersions: Optional[int] = Field(
        default=None,
        description='Relevant only for versioned objects. The number of newer versions of an object to satisfy this condition.',
    )
    withState: Optional[str] = Field(
        default=None,
        description='Match to live and/or archived objects. Unversioned buckets have only live objects. Supported values include: "LIVE", "ARCHIVED", "ANY".',
    )


class Condition1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    lastTransitionTime: Optional[str] = Field(
        default=None,
        description='Last time the condition transitioned from one status to another.',
    )
    message: Optional[str] = Field(
        default=None,
        description='Human-readable message indicating details about last transition.',
    )
    reason: Optional[str] = Field(
        default=None,
        description="Unique, one-word, CamelCase reason for the condition's last transition.",
    )
    status: Optional[str] = Field(
        default=None,
        description='Status is the status of the condition. Can be True, False, Unknown.',
    )
    type: Optional[str] = Field(
        default=None, description='Type is the type of the condition.'
    )


class Cor(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    maxAgeSeconds: Optional[int] = Field(
        default=None,
        description='The value, in seconds, to return in the Access-Control-Max-Age header used in preflight responses.',
    )
    method: Optional[List[str]] = Field(
        default=None,
        description='The list of HTTP methods on which to include CORS response headers, (GET, OPTIONS, POST, etc) Note: "*" is permitted in the list of methods, and means "any method".',
    )
    origin: Optional[List[str]] = Field(
        default=None,
        description='The list of Origins eligible to receive CORS response headers. Note: "*" is permitted in the list of origins, and means "any Origin".',
    )
    responseHeader: Optional[List[str]] = Field(
        default=None,
        description='The list of HTTP headers other than the simple response headers to give permission for the user-agent to share across domains.',
    )


class CustomPlacementConfig(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    dataLocations: List[str] = Field(
        ...,
        description='Immutable. The list of individual regions that comprise a dual-region bucket. See the docs for a list of acceptable regions. Note: If any of the data_locations changes, it will recreate the bucket.',
    )


class Encryption(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    kmsKeyRef: Union[KmsKeyRef, KmsKeyRef1]


class KmsKeyRef(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: Optional[str] = Field(
        default=None,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: str = Field(
        ...,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class KmsKeyRef1(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    external: str = Field(
        ...,
        description='Allowed value: The `selfLink` field of a `KMSCryptoKey` resource.',
    )
    name: Optional[str] = Field(
        default=None,
        description='Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names',
    )
    namespace: Optional[str] = Field(
        default=None,
        description='Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/',
    )


class LifecycleRuleItem(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    action: Action = Field(
        ...,
        description="The Lifecycle Rule's action configuration. A single block of this type is supported.",
    )
    condition: Condition = Field(
        ..., description="The Lifecycle Rule's condition configuration."
    )


class Logging(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    logBucket: str = Field(..., description='The bucket that will receive log objects.')
    logObjectPrefix: Optional[str] = Field(
        default=None,
        description="The object prefix for log objects. If it's not provided, by default Google Cloud Storage sets this to this bucket's name.",
    )


class Model(BaseModel):
    apiVersion: Optional[str] = Field(
        default=None,
        description='apiVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources',
    )
    kind: Optional[str] = Field(
        default=None,
        description='kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds',
    )
    metadata: Optional[Dict[str, Any]] = None
    spec: Optional[Spec] = None
    status: Optional[Status] = None


class RetentionPolicy(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    isLocked: Optional[bool] = Field(
        default=None,
        description="If set to true, the bucket will be locked and permanently restrict edits to the bucket's retention policy.  Caution: Locking a bucket is an irreversible action.",
    )
    retentionPeriod: int = Field(
        ...,
        description='The period of time, in seconds, that objects in the bucket must be retained and cannot be deleted, overwritten, or archived. The value must be less than 3,155,760,000 seconds.',
    )


class Spec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    autoclass: Optional[Autoclass] = Field(
        default=None, description="The bucket's autoclass configuration."
    )
    bucketPolicyOnly: Optional[bool] = Field(
        default=None,
        description='DEPRECATED. Please use the `uniformBucketLevelAccess` field as this field has been renamed by Google. The `uniformBucketLevelAccess` field will supersede this field.\nEnables Bucket PolicyOnly access to a bucket.',
    )
    cors: Optional[List[Cor]] = Field(
        default=None,
        description="The bucket's Cross-Origin Resource Sharing (CORS) configuration.",
    )
    customPlacementConfig: Optional[CustomPlacementConfig] = Field(
        default=None,
        description="The bucket's custom location configuration, which specifies the individual regions that comprise a dual-region bucket. If the bucket is designated a single or multi-region, the parameters are empty.",
    )
    defaultEventBasedHold: Optional[bool] = Field(
        default=None,
        description='Whether or not to automatically apply an eventBasedHold to new objects added to the bucket.',
    )
    encryption: Optional[Encryption] = Field(
        default=None, description="The bucket's encryption configuration."
    )
    lifecycleRule: Optional[List[LifecycleRuleItem]] = Field(
        default=None, description="The bucket's Lifecycle Rules configuration."
    )
    location: Optional[str] = Field(
        default='US', description='Immutable. The Google Cloud Storage location.'
    )
    logging: Optional[Logging] = Field(
        default=None, description="The bucket's Access & Storage Logs configuration."
    )
    publicAccessPrevention: Optional[str] = Field(
        default=None, description='Prevents public access to a bucket.'
    )
    requesterPays: Optional[bool] = Field(
        default=None, description='Enables Requester Pays on a storage bucket.'
    )
    resourceID: Optional[str] = Field(
        default=None,
        description='Immutable. Optional. The name of the resource. Used for creation and acquisition. When unset, the value of `metadata.name` is used as the default.',
    )
    retentionPolicy: Optional[RetentionPolicy] = Field(
        default=None,
        description="Configuration of the bucket's data retention policy for how long objects in the bucket should be retained.",
    )
    storageClass: Optional[str] = Field(
        default=None,
        description='The Storage Class of the new bucket. Supported values include: STANDARD, MULTI_REGIONAL, REGIONAL, NEARLINE, COLDLINE, ARCHIVE.',
    )
    uniformBucketLevelAccess: Optional[bool] = Field(
        default=None, description='Enables uniform bucket-level access on a bucket.'
    )
    versioning: Optional[Versioning] = Field(
        default=None, description="The bucket's Versioning configuration."
    )
    website: Optional[Website] = Field(
        default=None, description='Configuration if the bucket acts as a website.'
    )


class Status(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    conditions: Optional[List[Condition1]] = Field(
        default=None,
        description="Conditions represent the latest available observation of the resource's current state.",
    )
    observedGeneration: Optional[int] = Field(
        default=None,
        description='ObservedGeneration is the generation of the resource that was most recently observed by the Config Connector controller. If this is equal to metadata.generation, then that means that the current reported status reflects the most recent desired state of the resource.',
    )
    selfLink: Optional[str] = Field(
        default=None, description='The URI of the created resource.'
    )
    url: Optional[str] = Field(
        default=None,
        description='The base URL of the bucket, in the format gs://<bucket-name>.',
    )


class Versioning(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enabled: bool = Field(
        ...,
        description='While set to true, versioning is fully enabled for this bucket.',
    )


class Website(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    mainPageSuffix: Optional[str] = Field(
        default=None,
        description="Behaves as the bucket's directory index where missing objects are treated as potential directories.",
    )
    notFoundPage: Optional[str] = Field(
        default=None,
        description='The custom object to return when a requested resource is not found.',
    )
