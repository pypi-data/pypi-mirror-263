import numpy
from srxraylib.profiles.diaboloid.fqs import single_quartic, single_quartic_modified, quartic_roots


DCBA1 =   [-8745.02188873291, -624.6460852022283, 149.91291022442874, -10.002177259318255, 1.0]
print("\n>> coeffs DCBA1: ", DCBA1)

# https://mathworld.wolfram.com/QuarticFormula.html

def mquartic2(a, b, c, d):
    from numpy import sqrt as Sqrt

    a += 0j
    b += 0j
    c += 0j
    d += 0j

    R = Sqrt(0.25 * a**2 - b )


def mquartic(a, b, c, d):
    from numpy import sqrt as Sqrt

    a += 0j
    b += 0j
    c += 0j
    d += 0j

    sol1 = -a/4. - Sqrt(a**2/4. - (2*b)/3. + (2**(1/3)*(b**2 - 3*a*c + 12*d))/ \
        (3.*(2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)) +  \
        (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)/ \
        (3.*2**(1/3)))/2. - Sqrt(a**2/2. - (4*b)/3. - (2**(1/3)*(b**2 - 3*a*c + 12*d)) /  \
        (3.*(2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)) - \
        (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3) / \
        (3.*2**(1/3)) - (-a**3 + 4*a*b - 8*c)/ \
        (4.*Sqrt(a**2/4. - (2*b)/3. + (2**(1/3)*(b**2 - 3*a*c + 12*d))/ \
        (3.*(2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)) + \
        (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3) / \
        (3.*2**(1/3)))))/2.
    
    sol2 = -a/4. - Sqrt(a**2/4. - (2*b)/3. + \
        (2**(1/3)*(b**2 - 3*a*c + 12*d))/ \
        (3.*(2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)) + \
        (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)/ \
        (3.*2**(1/3)))/2. + Sqrt(a**2/2. - (4*b)/3. - (2**(1/3)*(b**2 - 3*a*c + 12*d))/ \
        (3.*(2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)) - \
        (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)/ \
        (3.*2**(1/3)) - (-a**3 + 4*a*b - 8*c)/ \
        (4.*Sqrt(a**2/4. - (2*b)/3. + (2**(1/3)*(b**2 - 3*a*c + 12*d))/ \
        (3.*(2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)) + \
        (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)/ \
        (3.*2**(1/3)))))/2.

    sol3 = -a/4. + Sqrt(a**2/4. - (2*b)/3. + \
        (2**(1/3)*(b**2 - 3*a*c + 12*d))/ \
        (3.*(2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)) + \
        (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)/ \
        (3.*2**(1/3)))/2. - Sqrt(a**2/2. - (4*b)/3. - (2**(1/3)*(b**2 - 3*a*c + 12*d))/ \
        (3.*(2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)) - \
        (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)/ \
        (3.*2**(1/3)) + (-a**3 + 4*a*b - 8*c)/ \
        (4.*Sqrt(a**2/4. - (2*b)/3. + (2**(1/3)*(b**2 - 3*a*c + 12*d))/ \
        (3.*(2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)) + \
        (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)/ \
        (3.*2**(1/3)))))/2.

    sol4 = -a/4. + Sqrt(a**2/4. - (2*b)/3. + \
        (2**(1/3)*(b**2 - 3*a*c + 12*d))/ \
        (3.*(2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)) + \
        (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)/ \
        (3.*2**(1/3)))/2. + Sqrt(a**2/2. - (4*b)/3. - (2**(1/3)*(b**2 - 3*a*c + 12*d))/ \
        (3.*(2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)) - \
        (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)/ \
        (3.*2**(1/3)) + (-a**3 + 4*a*b - 8*c)/ \
        (4.*Sqrt(a**2/4. - (2*b)/3. + (2**(1/3)*(b**2 - 3*a*c + 12*d))/ \
        (3.*(2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)) + \
        (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d + Sqrt(-4*(b**2 - 3*a*c + 12*d)**3 + (2*b**3 - 9*a*b*c + 27*c**2 + 27*a**2*d - 72*b*d)**2))**(1/3)/ \
        (3.*2**(1/3)))))/2.


    return sol1, sol2, sol3, sol4

if __name__ == "__main__":
    if True:
        import numpy
        h_output2 = numpy.polynomial.polynomial.polyroots([DCBA1[0], DCBA1[1], DCBA1[2], DCBA1[3], DCBA1[4]])
        print("roots: ", h_output2)
        z = h_output2[0] ; print("0 =? ", DCBA1[4] * z ** 4 + DCBA1[3] * z ** 3 + DCBA1[2] * z ** 2 + DCBA1[1] * z + DCBA1[0] )
        z = h_output2[1] ; print("0 =? ", DCBA1[4] * z ** 4 + DCBA1[3] * z ** 3 + DCBA1[2] * z ** 2 + DCBA1[1] * z + DCBA1[0] )
        z = h_output2[2] ; print("0 =? ", DCBA1[4] * z ** 4 + DCBA1[3] * z ** 3 + DCBA1[2] * z ** 2 + DCBA1[1] * z + DCBA1[0] )
        z = h_output2[3] ; print("0 =? ", DCBA1[4] * z ** 4 + DCBA1[3] * z ** 3 + DCBA1[2] * z ** 2 + DCBA1[1] * z + DCBA1[0] )


    if False:

        # out = single_quartic(1.0, AA[k], BB[k], CC[k], DD[k])
        print(DCBA1[4], DCBA1[3], DCBA1[2], DCBA1[1], DCBA1[0])
        h_output = single_quartic(DCBA1[4], DCBA1[3], DCBA1[2], DCBA1[1], DCBA1[0])
        print(">>>> solutions1: ", h_output)

        # print(">>>> solutions1: ", out)
        z0 = h_output[0]
        z1 = h_output[1]
        z2 = h_output[2]
        z3 = h_output[3]

        z = z0;
        print(">>>> result1: ", DCBA1[4] * z ** 4 + DCBA1[3] * z ** 3 + DCBA1[2] * z ** 2 + DCBA1[1] * z + DCBA1[0])
        z = z1;
        print(">>>> result1: ", DCBA1[4] * z ** 4 + DCBA1[3] * z ** 3 + DCBA1[2] * z ** 2 + DCBA1[1] * z + DCBA1[0])
        z = z2;
        print(">>>> result1: ", DCBA1[4] * z ** 4 + DCBA1[3] * z ** 3 + DCBA1[2] * z ** 2 + DCBA1[1] * z + DCBA1[0])
        z = z3;
        print(">>>> result1: ", DCBA1[4] * z ** 4 + DCBA1[3] * z ** 3 + DCBA1[2] * z ** 2 + DCBA1[1] * z + DCBA1[0])



    if False:
        ABCDE = [ 1, -10.002177259318255, 149.91291022442874, -624.6460852022283, -8745.02188873291]
        roots = quartic_roots(ABCDE, modified=1, zero_below=1e-6)
        print("roots: ", roots)
        z0 = roots[0][0] ; print("0 =? ", ABCDE[0] * z0 ** 4 + ABCDE[1] * z0 ** 3 + ABCDE[2] * z0 ** 2 + ABCDE[3] * z0 + ABCDE[4])
        z1 = roots[0][1] ; print("0 =? ", ABCDE[0] * z1 ** 4 + ABCDE[1] * z1 ** 3 + ABCDE[2] * z1 ** 2 + ABCDE[3] * z1 + ABCDE[4])
        z2 = roots[0][2] ; print("0 =? ", ABCDE[0] * z2 ** 4 + ABCDE[1] * z2 ** 3 + ABCDE[2] * z2 ** 2 + ABCDE[3] * z2 + ABCDE[4])
        z3 = roots[0][3] ; print("0 =? ", ABCDE[0] * z3 ** 4 + ABCDE[1] * z3 ** 3 + ABCDE[2] * z3 ** 2 + ABCDE[3] * z3 + ABCDE[4])

        # ABCDE = [1, 7, -806, -1050, 38322]
        #
        # # DCBA1 =   [-8745.02188873291, -624.6460852022283, 149.91291022442874, -10.002177259318255, 1.0]

        # >>> roots
            # array([[-30.76994812-0.j,  -7.60101564+0.j,   6.61999319+0.j,
            #          24.75097057-0.j]])

            # >>> roots = quartic_roots([1, 2, 3, 4, 5])
            # >>> roots
            # array([[-1.28781548-0.85789676j, -1.28781548+0.85789676j,
            #          0.28781548+1.41609308j,  0.28781548-1.41609308j]])
            #
            # >>> roots = quartic_roots([[1, 2, 3, 4, 5],
            #                            [1, 7, -806, -1050, 38322]])
            # >>> roots
            # array([[ -1.28781548-0.85789676j,  -1.28781548+0.85789676j,
            #           0.28781548+1.41609308j,   0.28781548-1.41609308j],
            #        [-30.76994812-0.j        ,  -7.60101564+0.j        ,
            #           6.61999319+0.j        ,  24.75097057-0.j        ]])
            #

        # print(mquartic(ABCDE[1], ABCDE[2], ABCDE[3], ABCDE[4]))
        # print(mquartic(7, -806, -1050, 38322))