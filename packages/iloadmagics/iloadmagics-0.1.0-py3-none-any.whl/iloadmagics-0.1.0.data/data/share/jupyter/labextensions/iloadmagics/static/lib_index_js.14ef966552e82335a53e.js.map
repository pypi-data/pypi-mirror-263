{"version":3,"file":"lib_index_js.14ef966552e82335a53e.js","mappings":"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","sources":["webpack://iloadmagics/./src/index.ts"],"sourcesContent":["import {\n  JupyterFrontEnd,\n  JupyterFrontEndPlugin,\n  LabShell\n} from '@jupyterlab/application';\n\nimport {\n  INotebookTracker,\n  NotebookPanel,\n  NotebookActions,\n} from '@jupyterlab/notebook';\n\n// Import for adding Lumino Widgets to the Notebook Panel\nimport {\n  Widget\n} from '@lumino/widgets';\n\nimport {\n  DOMUtils\n} from '@jupyterlab/apputils';\n\n/**\n * Initialization data for the iloadmagics extension.\n */\n\n// CSS class name for top area panel anchor/image widget\nconst ilambda_Anchor_CSS_CLASS = 'jp-ilambda-Anchor';\n\nlet iloadmagics_dummy_cell_magic = \"%%iCustomMagic\\nprint(\\\"This is a test\\\")\"; // metadata key\n\n// to be improved - let user specify via jupyter lab menu where to look/find appropriate ipython magic classes\nlet iloadmagics_cell_source = \"import iloadmagics\";\n\nconst plugin: JupyterFrontEndPlugin<void> = {\n  id: 'iloadmagics:plugin',\n  description: 'A jupyter lab/notebook front-end extension for dynamically loading ipython magic commands upon kernel startup',\n  autoStart: true,\n  requires: [INotebookTracker],\n  activate: (app: JupyterFrontEnd, notebookTracker: INotebookTracker) => {\n    console.log('JupyterLab extension iloadmagics is activated!');\n\n    // Code for adding logo to top area widget\n    var node;\n    // If the node doesn't exist, create it\n    node = document.createElement(\"div\");\n    node.innerHTML = \"<a href='https://www.lambda.joburg' target='_blank'><img src='https://lambda.joburg/assets/images/index/logo/lambda_logo.svg'></a>\";\n    const widget = new Widget({node}); // constructor for creating a widget from a DOM element    \n    widget.id = DOMUtils.createDomID();\n    widget.id = \"ilambda-logo\";\n    // provide a class for styling\n    widget.addClass(ilambda_Anchor_CSS_CLASS);\n    // add the widget to the DOM\n    app.shell.add(widget, 'top', {rank: 1000}); // rank - move widget to right-most position in top area panel    \n    // Add the element to the DOM in any case\n    let logos = document.getElementsByClassName(ilambda_Anchor_CSS_CLASS);\n    // console.log(logos);\n    // if there are multiple ilambda extensions installed,\n    // each will contribute its own logo, so do the following\n    if (logos.length >= 2) {\n      // remove all the ilambda-logo widgets from the DOM, except the first\n      for (let i = 1; i < logos.length; i++) {\n        logos[i].remove();\n      }\n    }\n\n    // Detect whether a new notebook file has been opened\n    notebookTracker.widgetAdded.connect(()=>{\n      let labShell = app.shell as LabShell;\n      let panel = labShell.currentWidget as NotebookPanel;\n      // Check if panel is defined\n      if (panel) {\n        // continue if panel is revealed/loaded\n        panel.revealed.then(()=>{\n          // Detect whether kernel has been loaded in jupyter shell lab\n          panel!.context.sessionContext.ready.then(()=>{\n            panel.context.sessionContext.session!.kernel!.connectionStatusChanged.connect(()=>{\n              // retrieve/store all the cells from the notebook panel\n              let cellList = panel.content.model?.cells;\n              // get the number of cells in the notebook panel\n              let l = cellList?.length;\n              if (l) {\n                console.log(\"Number of cells\" + l);\n                // get the current/open notebook\n                // store current widget as a variable\n                const current = notebookTracker.currentWidget;\n                // console.log(current);\n                // get contents of notebook\n                let notebook = current?.content;\n                // check if notebook exists\n                if (notebook) {\n                  notebook.activeCellIndex = l;\n                  // insert a new cell at the bottom of the notebook\n                  NotebookActions.insertBelow(notebook);\n                  // set the new bottom cell as the active cell\n                  notebook.activeCellIndex = l+1; // set index to 0\n                  // set the source code for the active cell\n                  if (notebook.activeCell) {\n                    notebook.activeCell.model.sharedModel.setSource(iloadmagics_cell_source);\n                    // run the active cell\n                    app.commands.execute('notebook:run-cell')\n                    // hide/delete the cell\n                    // NotebookActions.deleteCells(notebook);\n                    // Alternative ways to delete cell\n                    app.commands.execute('notebook:delete-cell')\n                    // app.commands.execute('notebook:run-cell-and-insert-below')\n                    // select first cell\n                    notebook.activeCellIndex = 0; // set index to 0\n                    // insert cell above first/top cell\n                    NotebookActions.insertAbove(notebook);\n                    // set selected cell to the new cell index\n                    notebook.activeCellIndex = 0; // set index to 0\n                    notebook.activeCell.model.sharedModel.setSource(iloadmagics_dummy_cell_magic);\n                  }\n                }\n              }              \n            });\n          });\n        });\n      }\n    });\n  }\n};\n\nexport default plugin;\n"],"names":[],"sourceRoot":""}