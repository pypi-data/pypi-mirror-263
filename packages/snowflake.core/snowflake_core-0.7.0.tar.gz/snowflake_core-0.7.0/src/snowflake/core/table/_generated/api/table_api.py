# coding: utf-8

"""
    Snowflake Table API

    The Snowflake Table API is a REST API that you can use to access, update, and perform certain actions on Tables resource in a Snowflake database.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import logging

from typing_extensions import Annotated

from pydantic import StrictBool, StrictInt, StrictStr, constr, validator

from typing import Any, Dict, List, Optional

from snowflake.core.table._generated.models.success_response import SuccessResponse
from snowflake.core.table._generated.models.table import Table

from snowflake.core._internal.pydantic_compatibility import StrictBool, StrictInt, StrictStr, constr, validate_arguments, ValidationError, validator
from snowflake.core._internal.utils import ApiClientType

from snowflake.core.table._generated.api_client import ApiClient
from snowflake.core.exceptions import (  # noqa: F401
    _APITypeError,
    _APIValueError
)

logger  = logging.getLogger(__name__)

class TableApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, root, resource_class, bridge_client):
        self._root = root
        self._rest_client = ApiClient.get_default(root)
        self._resource_class = resource_class
        self._bridge_client = bridge_client
        self._chosen_client_type = ApiClientType.NONE

    @property
    def api_client(self):
        """
            chosen_client is the client we chose , either bridge or rest
            new_chosen_client is the client we want to choose under the current situation ( value of _supports_rest_api + _can_use_rest_api )
            We will log the change if we want to choose another client instead of the current one
        """
        if self._resource_class._supports_rest_api and self._root._can_use_rest_api:
            chosen_client = self._rest_client
            new_chosen_client = ApiClientType.REST
        else:
            chosen_client = self._bridge_client
            new_chosen_client = ApiClientType.BRIDGE

        if new_chosen_client != self._chosen_client_type:
            self._chosen_client_type = new_chosen_client
            logger.info("Going to use client-%s for this resource", new_chosen_client.name)
        return chosen_client

    @validate_arguments
    def create_or_update_table(self, database : constr(strict=True), var_schema : constr(strict=True), name : constr(strict=True), table : Table, **kwargs) -> SuccessResponse:  # noqa: E501
        """Create a (or alter an existing) table.  # noqa: E501

        Create a (or alter an existing) table. Even if the operation is just an alter, the full property set must be provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_or_update_table(database, var_schema, name, table, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: str
        :param var_schema: (required)
        :type var_schema: str
        :param name: (required)
        :type name: str
        :param table: (required)
        :type table: Table
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_or_update_table_with_http_info(database, var_schema, name, table, **kwargs)  # noqa: E501

    @validate_arguments
    def create_or_update_table_with_http_info(self, database : constr(strict=True), var_schema : constr(strict=True), name : constr(strict=True), table : Table, **kwargs):  # noqa: E501
        """Create a (or alter an existing) table.  # noqa: E501

        Create a (or alter an existing) table. Even if the operation is just an alter, the full property set must be provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_or_update_table_with_http_info(database, var_schema, name, table, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: str
        :param var_schema: (required)
        :type var_schema: str
        :param name: (required)
        :type name: str
        :param table: (required)
        :type table: Table
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'name',
            'table'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_or_update_table" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['table']:
            _body_params = _params['table']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '201': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/api/v2/databases/{database}/schemas/{schema}/tables/{name}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def create_table(self, database : constr(strict=True), var_schema : constr(strict=True), table : Table, create_mode : Optional[StrictStr] = None, as_select : Optional[StrictStr] = None, template_query : Optional[StrictStr] = None, like_table : Optional[StrictStr] = None, clone_table : Optional[StrictStr] = None, copy_grants : Optional[StrictBool] = None, undelete : Optional[StrictBool] = None, **kwargs) -> SuccessResponse:  # noqa: E501
        """Create a table  # noqa: E501

        Create a table.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_table(database, var_schema, table, create_mode, as_select, template_query, like_table, clone_table, copy_grants, undelete, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: str
        :param var_schema: (required)
        :type var_schema: str
        :param table: (required)
        :type table: Table
        :param create_mode:
        :type create_mode: str
        :param as_select:
        :type as_select: str
        :param template_query:
        :type template_query: str
        :param like_table:
        :type like_table: str
        :param clone_table:
        :type clone_table: str
        :param copy_grants:
        :type copy_grants: bool
        :param undelete:
        :type undelete: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.create_table_with_http_info(database, var_schema, table, create_mode, as_select, template_query, like_table, clone_table, copy_grants, undelete, **kwargs)  # noqa: E501

    @validate_arguments
    def create_table_with_http_info(self, database : constr(strict=True), var_schema : constr(strict=True), table : Table, create_mode : Optional[StrictStr] = None, as_select : Optional[StrictStr] = None, template_query : Optional[StrictStr] = None, like_table : Optional[StrictStr] = None, clone_table : Optional[StrictStr] = None, copy_grants : Optional[StrictBool] = None, undelete : Optional[StrictBool] = None, **kwargs):  # noqa: E501
        """Create a table  # noqa: E501

        Create a table.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_table_with_http_info(database, var_schema, table, create_mode, as_select, template_query, like_table, clone_table, copy_grants, undelete, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: str
        :param var_schema: (required)
        :type var_schema: str
        :param table: (required)
        :type table: Table
        :param create_mode:
        :type create_mode: str
        :param as_select:
        :type as_select: str
        :param template_query:
        :type template_query: str
        :param like_table:
        :type like_table: str
        :param clone_table:
        :type clone_table: str
        :param copy_grants:
        :type copy_grants: bool
        :param undelete:
        :type undelete: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'table',
            'create_mode',
            'as_select',
            'template_query',
            'like_table',
            'clone_table',
            'copy_grants',
            'undelete'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_table" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']

        # process the query parameters
        _query_params = []
        if _params.get('create_mode') is not None:  # noqa: E501
            _query_params.append(('createMode', _params['create_mode']))
        if _params.get('as_select') is not None:  # noqa: E501
            _query_params.append(('as_select', _params['as_select']))
        if _params.get('template_query') is not None:  # noqa: E501
            _query_params.append(('template_query', _params['template_query']))
        if _params.get('like_table') is not None:  # noqa: E501
            _query_params.append(('like_table', _params['like_table']))
        if _params.get('clone_table') is not None:  # noqa: E501
            _query_params.append(('clone_table', _params['clone_table']))
        if _params.get('copy_grants') is not None:  # noqa: E501
            _query_params.append(('copy_grants', _params['copy_grants']))
        if _params.get('undelete') is not None:  # noqa: E501
            _query_params.append(('undelete', _params['undelete']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None
        if _params['table']:
            _body_params = _params['table']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '201': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '409': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/api/v2/databases/{database}/schemas/{schema}/tables', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_table(self, database : constr(strict=True), var_schema : constr(strict=True), name : constr(strict=True), **kwargs) -> SuccessResponse:  # noqa: E501
        """Delete a table  # noqa: E501

        Delete a table with the given name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_table(database, var_schema, name, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: str
        :param var_schema: (required)
        :type var_schema: str
        :param name: (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_table_with_http_info(database, var_schema, name, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_table_with_http_info(self, database : constr(strict=True), var_schema : constr(strict=True), name : constr(strict=True), **kwargs):  # noqa: E501
        """Delete a table  # noqa: E501

        Delete a table with the given name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_table_with_http_info(database, var_schema, name, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: str
        :param var_schema: (required)
        :type var_schema: str
        :param name: (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_table" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/api/v2/databases/{database}/schemas/{schema}/tables/{name}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def fetch_effective_parameters(self, database : constr(strict=True), var_schema : constr(strict=True), name : constr(strict=True), **kwargs) -> Dict[str, object]:  # noqa: E501
        """Fetch the effective parameters of a table.  # noqa: E501

        Fetch the effective parameters of a table.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_effective_parameters(database, var_schema, name, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: str
        :param var_schema: (required)
        :type var_schema: str
        :param name: (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Dict[str, object]
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_effective_parameters_with_http_info(database, var_schema, name, **kwargs)  # noqa: E501

    @validate_arguments
    def fetch_effective_parameters_with_http_info(self, database : constr(strict=True), var_schema : constr(strict=True), name : constr(strict=True), **kwargs):  # noqa: E501
        """Fetch the effective parameters of a table.  # noqa: E501

        Fetch the effective parameters of a table.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_effective_parameters_with_http_info(database, var_schema, name, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: str
        :param var_schema: (required)
        :type var_schema: str
        :param name: (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Dict[str, object], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_effective_parameters" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Dict[str, object]",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/api/v2/databases/{database}/schemas/{schema}/tables/{name}/parameters/effective', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def fetch_table(self, database : constr(strict=True), var_schema : constr(strict=True), name : constr(strict=True), deep : Optional[StrictBool] = None, **kwargs) -> Table:  # noqa: E501
        """Fetch a table.  # noqa: E501

        Fetch a Table using the SHOW command output.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_table(database, var_schema, name, deep, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: str
        :param var_schema: (required)
        :type var_schema: str
        :param name: (required)
        :type name: str
        :param deep:
        :type deep: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Table
        """
        kwargs['_return_http_data_only'] = True
        return self.fetch_table_with_http_info(database, var_schema, name, deep, **kwargs)  # noqa: E501

    @validate_arguments
    def fetch_table_with_http_info(self, database : constr(strict=True), var_schema : constr(strict=True), name : constr(strict=True), deep : Optional[StrictBool] = None, **kwargs):  # noqa: E501
        """Fetch a table.  # noqa: E501

        Fetch a Table using the SHOW command output.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.fetch_table_with_http_info(database, var_schema, name, deep, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: str
        :param var_schema: (required)
        :type var_schema: str
        :param name: (required)
        :type name: str
        :param deep:
        :type deep: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Table, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'name',
            'deep'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method fetch_table" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []
        if _params.get('deep') is not None:  # noqa: E501
            _query_params.append(('deep', _params['deep']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "Table",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/api/v2/databases/{database}/schemas/{schema}/tables/{name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_tables(self, database : constr(strict=True), var_schema : constr(strict=True), like : Optional[StrictStr] = None, starts_with : Optional[StrictStr] = None, show_limit : Optional[StrictInt] = None, from_name : Optional[StrictStr] = None, history : Optional[StrictBool] = None, deep : Optional[StrictBool] = None, **kwargs) -> List[Table]:  # noqa: E501
        """List tables  # noqa: E501

        Lists the tables under the database and schema.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_tables(database, var_schema, like, starts_with, show_limit, from_name, history, deep, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: str
        :param var_schema: (required)
        :type var_schema: str
        :param like:
        :type like: str
        :param starts_with:
        :type starts_with: str
        :param show_limit:
        :type show_limit: int
        :param from_name:
        :type from_name: str
        :param history:
        :type history: bool
        :param deep:
        :type deep: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[Table]
        """
        kwargs['_return_http_data_only'] = True
        return self.list_tables_with_http_info(database, var_schema, like, starts_with, show_limit, from_name, history, deep, **kwargs)  # noqa: E501

    @validate_arguments
    def list_tables_with_http_info(self, database : constr(strict=True), var_schema : constr(strict=True), like : Optional[StrictStr] = None, starts_with : Optional[StrictStr] = None, show_limit : Optional[StrictInt] = None, from_name : Optional[StrictStr] = None, history : Optional[StrictBool] = None, deep : Optional[StrictBool] = None, **kwargs):  # noqa: E501
        """List tables  # noqa: E501

        Lists the tables under the database and schema.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_tables_with_http_info(database, var_schema, like, starts_with, show_limit, from_name, history, deep, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: str
        :param var_schema: (required)
        :type var_schema: str
        :param like:
        :type like: str
        :param starts_with:
        :type starts_with: str
        :param show_limit:
        :type show_limit: int
        :param from_name:
        :type from_name: str
        :param history:
        :type history: bool
        :param deep:
        :type deep: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[Table], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'like',
            'starts_with',
            'show_limit',
            'from_name',
            'history',
            'deep'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_tables" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']

        # process the query parameters
        _query_params = []
        if _params.get('like') is not None:  # noqa: E501
            _query_params.append(('like', _params['like']))
        if _params.get('starts_with') is not None:  # noqa: E501
            _query_params.append(('startsWith', _params['starts_with']))
        if _params.get('show_limit') is not None:  # noqa: E501
            _query_params.append(('showLimit', _params['show_limit']))
        if _params.get('from_name') is not None:  # noqa: E501
            _query_params.append(('fromName', _params['from_name']))
        if _params.get('history') is not None:  # noqa: E501
            _query_params.append(('history', _params['history']))
        if _params.get('deep') is not None:  # noqa: E501
            _query_params.append(('deep', _params['deep']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "List[Table]",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/api/v2/databases/{database}/schemas/{schema}/tables', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def rename_table(self, database : constr(strict=True), var_schema : constr(strict=True), name : constr(strict=True), new_name : StrictStr, **kwargs) -> SuccessResponse:  # noqa: E501
        """Rename a table  # noqa: E501

        Rename a table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.rename_table(database, var_schema, name, new_name, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: str
        :param var_schema: (required)
        :type var_schema: str
        :param name: (required)
        :type name: str
        :param new_name: (required)
        :type new_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.rename_table_with_http_info(database, var_schema, name, new_name, **kwargs)  # noqa: E501

    @validate_arguments
    def rename_table_with_http_info(self, database : constr(strict=True), var_schema : constr(strict=True), name : constr(strict=True), new_name : StrictStr, **kwargs):  # noqa: E501
        """Rename a table  # noqa: E501

        Rename a table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.rename_table_with_http_info(database, var_schema, name, new_name, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: str
        :param var_schema: (required)
        :type var_schema: str
        :param name: (required)
        :type name: str
        :param new_name: (required)
        :type new_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'name',
            'new_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method rename_table" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []
        if _params.get('new_name') is not None:  # noqa: E501
            _query_params.append(('new_name', _params['new_name']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/api/v2/databases/{database}/schemas/{schema}/tables/{name}:rename', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def resume_recluster(self, database : constr(strict=True), var_schema : constr(strict=True), name : constr(strict=True), **kwargs) -> SuccessResponse:  # noqa: E501
        """Resume recluster of a table  # noqa: E501

        Resume recluster of a table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.resume_recluster(database, var_schema, name, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: str
        :param var_schema: (required)
        :type var_schema: str
        :param name: (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.resume_recluster_with_http_info(database, var_schema, name, **kwargs)  # noqa: E501

    @validate_arguments
    def resume_recluster_with_http_info(self, database : constr(strict=True), var_schema : constr(strict=True), name : constr(strict=True), **kwargs):  # noqa: E501
        """Resume recluster of a table  # noqa: E501

        Resume recluster of a table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.resume_recluster_with_http_info(database, var_schema, name, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: str
        :param var_schema: (required)
        :type var_schema: str
        :param name: (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resume_recluster" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/api/v2/databases/{database}/schemas/{schema}/tables/{name}:resume_recluster', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def suspend_recluster(self, database : constr(strict=True), var_schema : constr(strict=True), name : constr(strict=True), **kwargs) -> SuccessResponse:  # noqa: E501
        """Suspend recluster of a table  # noqa: E501

        Suspend recluster of a table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.suspend_recluster(database, var_schema, name, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: str
        :param var_schema: (required)
        :type var_schema: str
        :param name: (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.suspend_recluster_with_http_info(database, var_schema, name, **kwargs)  # noqa: E501

    @validate_arguments
    def suspend_recluster_with_http_info(self, database : constr(strict=True), var_schema : constr(strict=True), name : constr(strict=True), **kwargs):  # noqa: E501
        """Suspend recluster of a table  # noqa: E501

        Suspend recluster of a table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.suspend_recluster_with_http_info(database, var_schema, name, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: str
        :param var_schema: (required)
        :type var_schema: str
        :param name: (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method suspend_recluster" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/api/v2/databases/{database}/schemas/{schema}/tables/{name}:suspend_recluster', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def swap_with(self, database : constr(strict=True), var_schema : constr(strict=True), name : constr(strict=True), to_swap_table_name : StrictStr, **kwargs) -> SuccessResponse:  # noqa: E501
        """Swap with another table  # noqa: E501

        Swap with another table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.swap_with(database, var_schema, name, to_swap_table_name, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: str
        :param var_schema: (required)
        :type var_schema: str
        :param name: (required)
        :type name: str
        :param to_swap_table_name: (required)
        :type to_swap_table_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SuccessResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.swap_with_with_http_info(database, var_schema, name, to_swap_table_name, **kwargs)  # noqa: E501

    @validate_arguments
    def swap_with_with_http_info(self, database : constr(strict=True), var_schema : constr(strict=True), name : constr(strict=True), to_swap_table_name : StrictStr, **kwargs):  # noqa: E501
        """Swap with another table  # noqa: E501

        Swap with another table  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.swap_with_with_http_info(database, var_schema, name, to_swap_table_name, async_req=True)
        >>> result = thread.get()

        :param database: (required)
        :type database: str
        :param var_schema: (required)
        :type var_schema: str
        :param name: (required)
        :type name: str
        :param to_swap_table_name: (required)
        :type to_swap_table_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SuccessResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'database',
            'var_schema',
            'name',
            'to_swap_table_name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise _APITypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method swap_with" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['database']:
            _path_params['database'] = _params['database']
        if _params['var_schema']:
            _path_params['schema'] = _params['var_schema']
        if _params['name']:
            _path_params['name'] = _params['name']

        # process the query parameters
        _query_params = []
        if _params.get('to_swap_table_name') is not None:  # noqa: E501
            _query_params.append(('to_swap_table_name', _params['to_swap_table_name']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))

        # process the form parameters
        _form_params = []
        _files = {}

        # process the body parameter
        _body_params = None

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            '200': "SuccessResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '403': "ErrorResponse",
            '404': "ErrorResponse",
            '405': "ErrorResponse",
            '500': "ErrorResponse",
            '503': "ErrorResponse",
            '504': "ErrorResponse",
        }

        return self.api_client.call_api(
            '/api/v2/databases/{database}/schemas/{schema}/tables/{name}:swapwith', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
