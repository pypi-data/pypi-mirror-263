# ----------------------------------
# Auto-generated by chiplet
# Target: {{ name }}:{{ target }}
# ----------------------------------

FROM {{ base }} AS {{ target }}

{%- if is_base_image %}

# Setup environment variables
ENV CHIPLET_PROJECT {{ name }}
ENV CHIPLET_PATH {{ workdir|default('/app/sb-chiplet') }}
ENV CHIPLET_ENV {{ chiplet_env }}

ENV DEBIAN_FRONTEND="noninteractive"
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ENV PYTHONWARNINGS ignore

# Install packages with cache mounting for faster builds
# Cache mounts allow us to re-use package caches to avoid needing to download on every build
ENV PIP_CACHE_DIR /var/cache/pip
ENV CONDA_PKGS_DIRS /var/cache/conda/pkgs

{%- endif %}

USER root

{%- if system|length > 0 %}

# Install chiplet-specific system packages
RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt \
    apt-get -y update \
    && apt-get -y --no-install-recommends install \
{%- for package in system %}
    {{ package }} \
{%- endfor %}
    && echo "system install complete"

{%- endif %}

{%- if is_base_image %}

# Upgrade pip
RUN pip install --upgrade pip
{%- endif %}

{%- if conda|length > 0 %}

# Install mamba
RUN --mount=type=cache,target=${CONDA_PKGS_DIRS}  \
    conda install -yv mamba -c conda-forge \
    && echo "installed mamba"

RUN --mount=type=cache,target=${CONDA_PKGS_DIRS}  \
    mamba install -yv \
{%- for package in conda %}
    {{ package }} \
{%- endfor %}
    && echo "conda/mamba install complete"
{%- endif %}

{%- if pip|length > 0 %}

RUN --mount=type=cache,target=${PIP_CACHE_DIR} \
    pip install --cache-dir ${PIP_CACHE_DIR} \
{%- for package in pip %}
    "{{ package }}" \
{%- endfor %}
    && echo "pip install complete"
{%- endif %}

{%- if requirements|length > 0 %}

{%- for package in requirements %}
COPY {{ package }} /tmp/reqs/{{ package }}
{%- endfor %}
RUN --mount=type=cache,target=${PIP_CACHE_DIR} \
    pip install --upgrade pip \
{%- for package in requirements %}
    && pip install -r /tmp/reqs/{{ package }} \
{%- endfor %}
    && echo "pip requirements install complete"
{%- endif %}

WORKDIR $CHIPLET_PATH
{% if add_mounts is defined and add_mounts|length > 0 %}
# Add extra files
{%- for src, dest in add_mounts %}
ADD {{ src }} {{ dest }}
{%- endfor %}
{% endif %}
{%- if run|length > 0 %}
# Run commands
RUN echo "running commands"
{%- for cmd in run %}
RUN --mount=type=cache,target=${CONDA_PKGS_DIRS} \
    --mount=type=cache,target=${PIP_CACHE_DIR} \
    {{ cmd }}
{%- endfor %}
RUN echo "run commands complete"
{%- endif %}
{%- if is_prod %}

# Cleanup apt and pip packages in prod
RUN apt-get -y autoclean \
    && apt-get -y autoremove \
    && rm -rf /var/lib/apt/lists/* \
    && rm -rf ${PIP_CACHE_DIR} \
    && rm -rf ${CONDA_PKGS_DIRS} \
    && rm -rf /tmp/reqs \
    && echo "pip cleanup complete"
{%- endif %}
{%- if conda|length > 0 and is_prod %}

# Cleanup conda in prod
RUN mamba clean -ya && echo "mamba cleanup complete"
{%- endif %}
{%- if env|length > 0 %}

# Set environment variables
{% for key, value in env.items() -%}
ENV {{ key }}={{ value }}
{% endfor %}
{%- endif %}
{%- if entrypoint|length > 0 %}

ENTRYPOINT [{%- for cmd in entrypoint %}"{{ cmd }}"{% if not loop.last %}, {% endif %}{%- endfor %}]
{%- endif %}
{%- if command|length > 0 %}

CMD [{%- for cmd in command %}"{{ cmd }}"{% if not loop.last %}, {% endif %}{%- endfor %}]
{%- endif %}

# Bit of a hack - set the user to the ray user from base ray image, could consider just staying root
USER 1000


