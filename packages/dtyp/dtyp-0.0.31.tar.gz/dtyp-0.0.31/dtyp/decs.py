# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_decs.ipynb.

# %% auto 0
__all__ = ['new', 'setkeywords']

# %% ../nbs/07_decs.ipynb 6
from inspect import Signature, Parameter, get_annotations, _ParameterKind as ParamKind, _empty as Empty
from functools import wraps, partial
from enum import EnumMeta

# %% ../nbs/07_decs.ipynb 8
from types import NoneType, WrapperDescriptorType, FunctionType, MethodWrapperType
from typing import (
    Any, Self, Type, Callable, TypeVar, ParamSpec, TypeGuard, TypedDict,
    ParamSpecArgs, ParamSpecKwargs, get_args, _UnionGenericAlias
)

# %% ../nbs/07_decs.ipynb 10
#| export


# %% ../nbs/07_decs.ipynb 12
#| export


# %% ../nbs/07_decs.ipynb 14
from .cons import (__MODULE__, __DOC__, __ANNOTATIONS__, __NAME__, __QUALNAME__)
from .atyp import T, K
from .util import wrapper_signature_update
from .sigs import typed_dict_signature
from .tdct import typed_dict_func
from .dcls import typedict, dtyp

# %% ../nbs/07_decs.ipynb 17
def new(d: T, **kwargs: K):
    '''A decorator for creating new typedict subclasses from a 
    TypedDict definition with specified defaults.

    Parameters
    ----------
    d : TypedDict
        The TypedDict definition to base the subclass on.
    
    __force_defaults : bool, default: False
        Whether or not to force defaults, which includes setting `None` 
        for optional parameters.
        
    __varpos: bool, default: True
        Whether or not to include `*args` if not found in the annotations.

    __varkws: bool: default True
        Whether or not to include `**kwargs` if not found in the annotations.
        
    __return_annot: type, optional
        The type for the return value, which might not be specified in the 
        extracted annotaitons.
        
    __rescue_values: dict, optional
        The type or default value ot use if the attempt to initiate a default
        value from the type annotation fails.
        
    __ignore_values: dict, optional
        The parameter name or types to ignore when attempting to initiate a
        default value from the type annotation.
        
    __use_optionals : bool, default: True
        Whether or not to include optional parameters in the signature.
        
    **kwargs : TypedDict
        Default values for the TypedDict fields.

    Returns
    -------
    Callable
        A decorator that when applied to a class, modifies it to be a typedict subclass.
    '''
    
    def decorator(func: Callable):
        '''A decorator for functions to automatically fill in TypedDict 
        based on its signature and provided defaults.

        Parameters
        ----------
        d : TypedDict
            The TypedDict definition to base the argument filling on.
        **kwargs : TypedDict
            Default values for the TypedDict fields.

        Returns
        -------
        Callable
            A decorator that when applied to a function, wraps it so that its keyword 
            arguments are filled in based on the TypedDict and defaults.
        '''
        __non = kwargs.pop('__non', True)
        signature = typed_dict_signature(d, **kwargs)
        
        @wraps(typedict, assigned = (__MODULE__, __NAME__, __QUALNAME__, __DOC__), updated=())
        class wrapper(typedict, __dct=d, __sig=signature, __non=__non, __subclass=True):
            ...
        wrapper.__signature__ = signature
        wrapper = wrapper_signature_update(wrapper, signature, d)
        return wrapper
    
    return decorator

# %% ../nbs/07_decs.ipynb 20
def setkeywords(d: T, **kwargs: K):
    
    def decorator(func: Callable):
        dropnones = kwargs.pop('__non', True)
        signature = typed_dict_signature(d, **kwargs)
        construct = typed_dict_func(d, signature, dropnones)
        
        @wraps(func, assigned = (__MODULE__, __NAME__, __QUALNAME__, __DOC__))
        def wrapper(**kwargs: Type[d]) -> Type[d]:
            kwds = construct(**kwargs)
            return d(**kwds)
        wrapper.__signature__ = signature
        wrapper = wrapper_signature_update(wrapper, signature, d)
        return wrapper
    
    return decorator
