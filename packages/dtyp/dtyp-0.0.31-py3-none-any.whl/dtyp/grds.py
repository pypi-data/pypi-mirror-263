# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_grds.ipynb.

# %% auto 0
__all__ = ['isnone', 'notnone', 'istype', 'isdict', 'isparam', 'isvarg', 'isvkws', 'issig', 'ispsa', 'ispsk', 'isoptional',
           'isenum', 'isdunder', 'ismangled', 'istypeddictmeta', 'hasvarg', 'hasvkws']

# %% ../nbs/02_grds.ipynb 6
from inspect import Signature, Parameter, get_annotations, _ParameterKind as ParamKind, _empty as Empty
from functools import wraps, partial
from enum import EnumMeta

# %% ../nbs/02_grds.ipynb 8
from types import NoneType, WrapperDescriptorType, FunctionType, MethodWrapperType
from typing import (
    Any, Self, Type, Callable, TypeVar, ParamSpec, TypeGuard, TypedDict,
    ParamSpecArgs, ParamSpecKwargs, get_args, _UnionGenericAlias, _TypedDictMeta
)

# %% ../nbs/02_grds.ipynb 10
#| export


# %% ../nbs/02_grds.ipynb 12
#| export


# %% ../nbs/02_grds.ipynb 14
from .cons import __NAME__
from .atyp import T

# %% ../nbs/02_grds.ipynb 16
def isnone(x) -> TypeGuard[None]:
    '''Check if `x` is `None`'''
    return x is None

def notnone(x) -> TypeGuard[Any]:
    '''Check if `x` is not `None`'''
    return not isnone(x)

def istype(x) -> TypeGuard[type]:
    '''Check if `x` is a `type`'''
    return isinstance(x, type)

def isdict(x) -> TypeGuard[dict]:
    '''Check if `x` is a `dict`'''
    return isinstance(x, dict)

def isparam(x) -> TypeGuard[Parameter]:
    '''Check if `x` is a `Parameter`'''
    return isinstance(x, Parameter)

def isvarg(x) -> TypeGuard[Parameter.VAR_POSITIONAL]:
    '''Check if `x` is a parameter of `Parameter.VAR_POSITIONAL` kind.'''
    return isparam(x) and x.kind == Parameter.VAR_POSITIONAL

def isvkws(x) -> TypeGuard[Parameter.VAR_KEYWORD]:
    '''Check if `x` is a parameter of `Parameter.VAR_KEYWORD` kind.'''
    return isparam(x) and x.kind == Parameter.VAR_KEYWORD

def issig(x) -> TypeGuard[Signature]:
    '''Check if `x` is a `Signature`'''
    return isinstance(x, Signature)

def ispsa(x) -> TypeGuard[ParamSpecArgs]:
    '''Check if `x` is an instance of `ParamSpecArgs` i.e. `P.args`'''
    return isinstance(x, ParamSpecArgs)

def ispsk(x) -> TypeGuard[ParamSpecKwargs]:
    '''Check if `x` is an instance of `ParamSpecKwargs` i.e. `P.kwargs`'''
    return isinstance(x, ParamSpecKwargs)

def isoptional(x) -> TypeGuard[T | None]:
    "Check if `x` is an optional type"
    isname = getattr(x, __NAME__, None) == 'Optional'
    isgenr = isinstance(x, _UnionGenericAlias)
    args = get_args(x)
    isnone = False if not len(args) else args[-1] == NoneType
    optspec = str(getattr(x, '__species__', None)) == 'opt'
    hasnone = NoneType in getattr(x, '__usetypes__', lambda : ())()
    return (isname and isgenr and isnone) or (optspec or hasnone)

def isenum(x) -> TypeGuard[EnumMeta]:
    "Check if `x` is an `Enum` type"
    return isinstance(x, EnumMeta)

def isdunder(s: str) -> TypeGuard[str]:
    return s.startswith('__') and s.endswith('__')

def ismangled(k: str, s: str) -> TypeGuard[str]:
    beg = f'_{k}'
    end = s.split(beg)[-1]
    return s.startswith(beg) and s.endswith(end) and end.startswith('__')

def istypeddictmeta(x) -> TypeGuard[_TypedDictMeta]:
    "Check if `x` is an `_TypedDictMeta` type"
    return isinstance(x, _TypedDictMeta)

# %% ../nbs/02_grds.ipynb 18
def hasvarg(spec: Signature | dict[str, Parameter]) -> bool:
    '''Check if the signature has a VAR_POSITIONAL parameter.'''
    if issig(spec): return any((isvarg(p) for p in spec.parameters.values()))
    if isdict(spec): return any((isvarg(p) for p in spec.values()))
    return any((isvarg(p) for p in spec))

def hasvkws(spec: Signature | dict[str, Parameter]) -> bool:
    '''Check if the signature has a VAR_KEYWORD parameter.'''
    if issig(spec): return any((isvkws(p) for p in spec.parameters.values()))
    if isdict(spec): return any((isvkws(p) for p in spec.values()))
    return any((isvkws(p) for p in spec))
