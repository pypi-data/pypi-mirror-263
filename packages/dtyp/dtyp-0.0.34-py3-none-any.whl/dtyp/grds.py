# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_grds.ipynb.

# %% auto 0
__all__ = ['iscls', 'isnone', 'notnone', 'istype', 'isdict', 'isparam', 'isvarg', 'isvkws', 'issig', 'ispsa', 'ispsk', 'isenum',
           'is_optional_ducktype', 'is_optional', 'isoptional', 'istypeddictmeta', 'isdunder', 'ismangled',
           'not_class_key', 'hasvarg', 'hasvkws']

# %% ../nbs/02_grds.ipynb 6
from enum import Enum, EnumMeta
from inspect import (isclass, Signature, Parameter)
from functools import wraps

# %% ../nbs/02_grds.ipynb 8
from types import NoneType
from typing import (
    Any, Callable, TypeGuard, ParamSpecArgs, ParamSpecKwargs, 
    get_args, _TypedDictMeta, _UnionGenericAlias,
)

# %% ../nbs/02_grds.ipynb 10
#| export


# %% ../nbs/02_grds.ipynb 12
#| export


# %% ../nbs/02_grds.ipynb 14
from .cons import (U1, U2, NIL, OPT, __NAME__, __SPECIES__, __USETYPES__)
from .atyp import T

# %% ../nbs/02_grds.ipynb 17
def iscls(x) -> TypeGuard[Callable]:
    '''Check if `x` is a class'''
    return isclass(x)

def isnone(x) -> TypeGuard[None]:
    '''Check if `x` is `None`'''
    return x is None

def notnone(x) -> TypeGuard[Any]:
    '''Check if `x` is not `None`'''
    return not isnone(x)

def istype(x) -> TypeGuard[type]:
    '''Check if `x` is a `type`'''
    return isinstance(x, type)

def isdict(x) -> TypeGuard[dict]:
    '''Check if `x` is a `dict`'''
    return isinstance(x, dict)

def isparam(x) -> TypeGuard[Parameter]:
    '''Check if `x` is a `Parameter`'''
    return isinstance(x, Parameter)

def isvarg(x) -> TypeGuard[Parameter.VAR_POSITIONAL]:
    '''Check if `x` is a parameter of `Parameter.VAR_POSITIONAL` kind.'''
    return isparam(x) and x.kind == Parameter.VAR_POSITIONAL

def isvkws(x) -> TypeGuard[Parameter.VAR_KEYWORD]:
    '''Check if `x` is a parameter of `Parameter.VAR_KEYWORD` kind.'''
    return isparam(x) and x.kind == Parameter.VAR_KEYWORD

def issig(x) -> TypeGuard[Signature]:
    '''Check if `x` is a `Signature`'''
    return isinstance(x, Signature)

def ispsa(x) -> TypeGuard[ParamSpecArgs]:
    '''Check if `x` is an instance of `ParamSpecArgs` i.e. `P.args`'''
    return isinstance(x, ParamSpecArgs)

def ispsk(x) -> TypeGuard[ParamSpecKwargs]:
    '''Check if `x` is an instance of `ParamSpecKwargs` i.e. `P.kwargs`'''
    return isinstance(x, ParamSpecKwargs)

def isenum(x) -> TypeGuard[Enum | EnumMeta]:
    "Check if `x` is an `Enum` type"
    return isinstance(x, EnumMeta)

# %% ../nbs/02_grds.ipynb 19
def is_optional_ducktype(x) -> TypeGuard[type]:
    optspec = str(getattr(x, __SPECIES__, None)) == OPT
    hasnone = NoneType in getattr(x, __USETYPES__, lambda : ())()
    return (optspec or hasnone)

def is_optional(x) -> TypeGuard[T | None]:
    "Check if `x` is an optional type"
    isname = getattr(x, __NAME__, None) == 'Optional'
    isgenr = isinstance(x, _UnionGenericAlias)
    args = get_args(x)
    isnone = False if not len(args) else args[-1] == NoneType
    return (isname and isgenr and isnone)

def isoptional(x) -> TypeGuard[T | None]:
    "Check if `x` is an optional type"
    isopt = is_optional(x)
    isdck = is_optional_ducktype(x)
    return isopt or isdck

# %% ../nbs/02_grds.ipynb 21
def istypeddictmeta(x) -> TypeGuard[_TypedDictMeta]:
    "Check if `x` is an `_TypedDictMeta` type"
    return isinstance(x, _TypedDictMeta)

# %% ../nbs/02_grds.ipynb 23
def isdunder(s: str) -> TypeGuard[str]:
    return s.startswith(U2) and s.endswith(U2)

def ismangled(k: str, s: str) -> TypeGuard[str]:
    beg = f'{U1}{k}'
    end = s.split(beg)[-1]
    return s.startswith(beg) and s.endswith(end) and end.startswith(U2)

# %% ../nbs/02_grds.ipynb 24
def not_class_key(key: str, cls: Callable | None = None) -> bool:
    '''Check if `key` is neither a dunder or a mangled class attribute.'''
    return not isdunder(key) and not ismangled(getattr(cls, __NAME__, NIL), key)

# %% ../nbs/02_grds.ipynb 26
def hasvarg(spec: Signature | dict[str, Parameter]) -> bool:
    '''Check if the signature has a VAR_POSITIONAL parameter.'''
    if issig(spec): return any((isvarg(p) for p in spec.parameters.values()))
    if isdict(spec): return any((isvarg(p) for p in spec.values()))
    return any((isvarg(p) for p in spec))

def hasvkws(spec: Signature | dict[str, Parameter]) -> bool:
    '''Check if the signature has a VAR_KEYWORD parameter.'''
    if issig(spec): return any((isvkws(p) for p in spec.parameters.values()))
    if isdict(spec): return any((isvkws(p) for p in spec.values()))
    return any((isvkws(p) for p in spec))
