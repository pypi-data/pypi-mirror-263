# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/01_atyp.ipynb.

# %% auto 0
__all__ = ['T', 'K', 'P', 'TDict', 'TDictMeta', 'DictTypes']

# %% ../nbs/01_atyp.ipynb 6
from inspect import Signature, Parameter, get_annotations, _ParameterKind as ParamKind, _empty as Empty
from functools import wraps, partial
from enum import EnumMeta

# %% ../nbs/01_atyp.ipynb 8
from types import NoneType, WrapperDescriptorType, FunctionType, MethodWrapperType
from typing import (
    Any, Self, Type, Callable, TypeVar, ParamSpec, TypeGuard, TypedDict,
    ParamSpecArgs, ParamSpecKwargs, get_args, _UnionGenericAlias,
    TypeAlias, Union, _TypedDictMeta, ForwardRef
)

# %% ../nbs/01_atyp.ipynb 10
#| export


# %% ../nbs/01_atyp.ipynb 12
#| export


# %% ../nbs/01_atyp.ipynb 14
#| export


# %% ../nbs/01_atyp.ipynb 17
T = TypeVar('T', bound=dict)

K = TypeVar('K', bound=dict) 

P = ParamSpec('P')

# %% ../nbs/01_atyp.ipynb 19
_ARGS = Parameter('args', kind=ParamKind.VAR_POSITIONAL, annotation=P.args)
'''Default `Parameter` for `*args`.''';

_KWDS = Parameter('kwargs', kind=ParamKind.VAR_KEYWORD, annotation=P.kwargs)
'''Default `Parameter` for `**kwargs`.''';

# %% ../nbs/01_atyp.ipynb 21
TDict: TypeAlias = ForwardRef('TypeDict', module='dtyp.ncls', is_class=True)
TDictMeta: TypeAlias = ForwardRef('TypedDictMeta', module='dtyp.ncls', is_class=True)
DictTypes: TypeAlias = Union[dict, TDict, TDictMeta, _TypedDictMeta]
