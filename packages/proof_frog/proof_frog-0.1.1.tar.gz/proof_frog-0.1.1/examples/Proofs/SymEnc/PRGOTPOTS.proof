import 'examples/Schemes/SymEnc/PRGOTP.scheme';
import 'examples/Games/PRG/Security.game';
import 'examples/Games/SymEnc/OneTimeSecrecy.game';
import 'examples/Games/Misc/OTPOTS.game';

Reduction R1(PRGOTP E, PRG G) compose Security(G) against OneTimeSecrecy(E).Adversary {
    E.Ciphertext Eavesdrop(E.message mL, E.message mR) {
        E.Message z = challenger.Query();
        E.Ciphertext c = z + mL;
        return c;
    }
}

Reduction R2(PRGOTP E, PRG G) compose Security(G) against OneTimeSecrecy(E).Adversary {
    E.Ciphertext Eavesdrop(E.message mL, E.message mR) {
        E.Message z = challenger.Query();
        E.Ciphertext c = z + mR;
        return c;
    }
}

proof:

let:
    int lambda;
    int stretch;
    PRG G = PRG(lambda, stretch);
    PRGOTP E = PRGOTP(G);

assume:
    OTPOTS(lambda + stretch);
    Security(G);

theorem:
    OneTimeSecrecy(E);

games:
    OneTimeSecrecy(E).Left against OneTimeSecrecy(E).Adversary;

    // Codewise equivalent

    Security(G).Real compose R1(E, G) against OneTimeSecrecy(E).Adversary;

    // By assumption

    Security(G).Random compose R1(E, G) against OneTimeSecrecy(E).Adversary;

    // Codewise equivalent
    OTP(lambda + stretch).Left against OneTimeSecrecy(E).Adversary;

    // Assumption
    OTP(lambda + stretch).Right against OneTimeSecrecy(E).Adversary;

    // Codewise equivalence

    Security(G).Random compose R2(E, G) against OneTimeSecrecy(E).Adversary;

    // By assumption
    Security(G).Real compose R2(E, G) against OneTimeSecrecy(E).Adversary;

    OneTimeSecrecy(E).Right against OneTimeSecrecy(E).Adversary;
