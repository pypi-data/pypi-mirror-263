# coding: utf-8

"""
    IdentityNow V3 API

    Use these APIs to interact with the IdentityNow platform to achieve repeatable, automated processes with greater scalability. We encourage you to join the SailPoint Developer Community forum at https://developer.sailpoint.com/discuss to connect with other developers using our APIs.

    The version of the OpenAPI document: 3.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
import re  # noqa: F401
from enum import Enum



try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class SourceFeature(str, Enum):
    """
    Optional features that can be supported by an source. * AUTHENTICATE: The source supports pass-through authentication. * COMPOSITE: The source supports composite source creation. * DIRECT_PERMISSIONS: The source supports returning DirectPermissions. * DISCOVER_SCHEMA: The source supports discovering schemas for users and groups. * ENABLE The source supports reading if an account is enabled or disabled. * MANAGER_LOOKUP: The source supports looking up managers as they are encountered in a feed. This is the opposite of NO_RANDOM_ACCESS. * NO_RANDOM_ACCESS: The source does not support random access and the getObject() methods should not be called and expected to perform. * PROXY: The source can serve as a proxy for another source. When an source has a proxy, all connector calls made with that source are redirected through the connector for the proxy source. * SEARCH * TEMPLATE * UNLOCK: The source supports reading if an account is locked or unlocked. * UNSTRUCTURED_TARGETS: The source supports returning unstructured Targets. * SHAREPOINT_TARGET: The source supports returning unstructured Target data for SharePoint. It will be typically used by AD, LDAP sources. * PROVISIONING: The source can both read and write accounts. Having this feature implies that the provision() method is implemented. It also means that direct and target permissions can also be provisioned if they can be returned by aggregation. * GROUP_PROVISIONING: The source can both read and write groups. Having this feature implies that the provision() method is implemented. * SYNC_PROVISIONING: The source can provision accounts synchronously. * PASSWORD: The source can provision password changes. Since sources can never read passwords, this is should only be used in conjunction with the PROVISIONING feature. * CURRENT_PASSWORD: Some source types support verification of the current password * ACCOUNT_ONLY_REQUEST: The source supports requesting accounts without entitlements. * ADDITIONAL_ACCOUNT_REQUEST: The source supports requesting additional accounts. * NO_AGGREGATION: A source that does not support aggregation. * GROUPS_HAVE_MEMBERS: The source models group memberships with a member attribute on the group object rather than a groups attribute on the account object. This effects the implementation of delta account aggregation. * NO_PERMISSIONS_PROVISIONING: Indicates that the connector cannot provision direct or target permissions for accounts. When DIRECT_PERMISSIONS and PROVISIONING features are present, it is assumed that the connector can also provision direct permissions. This feature disables that assumption and causes permission request to be converted to work items for accounts. * NO_GROUP_PERMISSIONS_PROVISIONING: Indicates that the connector cannot provision direct or target permissions for groups. When DIRECT_PERMISSIONS and PROVISIONING features are present, it is assumed that the connector can also provision direct permissions. This feature disables that assumption and causes permission request to be converted to work items for groups. * NO_UNSTRUCTURED_TARGETS_PROVISIONING: This string will be replaced by NO_GROUP_PERMISSIONS_PROVISIONING and NO_PERMISSIONS_PROVISIONING. * NO_DIRECT_PERMISSIONS_PROVISIONING: This string will be replaced by NO_GROUP_PERMISSIONS_PROVISIONING and NO_PERMISSIONS_PROVISIONING.
    """

    """
    allowed enum values
    """
    AUTHENTICATE = 'AUTHENTICATE'
    COMPOSITE = 'COMPOSITE'
    DIRECT_PERMISSIONS = 'DIRECT_PERMISSIONS'
    DISCOVER_SCHEMA = 'DISCOVER_SCHEMA'
    ENABLE = 'ENABLE'
    MANAGER_LOOKUP = 'MANAGER_LOOKUP'
    NO_RANDOM_ACCESS = 'NO_RANDOM_ACCESS'
    PROXY = 'PROXY'
    SEARCH = 'SEARCH'
    TEMPLATE = 'TEMPLATE'
    UNLOCK = 'UNLOCK'
    UNSTRUCTURED_TARGETS = 'UNSTRUCTURED_TARGETS'
    SHAREPOINT_TARGET = 'SHAREPOINT_TARGET'
    PROVISIONING = 'PROVISIONING'
    GROUP_PROVISIONING = 'GROUP_PROVISIONING'
    SYNC_PROVISIONING = 'SYNC_PROVISIONING'
    PASSWORD = 'PASSWORD'
    CURRENT_PASSWORD = 'CURRENT_PASSWORD'
    ACCOUNT_ONLY_REQUEST = 'ACCOUNT_ONLY_REQUEST'
    ADDITIONAL_ACCOUNT_REQUEST = 'ADDITIONAL_ACCOUNT_REQUEST'
    NO_AGGREGATION = 'NO_AGGREGATION'
    GROUPS_HAVE_MEMBERS = 'GROUPS_HAVE_MEMBERS'
    NO_PERMISSIONS_PROVISIONING = 'NO_PERMISSIONS_PROVISIONING'
    NO_GROUP_PERMISSIONS_PROVISIONING = 'NO_GROUP_PERMISSIONS_PROVISIONING'
    NO_UNSTRUCTURED_TARGETS_PROVISIONING = 'NO_UNSTRUCTURED_TARGETS_PROVISIONING'
    NO_DIRECT_PERMISSIONS_PROVISIONING = 'NO_DIRECT_PERMISSIONS_PROVISIONING'
    PREFER_UUID = 'PREFER_UUID'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of SourceFeature from a JSON string"""
        return cls(json.loads(json_str))


