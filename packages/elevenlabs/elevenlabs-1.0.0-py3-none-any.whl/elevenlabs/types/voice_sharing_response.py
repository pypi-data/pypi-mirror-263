# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.datetime_utils import serialize_datetime
from .review_status import ReviewStatus
from .voice_sharing_state import VoiceSharingState

try:
    import pydantic.v1 as pydantic  # type: ignore
except ImportError:
    import pydantic  # type: ignore


class VoiceSharingResponse(pydantic.BaseModel):
    status: VoiceSharingState
    history_item_sample_id: str
    date_unix: int
    whitelisted_emails: typing.List[str]
    public_owner_id: str
    original_voice_id: str
    financial_rewards_enabled: bool
    free_users_allowed: bool
    live_moderation_enabled: bool
    rate: float
    notice_period: int
    disable_at_unix: int
    voice_mixing_allowed: bool
    instagram_username: str
    twitter_username: str
    youtube_username: str
    tiktok_username: str
    featured: bool
    ban_reason: str
    liked_by_count: int
    cloned_by_count: int
    name: str
    description: str
    labels: typing.Dict[str, str]
    review_status: ReviewStatus
    review_message: str
    enabled_in_library: bool

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
